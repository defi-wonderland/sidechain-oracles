{
  "address": "0xd20e90Ea345Ba7bAd69402F3E3424aEE5ADde0e2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOracleSidechain",
          "name": "_oracleSidechain",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "blockTimestamp",
          "type": "uint32"
        }
      ],
      "name": "ObservationNotWritable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "blockTimestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        }
      ],
      "name": "ObservationAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_blockTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "int24",
          "name": "_tick",
          "type": "int24"
        }
      ],
      "name": "addObservation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleSidechain",
      "outputs": [
        {
          "internalType": "contract IOracleSidechain",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8cc011d1d73159176ad1aa7a45e391fbc33da60aad33ffe431a6dbeb8701e725",
  "receipt": {
    "to": null,
    "from": "0x57B067e4E27558FE2c60fCE86941011cB5F5A4FD",
    "contractAddress": "0xd20e90Ea345Ba7bAd69402F3E3424aEE5ADde0e2",
    "transactionIndex": 13,
    "gasUsed": "181642",
    "logsBloom": "0x
    "blockHash": "0x588d5c87a81eb5908d9ab6bff6539a6fd9c51bb3cc56c352130c0f3da021787e",
    "transactionHash": "0x8cc011d1d73159176ad1aa7a45e391fbc33da60aad33ffe431a6dbeb8701e725",
    "logs": [],
    "blockNumber": 7058590,
    "cumulativeGasUsed": "2528063",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD2D12509179a15bA5B19514268EA475118430fC9"
  ],
  "numDeployments": 1,
  "solcInputHash": "8760d5df28a0ea01be19d82883131c49",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOracleSidechain\",\"name\":\"_oracleSidechain\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"}],\"name\":\"ObservationNotWritable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ObservationAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"_tick\",\"type\":\"int24\"}],\"name\":\"addObservation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleSidechain\",\"outputs\":[{\"internalType\":\"contract IOracleSidechain\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/DataReceiver.sol\":\"DataReceiver\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"solidity/contracts/DataReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IDataReceiver, IOracleSidechain} from '../interfaces/IDataReceiver.sol';\\n\\ncontract DataReceiver is IDataReceiver {\\n  IOracleSidechain public immutable oracleSidechain;\\n\\n  constructor(IOracleSidechain _oracleSidechain) {\\n    oracleSidechain = _oracleSidechain;\\n  }\\n\\n  function addObservation(uint32 _blockTimestamp, int24 _tick) external {\\n    if (oracleSidechain.write(_blockTimestamp, _tick)) {\\n      emit ObservationAdded(msg.sender, _blockTimestamp, _tick);\\n    } else {\\n      revert ObservationNotWritable(_blockTimestamp);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd253524d40153b90a7de4406bfe0a77214f45d93868abe31a44e62abe5094efa\",\"license\":\"Unlicense\"},\"solidity/interfaces/IDataReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleSidechain} from '../interfaces/IOracleSidechain.sol';\\n\\n/// @title The DataReceiver interface\\n/// @author 0xJabberwock (from DeFi Wonderland)\\n/// @notice Contains state variables, events, custom errors and functions used in DataReceiver\\ninterface IDataReceiver {\\n  // STATE VARIABLES\\n\\n  function oracleSidechain() external view returns (IOracleSidechain _oracleSidechain);\\n\\n  // EVENTS\\n\\n  event ObservationAdded(address user, uint32 blockTimestamp, int24 tick);\\n\\n  // CUSTOM ERRORS\\n\\n  error ObservationNotWritable(uint32 blockTimestamp);\\n\\n  // FUNCTIONS\\n\\n  function addObservation(uint32 _blockTimestamp, int24 _tick) external;\\n}\\n\",\"keccak256\":\"0xe15422cce08598061b096a74396c7eb46885a53cdf0edd36c9cb4beb0fd2acd4\",\"license\":\"Unlicense\"},\"solidity/interfaces/IOracleSidechain.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\n/// @title The OracleSidechain interface\\n/// @author 0xJabberwock (from DeFi Wonderland)\\n/// @notice Contains state variables, events, custom errors and functions used in OracleSidechain\\ninterface IOracleSidechain {\\n  // STATE VARIABLES\\n\\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n  /// when accessed externally.\\n  /// @return observationIndex The index of the last oracle observation that was written,\\n  /// @return observationCardinality The current maximum number of observations stored in the pool,\\n  /// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint16 observationIndex,\\n      uint16 observationCardinality,\\n      uint16 observationCardinalityNext\\n    );\\n\\n  function lastTick() external view returns (int24 lastTick);\\n\\n  /// @notice Returns data about a specific observation index\\n  /// @param index The element of the observations array to fetch\\n  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n  /// ago, rather than at a specific index in the array.\\n  /// @return blockTimestamp The timestamp of the observation,\\n  /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n  /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n  /// @return initialized whether the observation has been initialized and the values are safe to use\\n  function observations(uint256 index)\\n    external\\n    view\\n    returns (\\n      uint32 blockTimestamp,\\n      int56 tickCumulative,\\n      uint160 secondsPerLiquidityCumulativeX128,\\n      bool initialized\\n    );\\n\\n  // EVENTS\\n\\n  /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n  /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n  /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n  /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n  event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n  /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n  /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n  /// just before a mint/swap/burn.\\n  /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n  /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n  event IncreaseObservationCardinalityNext(uint16 observationCardinalityNextOld, uint16 observationCardinalityNextNew);\\n\\n  event ObservationWritten(address user, uint32 blockTimestamp, int24 tick);\\n\\n  // CUSTOM ERRORS\\n\\n  error AI();\\n\\n  // FUNCTIONS\\n\\n  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n  /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n  /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n  /// you must call it with secondsAgos = [3600, 0].\\n  /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n  /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n  /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n  /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n  /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n  /// timestamp\\n  function observe(uint32[] calldata secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n  function write(uint32 blockTimestamp, int24 tick) external returns (bool written);\\n\\n  /// @notice Sets the initial price for the pool\\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n  /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n  function initialize(uint160 sqrtPriceX96) external;\\n\\n  /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n  /// the input observationCardinalityNext.\\n  /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x264a06a2d83ad20a9f520b97d620a2ade10305203a70583043d168575233f85a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516102db3803806102db83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161024b610090600039600081816040015260b8015261024b6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639dad31451461003b578063b17145581461007e575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61009161008c3660046101a3565b610093565b005b604051631147360360e31b815263ffffffff83166004820152600282900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638a39b018906044016020604051808303816000875af1158015610109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012d91906101ec565b1561017e576040805133815263ffffffff84166020820152600283900b8183015290517f5a5848a7b07f71483ca0d7217689f80dc2d3bc6c2f64dd295c8227ecde7fbd7a9181900360600190a15050565b60405163732fe5ed60e11b815263ffffffff8316600482015260240160405180910390fd5b600080604083850312156101b657600080fd5b823563ffffffff811681146101ca57600080fd5b91506020830135600281900b81146101e157600080fd5b809150509250929050565b6000602082840312156101fe57600080fd5b8151801515811461020e57600080fd5b939250505056fea2646970667358221220a14b0d76cb546e98c353ced81911b25128b7bee06973bfd7a01dabaaf80ef84d64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80639dad31451461003b578063b17145581461007e575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61009161008c3660046101a3565b610093565b005b604051631147360360e31b815263ffffffff83166004820152600282900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638a39b018906044016020604051808303816000875af1158015610109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012d91906101ec565b1561017e576040805133815263ffffffff84166020820152600283900b8183015290517f5a5848a7b07f71483ca0d7217689f80dc2d3bc6c2f64dd295c8227ecde7fbd7a9181900360600190a15050565b60405163732fe5ed60e11b815263ffffffff8316600482015260240160405180910390fd5b600080604083850312156101b657600080fd5b823563ffffffff811681146101ca57600080fd5b91506020830135600281900b81146101e157600080fd5b809150509250929050565b6000602082840312156101fe57600080fd5b8151801515811461020e57600080fd5b939250505056fea2646970667358221220a14b0d76cb546e98c353ced81911b25128b7bee06973bfd7a01dabaaf80ef84d64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}