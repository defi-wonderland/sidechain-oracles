{
  "address": "0x0BcD059c1546359b45f2606Ed6E08e1F5ef4f4Bf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "contract IDataReceiver",
          "name": "_dataReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDataReceiver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPendingGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IDataReceiver",
          "name": "_dataReceiver",
          "type": "address"
        }
      ],
      "name": "DataReceiverSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_initialCardinality",
          "type": "uint16"
        }
      ],
      "name": "InitialCardinalitySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_poolSalt",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "_initialNonce",
          "type": "uint24"
        }
      ],
      "name": "OracleDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ORACLE_INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataReceiver",
      "outputs": [
        {
          "internalType": "contract IDataReceiver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_poolSalt",
          "type": "bytes32"
        },
        {
          "internalType": "uint24",
          "name": "_initialNonce",
          "type": "uint24"
        }
      ],
      "name": "deployOracle",
      "outputs": [
        {
          "internalType": "contract IOracleSidechain",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_fee",
          "type": "uint24"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "contract IOracleSidechain",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_poolSalt",
          "type": "bytes32"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "contract IOracleSidechain",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_fee",
          "type": "uint24"
        }
      ],
      "name": "getPoolSalt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_poolSalt",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_poolSalt",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "_observationCardinalityNext",
          "type": "uint16"
        }
      ],
      "name": "increaseOracleCardinality",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialCardinality",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleParameters",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "poolSalt",
          "type": "bytes32"
        },
        {
          "internalType": "uint24",
          "name": "poolNonce",
          "type": "uint24"
        },
        {
          "internalType": "uint16",
          "name": "cardinality",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDataReceiver",
          "name": "_dataReceiver",
          "type": "address"
        }
      ],
      "name": "setDataReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_initialCardinality",
          "type": "uint16"
        }
      ],
      "name": "setInitialCardinality",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "setPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x70b5d792a0b1c373ea60f48ae24262eeb31f29f47a16f07c0d93f256475911db",
  "receipt": {
    "to": null,
    "from": "0xa6DBFF53DD8F89f0bf4f6800BFDFfE099875bd9d",
    "contractAddress": "0x0BcD059c1546359b45f2606Ed6E08e1F5ef4f4Bf",
    "transactionIndex": 17,
    "gasUsed": "2228781",
    "logsBloom": "0x
    "blockHash": "0x388b0160c1518f1dc9fef8088673632d36f06a8e6c4eef84fb3b0b56467f1a0e",
    "transactionHash": "0x70b5d792a0b1c373ea60f48ae24262eeb31f29f47a16f07c0d93f256475911db",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 124330024,
        "transactionHash": "0x70b5d792a0b1c373ea60f48ae24262eeb31f29f47a16f07c0d93f256475911db",
        "address": "0x0BcD059c1546359b45f2606Ed6E08e1F5ef4f4Bf",
        "topics": [
          "0x23ab7a40fedc3062f72fa590994df2ec8e49b54309a22df0ad3790dbc56346be"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000042069",
        "logIndex": 84,
        "blockHash": "0x388b0160c1518f1dc9fef8088673632d36f06a8e6c4eef84fb3b0b56467f1a0e"
      }
    ],
    "blockNumber": 124330024,
    "cumulativeGasUsed": "7524415",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa6DBFF53DD8F89f0bf4f6800BFDFfE099875bd9d",
    "0x0000000000000000000000000000000000042069"
  ],
  "numDeployments": 4,
  "solcInputHash": "1ffcc3895a1a8980b9e58deee89219d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"contract IDataReceiver\",\"name\":\"_dataReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDataReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPendingGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IDataReceiver\",\"name\":\"_dataReceiver\",\"type\":\"address\"}],\"name\":\"DataReceiverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_initialCardinality\",\"type\":\"uint16\"}],\"name\":\"InitialCardinalitySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_poolSalt\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"_initialNonce\",\"type\":\"uint24\"}],\"name\":\"OracleDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ORACLE_INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataReceiver\",\"outputs\":[{\"internalType\":\"contract IDataReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_poolSalt\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"_initialNonce\",\"type\":\"uint24\"}],\"name\":\"deployOracle\",\"outputs\":[{\"internalType\":\"contract IOracleSidechain\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"contract IOracleSidechain\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_poolSalt\",\"type\":\"bytes32\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"contract IOracleSidechain\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"getPoolSalt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_poolSalt\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_poolSalt\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseOracleCardinality\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialCardinality\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleParameters\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolSalt\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"poolNonce\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"cardinality\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDataReceiver\",\"name\":\"_dataReceiver\",\"type\":\"address\"}],\"name\":\"setDataReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_initialCardinality\",\"type\":\"uint16\"}],\"name\":\"setInitialCardinality\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployOracle(bytes32,uint24)\":{\"details\":\"Requires that the salt has not been deployed before\",\"params\":{\"_poolSalt\":\"Pool salt that deterministically binds an oracle with a pool\"},\"returns\":{\"_oracle\":\"The address of the newly deployed oracle\"}},\"getPool(address,address,uint24)\":{\"params\":{\"_fee\":\"The fee denominated in hundredths of a bip\",\"_tokenA\":\"The contract address of either token0 or token1\",\"_tokenB\":\"The contract address of the other token\"},\"returns\":{\"_oracle\":\"The oracle address\"}},\"getPool(bytes32)\":{\"params\":{\"_poolSalt\":\"Identifier of both the pool and the oracle\"},\"returns\":{\"_oracle\":\"The address (if deployed) of the correspondant oracle\"}},\"getPoolSalt(address,address,uint24)\":{\"params\":{\"_fee\":\"The fee denominated in hundredths of a bip\",\"_tokenA\":\"The contract address of either token0 or token1\",\"_tokenB\":\"The contract address of the other token\"},\"returns\":{\"_poolSalt\":\"Pool salt for inquired parameters\"}},\"setDataReceiver(address)\":{\"details\":\"Will disallow the previous dataReceiver\",\"params\":{\"_dataReceiver\":\"The address of the new allowed dataReceiver\"}},\"setInitialCardinality(uint16)\":{\"params\":{\"_initialCardinality\":\"The initial size of the observations memory storage for newly deployed pools\"}},\"setPendingGovernor(address)\":{\"params\":{\"_pendingGovernor\":\"Address of the proposed new governor\"}}},\"stateVariables\":{\"ORACLE_INIT_CODE_HASH\":{\"return\":\"The oracle creation code hash used to calculate their address\",\"returns\":{\"_0\":\"The oracle creation code hash used to calculate their address\"}},\"dataReceiver\":{\"return\":\"The address of the DataReceiver for the oracles to consult\",\"returns\":{\"_0\":\"The address of the DataReceiver for the oracles to consult\"}},\"initialCardinality\":{\"return\":\"The initial size of the observations memory storage for newly deployed pools\",\"returns\":{\"_0\":\"The initial size of the observations memory storage for newly deployed pools\"}},\"oracleParameters\":{\"returns\":{\"cardinality\":\"The size of the observations memory storage\",\"poolNonce\":\"The initial nonce of the pool data\",\"poolSalt\":\"The id of both the oracle and the pool\"}}},\"title\":\"The OracleFactory contract\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidAddress()\":[{\"notice\":\"Thrown if an address is invalid\"}],\"InvalidAmount()\":[{\"notice\":\"Thrown if an amount is invalid\"}],\"LengthMismatch()\":[{\"notice\":\"Thrown if the lengths of a set of lists mismatch\"}],\"OnlyDataReceiver()\":[{\"notice\":\"Thrown when a contract other than the DataReceiver tries to deploy an oracle\"}],\"OnlyGovernor()\":[{\"notice\":\"Thrown if a non-governor user tries to call a OnlyGovernor function\"}],\"OnlyPendingGovernor()\":[{\"notice\":\"Thrown if a non-pending-governor user tries to call a OnlyPendingGovernor function\"}],\"ZeroAddress()\":[{\"notice\":\"Thrown if an address is the zero address\"}],\"ZeroAmount()\":[{\"notice\":\"Thrown if an amount is zero\"}]},\"events\":{\"DataReceiverSet(address)\":{\"notice\":\"Emitted when a new DataReceiver is set\"},\"InitialCardinalitySet(uint16)\":{\"notice\":\"Emitted when a new initial oracle cardinality is set\"},\"OracleDeployed(bytes32,address,uint24)\":{\"notice\":\"Emitted when a new oracle is deployed\"},\"PendingGovernorAccepted(address)\":{\"notice\":\"Emitted when a new governor is set\"},\"PendingGovernorSet(address,address)\":{\"notice\":\"Emitted when a new pending governor is set\"}},\"kind\":\"user\",\"methods\":{\"acceptPendingGovernor()\":{\"notice\":\"Allows a proposed governor to accept the governance\"},\"deployOracle(bytes32,uint24)\":{\"notice\":\"Deploys a new oracle given an inputted salt\"},\"getPool(address,address,uint24)\":{\"notice\":\"Overrides UniV3Factory getPool mapping\"},\"getPool(bytes32)\":{\"notice\":\"Tracks the addresses of the oracle by poolSalt\"},\"setDataReceiver(address)\":{\"notice\":\"Allows governor to set a new allowed dataReceiver\"},\"setInitialCardinality(uint16)\":{\"notice\":\"Allows governor to set a new initial cardinality for new oracles\"},\"setPendingGovernor(address)\":{\"notice\":\"Allows a governor to propose a new governor\"}},\"notice\":\"Handles the deployment of new OracleSidechains\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/OracleFactory.sol\":\"OracleFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@defi-wonderland/solidity-utils/solidity/contracts/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IGovernable} from '../interfaces/IGovernable.sol';\\n\\n/// @title Governable contract\\n/// @notice Manages the governor role\\nabstract contract Governable is IGovernable {\\n    /// @inheritdoc IGovernable\\n    address public governor;\\n\\n    /// @inheritdoc IGovernable\\n    address public pendingGovernor;\\n\\n    constructor(address _governor) {\\n        if (_governor == address(0)) revert ZeroAddress();\\n        governor = _governor;\\n    }\\n\\n    /// @inheritdoc IGovernable\\n    function setPendingGovernor(address _pendingGovernor) external onlyGovernor {\\n        _setPendingGovernor(_pendingGovernor);\\n    }\\n\\n    /// @inheritdoc IGovernable\\n    function acceptPendingGovernor() external onlyPendingGovernor {\\n        _acceptPendingGovernor();\\n    }\\n\\n    function _setPendingGovernor(address _pendingGovernor) internal {\\n        if (_pendingGovernor == address(0)) revert ZeroAddress();\\n        pendingGovernor = _pendingGovernor;\\n        emit PendingGovernorSet(governor, _pendingGovernor);\\n    }\\n\\n    function _acceptPendingGovernor() internal {\\n        governor = pendingGovernor;\\n        delete pendingGovernor;\\n        emit PendingGovernorAccepted(governor);\\n    }\\n\\n    /// @notice Functions with this modifier can only be called by governor\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor) revert OnlyGovernor();\\n        _;\\n    }\\n\\n    /// @notice Functions with this modifier can only be called by pendingGovernor\\n    modifier onlyPendingGovernor() {\\n        if (msg.sender != pendingGovernor) revert OnlyPendingGovernor();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x3f11408cfcb015a99dc417e075c8ebc39b796fc2adc3e81b036487e4486881b3\",\"license\":\"MIT\"},\"@defi-wonderland/solidity-utils/solidity/interfaces/IBaseErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\ninterface IBaseErrors {\\n    /// @notice Thrown if an address is invalid\\n    error InvalidAddress();\\n\\n    /// @notice Thrown if an amount is invalid\\n    error InvalidAmount();\\n\\n    /// @notice Thrown if the lengths of a set of lists mismatch\\n    error LengthMismatch();\\n\\n    /// @notice Thrown if an address is the zero address\\n    error ZeroAddress();\\n\\n    /// @notice Thrown if an amount is zero\\n    error ZeroAmount();\\n}\\n\",\"keccak256\":\"0xec09b9d248b6fbf6343dee41d6978abdc15d4c8df5ed7721e8df79e8b1a558cf\",\"license\":\"MIT\"},\"@defi-wonderland/solidity-utils/solidity/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IBaseErrors} from './IBaseErrors.sol';\\n\\n/// @title Governable interface\\ninterface IGovernable is IBaseErrors {\\n    // STATE VARIABLES\\n\\n    /// @return _governor Address of the current governor\\n    function governor() external view returns (address _governor);\\n\\n    /// @return _pendingGovernor Address of the current pending governor\\n    function pendingGovernor() external view returns (address _pendingGovernor);\\n\\n    // EVENTS\\n\\n    /// @notice Emitted when a new pending governor is set\\n    /// @param _governor Address of the current governor\\n    /// @param _pendingGovernor Address of the proposed next governor\\n    event PendingGovernorSet(address _governor, address _pendingGovernor);\\n\\n    /// @notice Emitted when a new governor is set\\n    /// @param _newGovernor Address of the new governor\\n    event PendingGovernorAccepted(address _newGovernor);\\n\\n    // ERRORS\\n\\n    /// @notice Thrown if a non-governor user tries to call a OnlyGovernor function\\n    error OnlyGovernor();\\n\\n    /// @notice Thrown if a non-pending-governor user tries to call a OnlyPendingGovernor function\\n    error OnlyPendingGovernor();\\n\\n    // FUNCTIONS\\n\\n    /// @notice Allows a governor to propose a new governor\\n    /// @param _pendingGovernor Address of the proposed new governor\\n    function setPendingGovernor(address _pendingGovernor) external;\\n\\n    /// @notice Allows a proposed governor to accept the governance\\n    function acceptPendingGovernor() external;\\n}\\n\",\"keccak256\":\"0x40b94706a00d2c092f620807ba84bdd0c5ed8cfa60140c924edc850427e0af13\",\"license\":\"MIT\"},\"@defi-wonderland/solidity-utils/solidity/libraries/Create2Address.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.8 <0.9.0;\\n\\n/// @title Provides functions for deriving a UniswapV3Pool address from its factory, tokens and fee\\nlibrary Create2Address {\\n    /// @notice Deterministically computes the pool address given the factory, salt and initCodeHash\\n    /// @param _factory The Uniswap V3 factory contract address\\n    /// @param _salt The PoolKey encoded bytes\\n    /// @param _initCodeHash The Init Code Hash of the target\\n    /// @return _pool The contract address of the target UniswapV3Pool\\n    function computeAddress(address _factory, bytes32 _salt, bytes32 _initCodeHash)\\n        internal\\n        pure\\n        returns (address _pool)\\n    {\\n        _pool = address(uint160(uint256(keccak256(abi.encodePacked(hex'ff', _factory, _salt, _initCodeHash)))));\\n    }\\n}\\n\",\"keccak256\":\"0x867e71cdb6b5b3a4b5f3e6d9bd27262a13d6b54eb18957e8c27cfbbff886ad9d\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/// @title Oracle\\n/// @notice Provides price and liquidity data useful for a wide variety of system designs\\n/// @dev Instances of stored oracle data, \\\"observations\\\", are collected in the oracle array\\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\\n/// Observations are overwritten when the full length of the oracle array is populated.\\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\\nlibrary Oracle {\\n    error I();\\n    error OLD();\\n\\n    struct Observation {\\n        // the block timestamp of the observation\\n        uint32 blockTimestamp;\\n        // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\\n        int56 tickCumulative;\\n        // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        // whether or not the observation is initialized\\n        bool initialized;\\n    }\\n\\n    /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values\\n    /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\\n    /// @param last The specified observation to be transformed\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @return Observation The newly populated observation\\n    function transform(\\n        Observation memory last,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity\\n    ) private pure returns (Observation memory) {\\n        unchecked {\\n            uint32 delta = blockTimestamp - last.blockTimestamp;\\n            return\\n                Observation({\\n                    blockTimestamp: blockTimestamp,\\n                    tickCumulative: last.tickCumulative + int56(tick) * int56(uint56(delta)),\\n                    secondsPerLiquidityCumulativeX128: last.secondsPerLiquidityCumulativeX128 +\\n                        ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),\\n                    initialized: true\\n                });\\n        }\\n    }\\n\\n    /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array\\n    /// @param self The stored oracle array\\n    /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32\\n    /// @return cardinality The number of populated elements in the oracle array\\n    /// @return cardinalityNext The new length of the oracle array, independent of population\\n    function initialize(Observation[65535] storage self, uint32 time)\\n        internal\\n        returns (uint16 cardinality, uint16 cardinalityNext)\\n    {\\n        self[0] = Observation({\\n            blockTimestamp: time,\\n            tickCumulative: 0,\\n            secondsPerLiquidityCumulativeX128: 0,\\n            initialized: true\\n        });\\n        return (1, 1);\\n    }\\n\\n    /// @notice Writes an oracle observation to the array\\n    /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\\n    /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\\n    /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\\n    /// @param self The stored oracle array\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @param cardinalityNext The new length of the oracle array, independent of population\\n    /// @return indexUpdated The new index of the most recently written element in the oracle array\\n    /// @return cardinalityUpdated The new cardinality of the oracle array\\n    function write(\\n        Observation[65535] storage self,\\n        uint16 index,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity,\\n        uint16 cardinality,\\n        uint16 cardinalityNext\\n    ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\\n        unchecked {\\n            Observation memory last = self[index];\\n\\n            // early return if we've already written an observation this block\\n            if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\\n\\n            // if the conditions are right, we can bump the cardinality\\n            if (cardinalityNext > cardinality && index == (cardinality - 1)) {\\n                cardinalityUpdated = cardinalityNext;\\n            } else {\\n                cardinalityUpdated = cardinality;\\n            }\\n\\n            indexUpdated = (index + 1) % cardinalityUpdated;\\n            self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);\\n        }\\n    }\\n\\n    /// @notice Prepares the oracle array to store up to `next` observations\\n    /// @param self The stored oracle array\\n    /// @param current The current next cardinality of the oracle array\\n    /// @param next The proposed next cardinality which will be populated in the oracle array\\n    /// @return next The next cardinality which will be populated in the oracle array\\n    function grow(\\n        Observation[65535] storage self,\\n        uint16 current,\\n        uint16 next\\n    ) internal returns (uint16) {\\n        unchecked {\\n            if (current <= 0) revert I();\\n            // no-op if the passed next value isn't greater than the current next value\\n            if (next <= current) return current;\\n            // store in each slot to prevent fresh SSTOREs in swaps\\n            // this data will not be used because the initialized boolean is still false\\n            for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\\n            return next;\\n        }\\n    }\\n\\n    /// @notice comparator for 32-bit timestamps\\n    /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time\\n    /// @param time A timestamp truncated to 32 bits\\n    /// @param a A comparison timestamp from which to determine the relative position of `time`\\n    /// @param b From which to determine the relative position of `time`\\n    /// @return Whether `a` is chronologically <= `b`\\n    function lte(\\n        uint32 time,\\n        uint32 a,\\n        uint32 b\\n    ) private pure returns (bool) {\\n        unchecked {\\n            // if there hasn't been overflow, no need to adjust\\n            if (a <= time && b <= time) return a <= b;\\n\\n            uint256 aAdjusted = a > time ? a : a + 2**32;\\n            uint256 bAdjusted = b > time ? b : b + 2**32;\\n\\n            return aAdjusted <= bAdjusted;\\n        }\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\\n    /// The result may be the same observation, or adjacent observations.\\n    /// @dev The answer must be contained in the array, used when the target is located within the stored observation\\n    /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation recorded before, or at, the target\\n    /// @return atOrAfter The observation recorded at, or after, the target\\n    function binarySearch(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        uint16 index,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        unchecked {\\n            uint256 l = (index + 1) % cardinality; // oldest observation\\n            uint256 r = l + cardinality - 1; // newest observation\\n            uint256 i;\\n            while (true) {\\n                i = (l + r) / 2;\\n\\n                beforeOrAt = self[i % cardinality];\\n\\n                // we've landed on an uninitialized tick, keep searching higher (more recently)\\n                if (!beforeOrAt.initialized) {\\n                    l = i + 1;\\n                    continue;\\n                }\\n\\n                atOrAfter = self[(i + 1) % cardinality];\\n\\n                bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);\\n\\n                // check if we've found the answer!\\n                if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;\\n\\n                if (!targetAtOrAfter) r = i - 1;\\n                else l = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\\n    /// @dev Assumes there is at least 1 initialized observation.\\n    /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param tick The active tick at the time of the returned or simulated observation\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The total pool liquidity at the time of the call\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\\n    /// @return atOrAfter The observation which occurred at, or after, the given timestamp\\n    function getSurroundingObservations(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        unchecked {\\n            // optimistically set before to the newest observation\\n            beforeOrAt = self[index];\\n\\n            // if the target is chronologically at or after the newest observation, we can early return\\n            if (lte(time, beforeOrAt.blockTimestamp, target)) {\\n                if (beforeOrAt.blockTimestamp == target) {\\n                    // if newest observation equals target, we're in the same block, so we can ignore atOrAfter\\n                    return (beforeOrAt, atOrAfter);\\n                } else {\\n                    // otherwise, we need to transform\\n                    return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));\\n                }\\n            }\\n\\n            // now, set before to the oldest observation\\n            beforeOrAt = self[(index + 1) % cardinality];\\n            if (!beforeOrAt.initialized) beforeOrAt = self[0];\\n\\n            // ensure that the target is chronologically at or after the oldest observation\\n            if (!lte(time, beforeOrAt.blockTimestamp, target)) revert OLD();\\n\\n            // if we've reached this point, we have to binary search\\n            return binarySearch(self, time, target, index, cardinality);\\n        }\\n    }\\n\\n    /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.\\n    /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\n    /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values\\n    /// at exactly the timestamp between the two observations.\\n    /// @param self The stored oracle array\\n    /// @param time The current block timestamp\\n    /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\n    function observeSingle(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 secondsAgo,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {\\n        unchecked {\\n            if (secondsAgo == 0) {\\n                Observation memory last = self[index];\\n                if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);\\n                return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);\\n            }\\n\\n            uint32 target = time - secondsAgo;\\n\\n            (Observation memory beforeOrAt, Observation memory atOrAfter) = getSurroundingObservations(\\n                self,\\n                time,\\n                target,\\n                tick,\\n                index,\\n                liquidity,\\n                cardinality\\n            );\\n\\n            if (target == beforeOrAt.blockTimestamp) {\\n                // we're at the left boundary\\n                return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);\\n            } else if (target == atOrAfter.blockTimestamp) {\\n                // we're at the right boundary\\n                return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);\\n            } else {\\n                // we're in the middle\\n                uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\\n                uint32 targetDelta = target - beforeOrAt.blockTimestamp;\\n                return (\\n                    beforeOrAt.tickCumulative +\\n                        ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / int56(uint56(observationTimeDelta))) *\\n                        int56(uint56(targetDelta)),\\n                    beforeOrAt.secondsPerLiquidityCumulativeX128 +\\n                        uint160(\\n                            (uint256(\\n                                atOrAfter.secondsPerLiquidityCumulativeX128 -\\n                                    beforeOrAt.secondsPerLiquidityCumulativeX128\\n                            ) * targetDelta) / observationTimeDelta\\n                        )\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\n    /// @dev Reverts if `secondsAgos` > oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\n    function observe(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32[] memory secondsAgos,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) {\\n        unchecked {\\n            if (cardinality <= 0) revert I();\\n\\n            tickCumulatives = new int56[](secondsAgos.length);\\n            secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);\\n            for (uint256 i = 0; i < secondsAgos.length; i++) {\\n                (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(\\n                    self,\\n                    time,\\n                    secondsAgos[i],\\n                    tick,\\n                    index,\\n                    liquidity,\\n                    cardinality\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa25b18af947c36b9add9e229c361beb6aba176fb435d7a24e6dc723cbc187442\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    error T();\\n    error R();\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\\n\\n            uint256 ratio = absTick & 0x1 != 0\\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\\n                : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {\\n            // second inequality must be < because the price can never reach the price at the max tick\\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = ratio;\\n            uint256 msb = 0;\\n\\n            assembly {\\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(5, gt(r, 0xFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(4, gt(r, 0xFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(3, gt(r, 0xFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(2, gt(r, 0xF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(1, gt(r, 0x3))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := gt(r, 0x1)\\n                msb := or(msb, f)\\n            }\\n\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c57de03a91cc2ec8939865dbbcb0197bb6c353b711075eefd8e0fca5e102129\",\"license\":\"GPL-2.0-or-later\"},\"solidity/contracts/OracleFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {Governable} from '@defi-wonderland/solidity-utils/solidity/contracts/Governable.sol';\\nimport {OracleSidechain} from './OracleSidechain.sol';\\nimport {IOracleFactory, IOracleSidechain, IDataReceiver} from '../interfaces/IOracleFactory.sol';\\nimport {Create2Address} from '@defi-wonderland/solidity-utils/solidity/libraries/Create2Address.sol';\\n\\n/// @title The OracleFactory contract\\n/// @notice Handles the deployment of new OracleSidechains\\ncontract OracleFactory is IOracleFactory, Governable {\\n  /// @inheritdoc IOracleFactory\\n  IDataReceiver public dataReceiver;\\n\\n  /// @inheritdoc IOracleFactory\\n  OracleParameters public oracleParameters;\\n\\n  /// @inheritdoc IOracleFactory\\n  uint16 public initialCardinality = 144;\\n\\n  /// @inheritdoc IOracleFactory\\n  bytes32 public constant ORACLE_INIT_CODE_HASH = keccak256(type(OracleSidechain).creationCode);\\n\\n  constructor(address _governor, IDataReceiver _dataReceiver) Governable(_governor) {\\n    _setDataReceiver(_dataReceiver);\\n  }\\n\\n  /// @inheritdoc IOracleFactory\\n  function deployOracle(bytes32 _poolSalt, uint24 _initialNonce) external onlyDataReceiver returns (IOracleSidechain _oracle) {\\n    oracleParameters = OracleParameters({poolSalt: _poolSalt, poolNonce: _initialNonce, cardinality: initialCardinality});\\n    _oracle = new OracleSidechain{salt: _poolSalt}();\\n\\n    delete oracleParameters;\\n    emit OracleDeployed(_poolSalt, address(_oracle), _initialNonce);\\n  }\\n\\n  /// @inheritdoc IOracleFactory\\n  function setDataReceiver(IDataReceiver _dataReceiver) external onlyGovernor {\\n    _setDataReceiver(_dataReceiver);\\n  }\\n\\n  /// @inheritdoc IOracleFactory\\n  function setInitialCardinality(uint16 _initialCardinality) external onlyGovernor {\\n    if (_initialCardinality == 0) revert ZeroAmount();\\n\\n    initialCardinality = _initialCardinality;\\n    emit InitialCardinalitySet(_initialCardinality);\\n  }\\n\\n  function increaseOracleCardinality(bytes32 _poolSalt, uint16 _observationCardinalityNext) external onlyGovernor {\\n    IOracleSidechain _oracle = getPool(_poolSalt);\\n    _oracle.increaseObservationCardinalityNext(_observationCardinalityNext);\\n  }\\n\\n  /// @inheritdoc IOracleFactory\\n  function getPool(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) external view returns (IOracleSidechain _oracle) {\\n    bytes32 _poolSalt = getPoolSalt(_tokenA, _tokenB, _fee);\\n    _oracle = getPool(_poolSalt);\\n  }\\n\\n  /// @inheritdoc IOracleFactory\\n  function getPool(bytes32 _poolSalt) public view returns (IOracleSidechain _oracle) {\\n    _oracle = IOracleSidechain(Create2Address.computeAddress(address(this), _poolSalt, ORACLE_INIT_CODE_HASH));\\n    if (address(_oracle).code.length == 0) return IOracleSidechain(address(0));\\n  }\\n\\n  /// @inheritdoc IOracleFactory\\n  function getPoolSalt(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) public pure returns (bytes32 _poolSalt) {\\n    (address _token0, address _token1) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\\n    _poolSalt = keccak256(abi.encode(_token0, _token1, _fee));\\n  }\\n\\n  function _setDataReceiver(IDataReceiver _dataReceiver) private {\\n    if (address(_dataReceiver) == address(0)) revert ZeroAddress();\\n\\n    dataReceiver = _dataReceiver;\\n    emit DataReceiverSet(_dataReceiver);\\n  }\\n\\n  modifier onlyDataReceiver() {\\n    if (msg.sender != address(dataReceiver)) revert OnlyDataReceiver();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xf0707ebeed3425fca5ccc20dfc2cb291859674ada92d5d651f7271ee3cef3d49\",\"license\":\"MIT\"},\"solidity/contracts/OracleSidechain.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/*\\n\\nCoded for The Keep3r Network with \\u2665 by\\n\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2554\\u2550\\u2588\\u2588\\u2588\\u2588\\u2551\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u255a\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u255a\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\n\\nhttps://defi.sucks\\n\\n*/\\n\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleSidechain, IOracleFactory} from '../interfaces/IOracleSidechain.sol';\\nimport {Oracle} from '@uniswap/v3-core/contracts/libraries/Oracle.sol';\\nimport {TickMath} from '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\n\\n/// @title The SidechainOracle contract\\n/// @notice Computes and stores on-chain price data from Mainnet\\ncontract OracleSidechain is IOracleSidechain {\\n  using Oracle for Oracle.Observation[65535];\\n\\n  /// @inheritdoc IOracleSidechain\\n  IOracleFactory public immutable factory;\\n\\n  struct Slot0 {\\n    // the current price\\n    uint160 sqrtPriceX96;\\n    // the current tick\\n    int24 tick;\\n    // the most-recently updated index of the observations array\\n    uint16 observationIndex;\\n    // the current maximum number of observations that are being stored\\n    uint16 observationCardinality;\\n    // the next maximum number of observations to store, triggered in observations.write\\n    uint16 observationCardinalityNext;\\n    // the current protocol fee as a percentage of the swap fee taken on withdrawal\\n    // represented as an integer denominator (1/x)%\\n    uint8 feeProtocol;\\n    // whether the pool is locked\\n    bool unlocked;\\n  }\\n  /// @inheritdoc IOracleSidechain\\n  Slot0 public slot0;\\n\\n  /// @inheritdoc IOracleSidechain\\n  Oracle.Observation[65535] public observations;\\n\\n  /// @inheritdoc IOracleSidechain\\n  bytes32 public immutable poolSalt;\\n\\n  uint24 public poolNonce;\\n  /// @inheritdoc IOracleSidechain\\n  address public token0;\\n  /// @inheritdoc IOracleSidechain\\n  address public token1;\\n  /// @inheritdoc IOracleSidechain\\n  uint24 public fee;\\n\\n  /// @dev Returns the block timestamp truncated to 32 bits, i.e. mod 2**32. This method is overridden in tests.\\n  function _getBlockTimestamp() internal view virtual returns (uint32) {\\n    return uint32(block.timestamp); // truncation is desired\\n  }\\n\\n  constructor() {\\n    factory = IOracleFactory(msg.sender);\\n    uint16 _cardinality;\\n    (poolSalt, poolNonce, _cardinality) = factory.oracleParameters();\\n\\n    slot0 = Slot0({\\n      sqrtPriceX96: 0,\\n      tick: 0,\\n      observationIndex: _cardinality - 1,\\n      observationCardinality: _cardinality,\\n      observationCardinalityNext: _cardinality,\\n      feeProtocol: 0,\\n      unlocked: true\\n    });\\n  }\\n\\n  /// @inheritdoc IOracleSidechain\\n  function initializePoolInfo(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) external {\\n    if (!slot0.unlocked) revert AI();\\n\\n    (address _token0, address _token1) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\\n    if (poolSalt != keccak256(abi.encode(_token0, _token1, _fee))) revert InvalidPool();\\n\\n    token0 = _token0;\\n    token1 = _token1;\\n    fee = _fee;\\n    slot0.unlocked = false;\\n\\n    emit PoolInfoInitialized(poolSalt, _token0, _token1, _fee);\\n  }\\n\\n  /// @inheritdoc IOracleSidechain\\n  function observe(uint32[] calldata _secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory _tickCumulatives, uint160[] memory _secondsPerLiquidityCumulativeX128s)\\n  {\\n    return observations.observe(_getBlockTimestamp(), _secondsAgos, slot0.tick, slot0.observationIndex, 0, slot0.observationCardinality);\\n  }\\n\\n  /// @inheritdoc IOracleSidechain\\n  function write(ObservationData[] memory _observationsData, uint24 _poolNonce) external onlyDataReceiver returns (bool _written) {\\n    if (_poolNonce != poolNonce) return false;\\n    poolNonce++;\\n\\n    uint256 _observationsDataLength = _observationsData.length;\\n    for (uint256 _i; _i < _observationsDataLength; ) {\\n      _write(_observationsData[_i]);\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    slot0.sqrtPriceX96 = TickMath.getSqrtRatioAtTick(slot0.tick);\\n\\n    // emits UniV3 Swap event topic with minimal data\\n    emit Swap(address(0), address(0), 0, 0, slot0.sqrtPriceX96, 0, slot0.tick);\\n    return true;\\n  }\\n\\n  function increaseObservationCardinalityNext(uint16 _observationCardinalityNext) external onlyFactory {\\n    uint16 _observationCardinalityNextOld = slot0.observationCardinalityNext;\\n    if (_observationCardinalityNext <= _observationCardinalityNextOld) revert AI();\\n    slot0.observationCardinalityNext = _observationCardinalityNext;\\n    emit IncreaseObservationCardinalityNext(_observationCardinalityNextOld, _observationCardinalityNext);\\n  }\\n\\n  function _write(ObservationData memory _observationData) private {\\n    (uint16 _indexUpdated, uint16 _cardinalityUpdated) = observations.write(\\n      slot0.observationIndex,\\n      _observationData.blockTimestamp,\\n      slot0.tick,\\n      0,\\n      slot0.observationCardinality,\\n      slot0.observationCardinalityNext\\n    );\\n    (slot0.observationIndex, slot0.observationCardinality) = (_indexUpdated, _cardinalityUpdated);\\n    slot0.tick = _observationData.tick;\\n  }\\n\\n  modifier onlyDataReceiver() {\\n    if (msg.sender != address(factory.dataReceiver())) revert OnlyDataReceiver();\\n    _;\\n  }\\n\\n  modifier onlyFactory() {\\n    if (msg.sender != address(factory)) revert OnlyFactory();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x1b830dc6ad7405f2d533e1aa8eb079853edcdf301b396ac6b1d3c41573b62787\",\"license\":\"MIT\"},\"solidity/interfaces/IDataReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IGovernable} from '@defi-wonderland/solidity-utils/solidity/interfaces/IGovernable.sol';\\nimport {IOracleFactory} from './IOracleFactory.sol';\\nimport {IOracleSidechain} from './IOracleSidechain.sol';\\nimport {IBridgeReceiverAdapter} from './bridges/IBridgeReceiverAdapter.sol';\\n\\ninterface IDataReceiver is IGovernable {\\n  // STATE VARIABLES\\n\\n  /// @return _oracleFactory The address of the OracleFactory\\n  function oracleFactory() external view returns (IOracleFactory _oracleFactory);\\n\\n  /// @notice Tracks already deployed oracles\\n  /// @param _poolSalt The identifier of the oracle\\n  /// @return _deployedOracle The address of the correspondant Oracle\\n  function deployedOracles(bytes32 _poolSalt) external view returns (IOracleSidechain _deployedOracle);\\n\\n  /// @notice Tracks the whitelisting of bridge adapters\\n  /// @param _adapter Address of the bridge adapter to consult\\n  /// @return _isAllowed Whether a bridge adapter is whitelisted\\n  function whitelistedAdapters(IBridgeReceiverAdapter _adapter) external view returns (bool _isAllowed);\\n\\n  // EVENTS\\n\\n  /// @notice Emitted when a broadcast observation is succesfully processed\\n  /// @param _poolSalt Identifier of the pool to fetch\\n  /// @return _poolNonce Nonce of the observation broadcast\\n  /// @return _receiverAdapter Handler of the broadcast\\n  event ObservationsAdded(bytes32 indexed _poolSalt, uint24 _poolNonce, address _receiverAdapter);\\n\\n  /// @notice Emitted when a broadcast observation is cached for later processing\\n  /// @param _poolSalt Identifier of the pool to fetch\\n  /// @return _poolNonce Nonce of the observation broadcast\\n  /// @return _receiverAdapter Handler of the broadcast\\n  event ObservationsCached(bytes32 indexed _poolSalt, uint24 _poolNonce, address _receiverAdapter);\\n\\n  /// @notice Emitted when a new adapter whitelisting rule is set\\n  /// @param _adapter Address of the adapter\\n  /// @param _isAllowed New whitelisting status\\n  event AdapterWhitelisted(IBridgeReceiverAdapter _adapter, bool _isAllowed);\\n\\n  // ERRORS\\n\\n  /// @notice Thrown when the broadcast nonce is incorrect\\n  error ObservationsNotWritable();\\n\\n  /// @notice Thrown when a not-whitelisted adapter triggers an update\\n  error UnallowedAdapter();\\n\\n  // FUNCTIONS\\n\\n  /// @notice Allows whitelisted bridge adapters to push a broadcast\\n  /// @param _observationsData Array of tuples containing the dataset\\n  /// @param _poolSalt Identifier of the pool to fetch\\n  /// @param _poolNonce Nonce of the observation broadcast\\n  function addObservations(\\n    IOracleSidechain.ObservationData[] memory _observationsData,\\n    bytes32 _poolSalt,\\n    uint24 _poolNonce\\n  ) external;\\n\\n  /// @notice Allows any address to attempt to insert cached observations\\n  /// @param _poolSalt Identifier of the pool to fetch\\n  /// @param _maxObservations Maximum number of observations to process\\n  /// @dev Use _maxObservations = 0 to process all possible cached observations\\n  function syncObservations(bytes32 _poolSalt, uint256 _maxObservations) external;\\n\\n  /// @notice Allows governance to set an adapter whitelisted state\\n  /// @param _receiverAdapter Address of the adapter\\n  /// @param _isWhitelisted New whitelisting status\\n  function whitelistAdapter(IBridgeReceiverAdapter _receiverAdapter, bool _isWhitelisted) external;\\n\\n  /// @notice Allows governance to batch set adapters whitelisted state\\n  /// @param _receiverAdapters Array of addresses of the adapter\\n  /// @param _isWhitelisted Array of whitelisting status for each address\\n  function whitelistAdapters(IBridgeReceiverAdapter[] calldata _receiverAdapters, bool[] calldata _isWhitelisted) external;\\n}\\n\",\"keccak256\":\"0xd07e75380d5086ea78909bc5c80aadc110903004f50c006b0281cc090f273291\",\"license\":\"MIT\"},\"solidity/interfaces/IOracleFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IGovernable} from '@defi-wonderland/solidity-utils/solidity/interfaces/IGovernable.sol';\\nimport {IOracleSidechain} from './IOracleSidechain.sol';\\nimport {IDataReceiver} from './IDataReceiver.sol';\\n\\ninterface IOracleFactory is IGovernable {\\n  // STRUCTS\\n\\n  struct OracleParameters {\\n    bytes32 poolSalt; // Identifier of the pool and oracle\\n    uint24 poolNonce; // Initial nonce of the deployed pool\\n    uint16 cardinality; // Initial cardinality of the deployed pool\\n  }\\n\\n  // STATE VARIABLES\\n\\n  /// @return _oracleInitCodeHash The oracle creation code hash used to calculate their address\\n  //solhint-disable-next-line func-name-mixedcase\\n  function ORACLE_INIT_CODE_HASH() external view returns (bytes32 _oracleInitCodeHash);\\n\\n  /// @return _dataReceiver The address of the DataReceiver for the oracles to consult\\n  function dataReceiver() external view returns (IDataReceiver _dataReceiver);\\n\\n  /// @return _poolSalt The id of both the oracle and the pool\\n  /// @return _poolNonce The initial nonce of the pool data\\n  /// @return _cardinality The size of the observations memory storage\\n  function oracleParameters()\\n    external\\n    view\\n    returns (\\n      bytes32 _poolSalt,\\n      uint24 _poolNonce,\\n      uint16 _cardinality\\n    );\\n\\n  /// @return _initialCardinality The initial size of the observations memory storage for newly deployed pools\\n  function initialCardinality() external view returns (uint16 _initialCardinality);\\n\\n  // EVENTS\\n\\n  /// @notice Emitted when a new oracle is deployed\\n  /// @param _poolSalt The id of both the oracle and the pool\\n  /// @param _oracle The address of the deployed oracle\\n  /// @param _initialNonce The initial nonce of the pool data\\n  event OracleDeployed(bytes32 indexed _poolSalt, address indexed _oracle, uint24 _initialNonce);\\n\\n  /// @notice Emitted when a new DataReceiver is set\\n  /// @param _dataReceiver The address of the new DataReceiver\\n  event DataReceiverSet(IDataReceiver _dataReceiver);\\n\\n  /// @notice Emitted when a new initial oracle cardinality is set\\n  /// @param _initialCardinality The initial length of the observationCardinality array\\n  event InitialCardinalitySet(uint16 _initialCardinality);\\n\\n  // ERRORS\\n\\n  /// @notice Thrown when a contract other than the DataReceiver tries to deploy an oracle\\n  error OnlyDataReceiver();\\n\\n  // FUNCTIONS\\n\\n  /// @notice Deploys a new oracle given an inputted salt\\n  /// @dev Requires that the salt has not been deployed before\\n  /// @param _poolSalt Pool salt that deterministically binds an oracle with a pool\\n  /// @return _oracle The address of the newly deployed oracle\\n  function deployOracle(bytes32 _poolSalt, uint24 _poolNonce) external returns (IOracleSidechain _oracle);\\n\\n  /// @notice Allows governor to set a new allowed dataReceiver\\n  /// @dev Will disallow the previous dataReceiver\\n  /// @param _dataReceiver The address of the new allowed dataReceiver\\n  function setDataReceiver(IDataReceiver _dataReceiver) external;\\n\\n  /// @notice Allows governor to set a new initial cardinality for new oracles\\n  /// @param _initialCardinality The initial size of the observations memory storage for newly deployed pools\\n  function setInitialCardinality(uint16 _initialCardinality) external;\\n\\n  /// @notice Overrides UniV3Factory getPool mapping\\n  /// @param _tokenA The contract address of either token0 or token1\\n  /// @param _tokenB The contract address of the other token\\n  /// @param _fee The fee denominated in hundredths of a bip\\n  /// @return _oracle The oracle address\\n  function getPool(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) external view returns (IOracleSidechain _oracle);\\n\\n  /// @notice Tracks the addresses of the oracle by poolSalt\\n  /// @param _poolSalt Identifier of both the pool and the oracle\\n  /// @return _oracle The address (if deployed) of the correspondant oracle\\n  function getPool(bytes32 _poolSalt) external view returns (IOracleSidechain _oracle);\\n\\n  /// @param _tokenA The contract address of either token0 or token1\\n  /// @param _tokenB The contract address of the other token\\n  /// @param _fee The fee denominated in hundredths of a bip\\n  /// @return _poolSalt Pool salt for inquired parameters\\n  function getPoolSalt(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) external view returns (bytes32 _poolSalt);\\n}\\n\",\"keccak256\":\"0xc32bfc32a274923ce1a089acc024396e702ae354773f0ac0a683e43ded904954\",\"license\":\"MIT\"},\"solidity/interfaces/IOracleSidechain.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleFactory} from './IOracleFactory.sol';\\n\\ninterface IOracleSidechain {\\n  // STRUCTS\\n\\n  struct ObservationData {\\n    uint32 blockTimestamp;\\n    int24 tick;\\n  }\\n\\n  // STATE VARIABLES\\n\\n  /// @return _oracleFactory The address of the OracleFactory\\n  function factory() external view returns (IOracleFactory _oracleFactory);\\n\\n  /// @return _token0 The mainnet address of the Token0 of the oracle\\n  function token0() external view returns (address _token0);\\n\\n  /// @return _token1 The mainnet address of the Token1 of the oracle\\n  function token1() external view returns (address _token1);\\n\\n  /// @return _fee The fee identifier of the pool\\n  function fee() external view returns (uint24 _fee);\\n\\n  /// @return _poolSalt The identifier of both the pool and the oracle\\n  function poolSalt() external view returns (bytes32 _poolSalt);\\n\\n  /// @return _poolNonce Last recorded nonce of the pool history\\n  function poolNonce() external view returns (uint24 _poolNonce);\\n\\n  /// @notice Replicates the UniV3Pool slot0 behaviour (semi-compatible)\\n  /// @return _sqrtPriceX96 Used to maintain compatibility with Uniswap V3\\n  /// @return _tick Used to maintain compatibility with Uniswap V3\\n  /// @return _observationIndex The index of the last oracle observation that was written,\\n  /// @return _observationCardinality The current maximum number of observations stored in the pool,\\n  /// @return _observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n  /// @return _feeProtocol Used to maintain compatibility with Uniswap V3\\n  /// @return _unlocked Used to track if a pool information was already verified\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint160 _sqrtPriceX96,\\n      int24 _tick,\\n      uint16 _observationIndex,\\n      uint16 _observationCardinality,\\n      uint16 _observationCardinalityNext,\\n      uint8 _feeProtocol,\\n      bool _unlocked\\n    );\\n\\n  /// @notice Returns data about a specific observation index\\n  /// @param _index The element of the observations array to fetch\\n  /// @return _blockTimestamp The timestamp of the observation,\\n  /// @return _tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n  /// @return _secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n  /// @return _initialized whether the observation has been initialized and the values are safe to use\\n  function observations(uint256 _index)\\n    external\\n    view\\n    returns (\\n      uint32 _blockTimestamp,\\n      int56 _tickCumulative,\\n      uint160 _secondsPerLiquidityCumulativeX128,\\n      bool _initialized\\n    );\\n\\n  // EVENTS\\n\\n  /// @notice Emitted when the pool information is verified\\n  /// @param _poolSalt Identifier of the pool and the oracle\\n  /// @param _token0 The contract address of either token0 or token1\\n  /// @param _token1 The contract address of the other token\\n  /// @param _fee The fee denominated in hundredths of a bip\\n  event PoolInfoInitialized(bytes32 indexed _poolSalt, address _token0, address _token1, uint24 _fee);\\n\\n  /// @notice Emitted by the oracle to hint indexers that the pool state has changed\\n  /// @dev Imported from IUniswapV3PoolEvents (semi-compatible)\\n  /// @param _sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n  /// @param _tick The log base 1.0001 of price of the pool after the swap\\n  event Swap(address indexed, address indexed, int256, int256, uint160 _sqrtPriceX96, uint128, int24 _tick);\\n\\n  /// @notice Emitted by the oracle for increases to the number of observations that can be stored\\n  /// @dev Imported from IUniswapV3PoolEvents (fully-compatible)\\n  /// @param _observationCardinalityNextOld The previous value of the next observation cardinality\\n  /// @param _observationCardinalityNextNew The updated value of the next observation cardinality\\n  event IncreaseObservationCardinalityNext(uint16 _observationCardinalityNextOld, uint16 _observationCardinalityNextNew);\\n\\n  // ERRORS\\n\\n  /// @notice Thrown if the pool info is already initialized or if the observationCardinalityNext is already increased\\n  error AI();\\n\\n  /// @notice Thrown if the pool info does not correspond to the pool salt\\n  error InvalidPool();\\n\\n  /// @notice Thrown if the DataReceiver contract is not the one calling for writing observations\\n  error OnlyDataReceiver();\\n\\n  /// @notice Thrown if the OracleFactory contract is not the one calling for increasing observationCardinalityNext\\n  error OnlyFactory();\\n\\n  // FUNCTIONS\\n\\n  /// @notice Permisionless method to verify token0, token1 and fee\\n  /// @dev Before verified, token0 and token1 views will return address(0)\\n  /// @param _tokenA The contract address of either token0 or token1\\n  /// @param _tokenB The contract address of the other token\\n  /// @param _fee The fee denominated in hundredths of a bip\\n  function initializePoolInfo(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) external;\\n\\n  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n  /// @dev Imported from UniV3Pool (semi compatible, optimistically extrapolates)\\n  /// @param _secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n  /// @return _tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n  /// @return _secondsCumulativeX128s Cumulative seconds as of each `secondsAgos` from the current block timestamp\\n  function observe(uint32[] calldata _secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory _tickCumulatives, uint160[] memory _secondsCumulativeX128s);\\n\\n  /// @notice Permisioned method to push a dataset to update\\n  /// @param _observationsData Array of tuples containing the dataset\\n  /// @param _poolNonce Nonce of the observation broadcast\\n  function write(ObservationData[] memory _observationsData, uint24 _poolNonce) external returns (bool _written);\\n\\n  /// @notice Permisioned method to increase the cardinalityNext value\\n  /// @param _observationCardinalityNext The new next length of the observations array\\n  function increaseObservationCardinalityNext(uint16 _observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0xa90206e3de00ad866b7f4792ce29220ee0ca561d59629ba638a31c4d6fd3941b\",\"license\":\"MIT\"},\"solidity/interfaces/bridges/IBridgeReceiverAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IBaseErrors} from '@defi-wonderland/solidity-utils/solidity/interfaces/IBaseErrors.sol';\\nimport {IDataReceiver} from '../IDataReceiver.sol';\\nimport {IOracleSidechain} from '../IOracleSidechain.sol';\\n\\ninterface IBridgeReceiverAdapter is IBaseErrors {\\n  // STATE VARIABLES\\n\\n  /// @notice Gets the address of the DataReceiver contract\\n  /// @return _dataReceiver Address of the DataReceiver contract\\n  function dataReceiver() external view returns (IDataReceiver _dataReceiver);\\n\\n  /* NOTE: callback methods should be here declared */\\n}\\n\",\"keccak256\":\"0x49e5c9c6a28521933a3f2b01a529fbae9aac1edd71dbe904586a2f06148b1974\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526005805461ffff1916609017905534801561001e57600080fd5b5060405161278638038061278683398101604081905261003d91610128565b816001600160a01b0381166100655760405163d92e233d60e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b039290921691909117905561008e81610095565b5050610162565b6001600160a01b0381166100bc5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f23ab7a40fedc3062f72fa590994df2ec8e49b54309a22df0ad3790dbc56346be9060200160405180910390a150565b6001600160a01b038116811461012557600080fd5b50565b6000806040838503121561013b57600080fd5b825161014681610110565b602084015190925061015781610110565b809150509250929050565b612615806101716000396000f3fe60806040523480156200001157600080fd5b5060043610620001095760003560e01c806391a0b97911620000a3578063e8047788116200006e578063e80477881462000247578063ebaa56aa146200025b578063f235757f146200027e578063f6c00927146200029557600080fd5b806391a0b97914620001cd57806397862d6d14620001d757806399df712014620001ee578063e3056a34146200023357600080fd5b80631698ee8211620000e45780631698ee8214620001625780633c1a17ff14620001795780635cc1fd36146200019f57806384b6db1414620001b657600080fd5b806307d5851a146200010e5780630c340a24146200012757806313f6986d1462000158575b600080fd5b620001256200011f36600462000892565b620002ac565b005b6000546200013b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b62000125620002e6565b6200013b62000173366004620008cd565b6200031e565b620001906200018a366004620008cd565b62000344565b6040519081526020016200014f565b6200013b620001b03660046200091b565b620003bf565b62000125620001c73660046200095d565b620004c8565b6200019062000568565b62000125620001e836600462000983565b62000597565b6003546004546200020f919062ffffff8116906301000000900461ffff1683565b6040805193845262ffffff909216602084015261ffff16908201526060016200014f565b6001546200013b906001600160a01b031681565b6002546200013b906001600160a01b031681565b6005546200026a9061ffff1681565b60405161ffff90911681526020016200014f565b620001256200028f36600462000892565b62000634565b6200013b620002a6366004620009a1565b6200066b565b6000546001600160a01b03163314620002d85760405163070545c960e51b815260040160405180910390fd5b620002e38162000714565b50565b6001546001600160a01b031633146200031257604051639ba0305d60e01b815260040160405180910390fd5b6200031c6200078b565b565b6000806200032e85858562000344565b90506200033b816200066b565b95945050505050565b6000806000846001600160a01b0316866001600160a01b0316106200036b5784866200036e565b85855b604080516001600160a01b03808516602083015283169181019190915262ffffff87166060820152919350915060800160405160208183030381529060405280519060200120925050509392505050565b6002546000906001600160a01b03163314620003ee57604051638e5b30cb60e01b815260040160405180910390fd5b6040805160608101825284815262ffffff84166020820181905260055461ffff1691830182905260038690556004805464ffffffffff1916909117630100000090920291909117905551839062000445906200086e565b8190604051809103906000f590508015801562000466573d6000803e3d6000fd5b5060006003556004805464ffffffffff1916905560405162ffffff841681529091506001600160a01b0382169084907f5b7d803564bd9c17d971ee338d1e9ffafd2aa0a8dbd7065f9d3900ecf7a842149060200160405180910390a392915050565b6000546001600160a01b03163314620004f45760405163070545c960e51b815260040160405180910390fd5b600062000501836200066b565b6040516332148f6760e01b815261ffff841660048201529091506001600160a01b038216906332148f6790602401600060405180830381600087803b1580156200054a57600080fd5b505af11580156200055f573d6000803e3d6000fd5b50505050505050565b60405162000579602082016200086e565b6020820181038252601f19601f820116604052508051906020012081565b6000546001600160a01b03163314620005c35760405163070545c960e51b815260040160405180910390fd5b8061ffff16600003620005e957604051631f2a200560e01b815260040160405180910390fd5b6005805461ffff191661ffff83169081179091556040519081527fec9fa937c26cb048aac5fc5992eaace52f38cd13c8da22f42630090bd258261f906020015b60405180910390a150565b6000546001600160a01b03163314620006605760405163070545c960e51b815260040160405180910390fd5b620002e381620007e9565b6000620006f230836040518060200162000685906200086e565b601f1982820381018352601f90910116604081815282516020938401206001600160f81b03198385015260609590951b6bffffffffffffffffffffffff19166021830152603582019390935260558082019490945282518082039094018452607501909152815191012090565b9050806001600160a01b03163b6000036200070f57506000919050565b919050565b6001600160a01b0381166200073c5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f23ab7a40fedc3062f72fa590994df2ec8e49b54309a22df0ad3790dbc56346be9060200162000629565b60018054600080546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527f5d5d6e01b731c3e68060f7fe13156f6197d4aeffc2d6f498e34c717ae616b7349060200160405180910390a1565b6001600160a01b038116620008115760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b038381169182179092556000546040805191909316815260208101919091527f6353ec38ac394f8be94bfafcdd3580d356470599059eaeebedc3207e1cc03dec910162000629565b611c2480620009bc83390190565b6001600160a01b0381168114620002e357600080fd5b600060208284031215620008a557600080fd5b8135620008b2816200087c565b9392505050565b803562ffffff811681146200070f57600080fd5b600080600060608486031215620008e357600080fd5b8335620008f0816200087c565b9250602084013562000902816200087c565b91506200091260408501620008b9565b90509250925092565b600080604083850312156200092f57600080fd5b823591506200094160208401620008b9565b90509250929050565b803561ffff811681146200070f57600080fd5b600080604083850312156200097157600080fd5b8235915062000941602084016200094a565b6000602082840312156200099657600080fd5b620008b2826200094a565b600060208284031215620009b457600080fd5b503591905056fe60c06040523480156200001157600080fd5b50336080819052604080516304cefb8960e51b81529051600092916399df71209160048083019260609291908290030181865afa15801562000057573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200007d9190620001bb565b62010000805462ffffff191662ffffff939093169290921790915560a0919091526040805160e081018252600080825260208201529192508101620000c460018462000210565b61ffff90811682529283166020808301829052604080840192909252600060608085018290526001608095860152855182549387015194870151918701519587015160a088015160c0909801511515600160f01b0260ff60f01b1960ff99909916600160e81b0260ff60e81b19928b16600160d81b029290921662ffffff60d81b19988b16600160c81b0261ffff60c81b1995909b16600160b81b029490941663ffffffff60b81b1962ffffff909816600160a01b026001600160b81b03199097166001600160a01b0390941693909317959095179590951617969096179390931694909417179190911691909117905562000242565b600080600060608486031215620001d157600080fd5b83519250602084015162ffffff81168114620001ec57600080fd5b604085015190925061ffff811681146200020557600080fd5b809150509250925092565b600061ffff838116908316818110156200023a57634e487b7160e01b600052601160045260246000fd5b039392505050565b60805160a0516119a0620002846000396000818161027a01528181610694015261074b0152600081816102af01528181610302015261052b01526119a06000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063883bdbfd11610071578063883bdbfd1461022f5780639fdbd4d714610250578063c1c9115a14610275578063c45a0155146102aa578063d21220a7146102d1578063ddca3f43146102e657600080fd5b80630dfe1681146100b957806323e512d4146100f2578063252c09d71461011557806332148f67146101625780633453952f146101775780633850c7bd1461018a575b600080fd5b62010000546100d590630100000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610105610100366004611658565b6102fe565b60405190151581526020016100e9565b610128610123366004611759565b6104db565b6040805163ffffffff909516855260069390930b60208501526001600160a01b0390911691830191909152151560608201526080016100e9565b610175610170366004611772565b610520565b005b6101756101853660046117ae565b6105fc565b6000546101de906001600160a01b03811690600160a01b810460020b9061ffff600160b81b8204811691600160c81b8104821691600160d81b8204169060ff600160e81b8204811691600160f01b90041687565b604080516001600160a01b03909816885260029690960b602088015261ffff94851695870195909552918316606086015291909116608084015260ff1660a0830152151560c082015260e0016100e9565b61024261023d3660046117f5565b61079f565b6040516100e992919061186a565b62010000546102619062ffffff1681565b60405162ffffff90911681526020016100e9565b61029c7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100e9565b6100d57f000000000000000000000000000000000000000000000000000000000000000081565b62010001546100d5906001600160a01b031681565b620100015461026190600160a01b900462ffffff1681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e80477886040518163ffffffff1660e01b8152600401602060405180830381865afa15801561035e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038291906118f1565b6001600160a01b0316336001600160a01b0316146103b357604051638e5b30cb60e01b815260040160405180910390fd5b620100005462ffffff8381169116146103ce575060006104d5565b62010000805462ffffff169060006103e58361190e565b91906101000a81548162ffffff021916908362ffffff1602179055505060008351905060005b8181101561043d576104358582815181106104285761042861193e565b6020026020010151610810565b60010161040b565b5060005461045490600160a01b900460020b6108b0565b600080546001600160a01b0319166001600160a01b039290921691821780825560408051838152602081018490529081019390935260608301829052600160a01b900460020b60808301529081907fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca679060a00160405180910390a360019150505b92915050565b60018161ffff81106104ec57600080fd5b015463ffffffff81169150600160201b810460060b90600160581b81046001600160a01b031690600160f81b900460ff1684565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461056957604051630636a15760e11b815260040160405180910390fd5b60005461ffff600160d81b9091048116908216811061059b5760405163139816ff60e31b815260040160405180910390fd5b6000805461ffff60d81b1916600160d81b61ffff8581169182029290921790925560408051918416825260208201929092527fac49e518f90a358f652e4400164f05a5d8f7e35e7747279bc3a93dbf584e125a910160405180910390a15050565b600054600160f01b900460ff166106265760405163139816ff60e31b815260040160405180910390fd5b600080836001600160a01b0316856001600160a01b03161061064957838561064c565b84845b604080516001600160a01b03808516602083015283169181019190915262ffffff861660608201529193509150608001604051602081830303815290604052805190602001207f0000000000000000000000000000000000000000000000000000000000000000146106d05760405162820f3560e61b815260040160405180910390fd5b6201000080546301000000600160b81b03191663010000006001600160a01b03858116918202929092179092556201000180549184166001600160b81b03199092168217600160a01b62ffffff8816908102919091179091556000805460ff60f01b19169055604080519384526020840192909252908201527f0000000000000000000000000000000000000000000000000000000000000000907fb50ab96cf9f83d6c076a0d2a6e27a65bf1242920ba414829aa618d57d4a263739060600160405180910390a25050505050565b6060806108054285858080602002602001604051908101604052809392919081815260200183836020028082843760009201829052508054600196959450600160a01b810460020b935061ffff600160b81b820481169350600160c81b90910416610bd2565b915091509250929050565b60008054825182916108529160019161ffff600160b81b820481169291600160a01b810460020b918791600160c81b8104821691600160d81b90910416610d1d565b600080546020969096015163ffffffff60b81b19909616600160c81b61ffff9384160261ffff60b81b191617600160b81b93909216929092021762ffffff60a01b1916600160a01b62ffffff90951694909402939093179092555050565b60008060008360020b126108c7578260020b6108cf565b8260020b6000035b9050620d89e88111156108f5576040516315e4079d60e11b815260040160405180910390fd5b60008160011660000361090c57600160801b61091e565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610952576ffff97272373d413259a46990580e213a0260801c5b6004821615610971576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610990576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156109af576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156109ce576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156109ed576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610a0c576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610a2c576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610a4c576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610a6c576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610a8c576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610aac576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610acc576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610aec576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610b0c576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610b2d576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610b4d576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610b6c576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610b89576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610baa578060001981610ba657610ba6611954565b0490505b600160201b810615610bbd576001610bc0565b60005b60ff16602082901c0192505050919050565b60608060008361ffff1611610bfa57604051636b93000360e11b815260040160405180910390fd5b865167ffffffffffffffff811115610c1457610c146115d0565b604051908082528060200260200182016040528015610c3d578160200160208202803683370190505b509150865167ffffffffffffffff811115610c5a57610c5a6115d0565b604051908082528060200260200182016040528015610c83578160200160208202803683370190505b50905060005b8751811015610d1057610cba8a8a8a8481518110610ca957610ca961193e565b60200260200101518a8a8a8a610ea5565b848381518110610ccc57610ccc61193e565b60200260200101848481518110610ce557610ce561193e565b6001600160a01b039093166020938402919091019092019190915260069190910b9052600101610c89565b5097509795505050505050565b6000806000898961ffff1661ffff8110610d3957610d3961193e565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff161515606083015290925089169003610da25788859250925050610e99565b8461ffff168461ffff16118015610dc357506001850361ffff168961ffff16145b15610dd057839150610dd4565b8491505b8161ffff168960010161ffff1681610dee57610dee611954565b069250610dfd81898989611054565b8a8461ffff1661ffff8110610e1457610e1461193e565b825191018054602084015160408501516060909501511515600160f81b026001600160f81b036001600160a01b03909616600160581b02959095166affffffffffffffffffffff66ffffffffffffff909216600160201b026affffffffffffffffffffff1990931663ffffffff90951694909417919091171691909117919091179055505b97509795505050505050565b6000808663ffffffff16600003610f4e576000898661ffff1661ffff8110610ecf57610ecf61193e565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff16151560608301529092508a1614610f3a57610f37818a8988611054565b90505b806020015181604001519250925050610e99565b868803600080610f638c8c858c8c8c8c611119565b91509150816000015163ffffffff168363ffffffff1603610f94578160200151826040015194509450505050610e99565b806000015163ffffffff168363ffffffff1603610fc1578060200151816040015194509450505050610e99565b60008260000151826000015103905060008360000151850390508063ffffffff168263ffffffff1660060b856020015185602001510360060b8161100757611007611954565b05028460200151018263ffffffff168263ffffffff1686604001518660400151036001600160a01b0316028161103f5761103f611954565b04856040015101965096505050505050610e99565b604080516080810182526000808252602082018190529181018290526060810191909152600085600001518503905060405180608001604052808663ffffffff1681526020018263ffffffff168660020b0288602001510160060b81526020016000856001600160801b0316116110cc5760016110ce565b845b6001600160801b031663ffffffff60801b608085901b16816110f2576110f2611954565b048860400151016001600160a01b0316815260200160011515815250915050949350505050565b604080516080810182526000808252602082018190529181018290526060810191909152604080516080810182526000808252602082018190529181018290526060810191909152888561ffff1661ffff81106111785761117861193e565b60408051608081018252919092015463ffffffff8116808352600160201b820460060b6020840152600160581b82046001600160a01b031693830193909352600160f81b900460ff161515606082015292506111d690899089611325565b1561120257815163ffffffff888116911614610e9957816111f983898988611054565b91509150610e99565b888361ffff168660010161ffff168161121d5761121d611954565b0661ffff1661ffff81106112335761123361193e565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b909104161515606082018190529092506112dc57604080516080810182528a5463ffffffff81168252600160201b810460060b6020830152600160581b81046001600160a01b031692820192909252600160f81b90910460ff161515606082015291505b6112eb88836000015189611325565b611308576040516327e8e87560e01b815260040160405180910390fd5b61131589898988876113e8565b9150915097509795505050505050565b60008363ffffffff168363ffffffff161115801561134f57508363ffffffff168263ffffffff1611155b1561136b578163ffffffff168363ffffffff16111590506113e1565b60008463ffffffff168463ffffffff1611611392578363ffffffff16600160201b0161139a565b8363ffffffff165b64ffffffffff16905060008563ffffffff168463ffffffff16116113ca578363ffffffff16600160201b016113d2565b8363ffffffff165b64ffffffffff16909111159150505b9392505050565b60408051608081018252600080825260208201819052918101829052606081019190915260408051608081018252600080825260208201819052918101829052606081019190915260008361ffff168560010161ffff168161144c5761144c611954565b0661ffff169050600060018561ffff16830103905060005b506002818301048961ffff8716828161147f5761147f611954565b0661ffff81106114915761149161193e565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b909104161515606082018190529095506114f557806001019250611464565b898661ffff16826001018161150c5761150c611954565b0661ffff811061151e5761151e61193e565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201528551909450600090611582908b908b611325565b905080801561159b575061159b8a8a8760000151611325565b156115a657506115c3565b806115b6576001820392506115bd565b8160010193505b50611464565b5050509550959350505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611609576116096115d0565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611638576116386115d0565b604052919050565b803562ffffff8116811461165357600080fd5b919050565b600080604080848603121561166c57600080fd5b833567ffffffffffffffff8082111561168457600080fd5b818601915086601f83011261169857600080fd5b81356020828211156116ac576116ac6115d0565b6116ba818360051b0161160f565b828152818101935060069290921b8401810191898311156116da57600080fd5b938101935b8285101561173e5785858b0312156116f75760008081fd5b6116ff6115e6565b853563ffffffff811681146117145760008081fd5b815285830135600281900b811461172b5760008081fd5b81840152845293850193928101926116df565b965061174b888201611640565b955050505050509250929050565b60006020828403121561176b57600080fd5b5035919050565b60006020828403121561178457600080fd5b813561ffff811681146113e157600080fd5b6001600160a01b03811681146117ab57600080fd5b50565b6000806000606084860312156117c357600080fd5b83356117ce81611796565b925060208401356117de81611796565b91506117ec60408501611640565b90509250925092565b6000806020838503121561180857600080fd5b823567ffffffffffffffff8082111561182057600080fd5b818501915085601f83011261183457600080fd5b81358181111561184357600080fd5b8660208260051b850101111561185857600080fd5b60209290920196919550909350505050565b604080825283519082018190526000906020906060840190828701845b828110156118a657815160060b84529284019290840190600101611887565b5050508381038285015284518082528583019183019060005b818110156118e45783516001600160a01b0316835292840192918401916001016118bf565b5090979650505050505050565b60006020828403121561190357600080fd5b81516113e181611796565b600062ffffff80831681810361193457634e487b7160e01b600052601160045260246000fd5b6001019392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fdfea264697066735822122048903427db1b98c0cd97b26ab800e55a51c8b5b98cd5a363f22490c0ac241d1b64736f6c634300080f0033a2646970667358221220c1e84aa1e8d7c1251c18a95b48835b3934b1d40ccda3e8d1ccc7bd7d096c898964736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deployOracle(bytes32,uint24)": {
        "details": "Requires that the salt has not been deployed before",
        "params": {
          "_poolSalt": "Pool salt that deterministically binds an oracle with a pool"
        },
        "returns": {
          "_oracle": "The address of the newly deployed oracle"
        }
      },
      "getPool(address,address,uint24)": {
        "params": {
          "_fee": "The fee denominated in hundredths of a bip",
          "_tokenA": "The contract address of either token0 or token1",
          "_tokenB": "The contract address of the other token"
        },
        "returns": {
          "_oracle": "The oracle address"
        }
      },
      "getPool(bytes32)": {
        "params": {
          "_poolSalt": "Identifier of both the pool and the oracle"
        },
        "returns": {
          "_oracle": "The address (if deployed) of the correspondant oracle"
        }
      },
      "getPoolSalt(address,address,uint24)": {
        "params": {
          "_fee": "The fee denominated in hundredths of a bip",
          "_tokenA": "The contract address of either token0 or token1",
          "_tokenB": "The contract address of the other token"
        },
        "returns": {
          "_poolSalt": "Pool salt for inquired parameters"
        }
      },
      "setDataReceiver(address)": {
        "details": "Will disallow the previous dataReceiver",
        "params": {
          "_dataReceiver": "The address of the new allowed dataReceiver"
        }
      },
      "setInitialCardinality(uint16)": {
        "params": {
          "_initialCardinality": "The initial size of the observations memory storage for newly deployed pools"
        }
      },
      "setPendingGovernor(address)": {
        "params": {
          "_pendingGovernor": "Address of the proposed new governor"
        }
      }
    },
    "stateVariables": {
      "ORACLE_INIT_CODE_HASH": {
        "return": "The oracle creation code hash used to calculate their address",
        "returns": {
          "_0": "The oracle creation code hash used to calculate their address"
        }
      },
      "dataReceiver": {
        "return": "The address of the DataReceiver for the oracles to consult",
        "returns": {
          "_0": "The address of the DataReceiver for the oracles to consult"
        }
      },
      "initialCardinality": {
        "return": "The initial size of the observations memory storage for newly deployed pools",
        "returns": {
          "_0": "The initial size of the observations memory storage for newly deployed pools"
        }
      },
      "oracleParameters": {
        "returns": {
          "cardinality": "The size of the observations memory storage",
          "poolNonce": "The initial nonce of the pool data",
          "poolSalt": "The id of both the oracle and the pool"
        }
      }
    },
    "title": "The OracleFactory contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidAddress()": [
        {
          "notice": "Thrown if an address is invalid"
        }
      ],
      "InvalidAmount()": [
        {
          "notice": "Thrown if an amount is invalid"
        }
      ],
      "LengthMismatch()": [
        {
          "notice": "Thrown if the lengths of a set of lists mismatch"
        }
      ],
      "OnlyDataReceiver()": [
        {
          "notice": "Thrown when a contract other than the DataReceiver tries to deploy an oracle"
        }
      ],
      "OnlyGovernor()": [
        {
          "notice": "Thrown if a non-governor user tries to call a OnlyGovernor function"
        }
      ],
      "OnlyPendingGovernor()": [
        {
          "notice": "Thrown if a non-pending-governor user tries to call a OnlyPendingGovernor function"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Thrown if an address is the zero address"
        }
      ],
      "ZeroAmount()": [
        {
          "notice": "Thrown if an amount is zero"
        }
      ]
    },
    "events": {
      "DataReceiverSet(address)": {
        "notice": "Emitted when a new DataReceiver is set"
      },
      "InitialCardinalitySet(uint16)": {
        "notice": "Emitted when a new initial oracle cardinality is set"
      },
      "OracleDeployed(bytes32,address,uint24)": {
        "notice": "Emitted when a new oracle is deployed"
      },
      "PendingGovernorAccepted(address)": {
        "notice": "Emitted when a new governor is set"
      },
      "PendingGovernorSet(address,address)": {
        "notice": "Emitted when a new pending governor is set"
      }
    },
    "kind": "user",
    "methods": {
      "acceptPendingGovernor()": {
        "notice": "Allows a proposed governor to accept the governance"
      },
      "deployOracle(bytes32,uint24)": {
        "notice": "Deploys a new oracle given an inputted salt"
      },
      "getPool(address,address,uint24)": {
        "notice": "Overrides UniV3Factory getPool mapping"
      },
      "getPool(bytes32)": {
        "notice": "Tracks the addresses of the oracle by poolSalt"
      },
      "setDataReceiver(address)": {
        "notice": "Allows governor to set a new allowed dataReceiver"
      },
      "setInitialCardinality(uint16)": {
        "notice": "Allows governor to set a new initial cardinality for new oracles"
      },
      "setPendingGovernor(address)": {
        "notice": "Allows a governor to propose a new governor"
      }
    },
    "notice": "Handles the deployment of new OracleSidechains",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8014,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8017,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15437,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "dataReceiver",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDataReceiver)18039"
      },
      {
        "astId": 15441,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "oracleParameters",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(OracleParameters)18056_storage"
      },
      {
        "astId": 15445,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "initialCardinality",
        "offset": 0,
        "slot": "5",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDataReceiver)18039": {
        "encoding": "inplace",
        "label": "contract IDataReceiver",
        "numberOfBytes": "20"
      },
      "t_struct(OracleParameters)18056_storage": {
        "encoding": "inplace",
        "label": "struct IOracleFactory.OracleParameters",
        "members": [
          {
            "astId": 18051,
            "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
            "label": "poolSalt",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 18053,
            "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
            "label": "poolNonce",
            "offset": 0,
            "slot": "1",
            "type": "t_uint24"
          },
          {
            "astId": 18055,
            "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
            "label": "cardinality",
            "offset": 3,
            "slot": "1",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      }
    }
  }
}