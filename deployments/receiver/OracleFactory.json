{
  "address": "0x3EE6f90Abb8Af28fA0084Ee55d82b3808A1d03a7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "contract IDataReceiver",
          "name": "_dataReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NoGovernanceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDataReceiver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPendingGovernance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IDataReceiver",
          "name": "_dataReceiver",
          "type": "address"
        }
      ],
      "name": "DataReceiverSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pendingGovernance",
          "type": "address"
        }
      ],
      "name": "GovernanceProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "GovernanceSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_initialCardinality",
          "type": "uint16"
        }
      ],
      "name": "InitialCardinalitySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "_fee",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_cardinality",
          "type": "uint16"
        }
      ],
      "name": "OracleDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataReceiver",
      "outputs": [
        {
          "internalType": "contract IDataReceiver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_fee",
          "type": "uint24"
        }
      ],
      "name": "deployOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "_deployedOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialCardinality",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleParameters",
      "outputs": [
        {
          "internalType": "contract IOracleFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "uint16",
          "name": "cardinality",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDataReceiver",
          "name": "_dataReceiver",
          "type": "address"
        }
      ],
      "name": "setDataReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_initialCardinality",
          "type": "uint16"
        }
      ],
      "name": "setInitialCardinality",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x903b7aecb068fafa26045cdd634b446cc1949bd3f8dd15396bbb6e9bdcc8246b",
  "receipt": {
    "to": null,
    "from": "0x57B067e4E27558FE2c60fCE86941011cB5F5A4FD",
    "contractAddress": "0x3EE6f90Abb8Af28fA0084Ee55d82b3808A1d03a7",
    "transactionIndex": 8,
    "gasUsed": "1645478",
    "logsBloom": "0x
    "blockHash": "0x24cf0adcda50cfd588dbc0dda1bc9251dafad8a836b3f4fe30b69e925218b672",
    "transactionHash": "0x903b7aecb068fafa26045cdd634b446cc1949bd3f8dd15396bbb6e9bdcc8246b",
    "logs": [],
    "blockNumber": 7276299,
    "cumulativeGasUsed": "2105103",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x57B067e4E27558FE2c60fCE86941011cB5F5A4FD",
    "0x459D8201ADb265B83D1AAB0e1dbF4B2943D09644"
  ],
  "numDeployments": 1,
  "solcInputHash": "d9c8f4a75f1081f77b146589b1a5d995",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"contract IDataReceiver\",\"name\":\"_dataReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NoGovernanceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDataReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPendingGovernance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IDataReceiver\",\"name\":\"_dataReceiver\",\"type\":\"address\"}],\"name\":\"DataReceiverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"GovernanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_initialCardinality\",\"type\":\"uint16\"}],\"name\":\"InitialCardinalitySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_cardinality\",\"type\":\"uint16\"}],\"name\":\"OracleDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataReceiver\",\"outputs\":[{\"internalType\":\"contract IDataReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"deployOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_deployedOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialCardinality\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleParameters\",\"outputs\":[{\"internalType\":\"contract IOracleFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"cardinality\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDataReceiver\",\"name\":\"_dataReceiver\",\"type\":\"address\"}],\"name\":\"setDataReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_initialCardinality\",\"type\":\"uint16\"}],\"name\":\"setInitialCardinality\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setGovernance(address)\":{\"params\":{\"_governance\":\"The address being proposed as the new governance\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"NoGovernanceZeroAddress()\":[{\"notice\":\"Throws if trying to set governance to zero address\"}],\"OnlyGovernance()\":[{\"notice\":\"Throws if the caller of the function is not governance\"}],\"OnlyPendingGovernance()\":[{\"notice\":\"Throws if the caller of the function is not pendingGovernance\"}]},\"events\":{\"GovernanceProposal(address)\":{\"notice\":\"Emitted when a new governance is proposed\"},\"GovernanceSet(address)\":{\"notice\":\"Emitted when pendingGovernance accepts to be governance\"}},\"kind\":\"user\",\"methods\":{\"acceptGovernance()\":{\"notice\":\"Changes the governance from the current governance to the previously proposed address\"},\"governance()\":{\"notice\":\"Stores the governance address\"},\"pendingGovernance()\":{\"notice\":\"Stores the pendingGovernance address\"},\"setGovernance(address)\":{\"notice\":\"Proposes a new address to be governance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/OracleFactory.sol\":\"OracleFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/// @title Oracle\\n/// @notice Provides price and liquidity data useful for a wide variety of system designs\\n/// @dev Instances of stored oracle data, \\\"observations\\\", are collected in the oracle array\\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\\n/// Observations are overwritten when the full length of the oracle array is populated.\\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\\nlibrary Oracle {\\n    error I();\\n    error OLD();\\n\\n    struct Observation {\\n        // the block timestamp of the observation\\n        uint32 blockTimestamp;\\n        // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\\n        int56 tickCumulative;\\n        // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        // whether or not the observation is initialized\\n        bool initialized;\\n    }\\n\\n    /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values\\n    /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\\n    /// @param last The specified observation to be transformed\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @return Observation The newly populated observation\\n    function transform(\\n        Observation memory last,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity\\n    ) private pure returns (Observation memory) {\\n        unchecked {\\n            uint32 delta = blockTimestamp - last.blockTimestamp;\\n            return\\n                Observation({\\n                    blockTimestamp: blockTimestamp,\\n                    tickCumulative: last.tickCumulative + int56(tick) * int56(uint56(delta)),\\n                    secondsPerLiquidityCumulativeX128: last.secondsPerLiquidityCumulativeX128 +\\n                        ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),\\n                    initialized: true\\n                });\\n        }\\n    }\\n\\n    /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array\\n    /// @param self The stored oracle array\\n    /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32\\n    /// @return cardinality The number of populated elements in the oracle array\\n    /// @return cardinalityNext The new length of the oracle array, independent of population\\n    function initialize(Observation[65535] storage self, uint32 time)\\n        internal\\n        returns (uint16 cardinality, uint16 cardinalityNext)\\n    {\\n        self[0] = Observation({\\n            blockTimestamp: time,\\n            tickCumulative: 0,\\n            secondsPerLiquidityCumulativeX128: 0,\\n            initialized: true\\n        });\\n        return (1, 1);\\n    }\\n\\n    /// @notice Writes an oracle observation to the array\\n    /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\\n    /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\\n    /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\\n    /// @param self The stored oracle array\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @param cardinalityNext The new length of the oracle array, independent of population\\n    /// @return indexUpdated The new index of the most recently written element in the oracle array\\n    /// @return cardinalityUpdated The new cardinality of the oracle array\\n    function write(\\n        Observation[65535] storage self,\\n        uint16 index,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity,\\n        uint16 cardinality,\\n        uint16 cardinalityNext\\n    ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\\n        unchecked {\\n            Observation memory last = self[index];\\n\\n            // early return if we've already written an observation this block\\n            if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\\n\\n            // if the conditions are right, we can bump the cardinality\\n            if (cardinalityNext > cardinality && index == (cardinality - 1)) {\\n                cardinalityUpdated = cardinalityNext;\\n            } else {\\n                cardinalityUpdated = cardinality;\\n            }\\n\\n            indexUpdated = (index + 1) % cardinalityUpdated;\\n            self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);\\n        }\\n    }\\n\\n    /// @notice Prepares the oracle array to store up to `next` observations\\n    /// @param self The stored oracle array\\n    /// @param current The current next cardinality of the oracle array\\n    /// @param next The proposed next cardinality which will be populated in the oracle array\\n    /// @return next The next cardinality which will be populated in the oracle array\\n    function grow(\\n        Observation[65535] storage self,\\n        uint16 current,\\n        uint16 next\\n    ) internal returns (uint16) {\\n        unchecked {\\n            if (current <= 0) revert I();\\n            // no-op if the passed next value isn't greater than the current next value\\n            if (next <= current) return current;\\n            // store in each slot to prevent fresh SSTOREs in swaps\\n            // this data will not be used because the initialized boolean is still false\\n            for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\\n            return next;\\n        }\\n    }\\n\\n    /// @notice comparator for 32-bit timestamps\\n    /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time\\n    /// @param time A timestamp truncated to 32 bits\\n    /// @param a A comparison timestamp from which to determine the relative position of `time`\\n    /// @param b From which to determine the relative position of `time`\\n    /// @return Whether `a` is chronologically <= `b`\\n    function lte(\\n        uint32 time,\\n        uint32 a,\\n        uint32 b\\n    ) private pure returns (bool) {\\n        unchecked {\\n            // if there hasn't been overflow, no need to adjust\\n            if (a <= time && b <= time) return a <= b;\\n\\n            uint256 aAdjusted = a > time ? a : a + 2**32;\\n            uint256 bAdjusted = b > time ? b : b + 2**32;\\n\\n            return aAdjusted <= bAdjusted;\\n        }\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\\n    /// The result may be the same observation, or adjacent observations.\\n    /// @dev The answer must be contained in the array, used when the target is located within the stored observation\\n    /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation recorded before, or at, the target\\n    /// @return atOrAfter The observation recorded at, or after, the target\\n    function binarySearch(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        uint16 index,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        unchecked {\\n            uint256 l = (index + 1) % cardinality; // oldest observation\\n            uint256 r = l + cardinality - 1; // newest observation\\n            uint256 i;\\n            while (true) {\\n                i = (l + r) / 2;\\n\\n                beforeOrAt = self[i % cardinality];\\n\\n                // we've landed on an uninitialized tick, keep searching higher (more recently)\\n                if (!beforeOrAt.initialized) {\\n                    l = i + 1;\\n                    continue;\\n                }\\n\\n                atOrAfter = self[(i + 1) % cardinality];\\n\\n                bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);\\n\\n                // check if we've found the answer!\\n                if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;\\n\\n                if (!targetAtOrAfter) r = i - 1;\\n                else l = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\\n    /// @dev Assumes there is at least 1 initialized observation.\\n    /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param tick The active tick at the time of the returned or simulated observation\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The total pool liquidity at the time of the call\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\\n    /// @return atOrAfter The observation which occurred at, or after, the given timestamp\\n    function getSurroundingObservations(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        unchecked {\\n            // optimistically set before to the newest observation\\n            beforeOrAt = self[index];\\n\\n            // if the target is chronologically at or after the newest observation, we can early return\\n            if (lte(time, beforeOrAt.blockTimestamp, target)) {\\n                if (beforeOrAt.blockTimestamp == target) {\\n                    // if newest observation equals target, we're in the same block, so we can ignore atOrAfter\\n                    return (beforeOrAt, atOrAfter);\\n                } else {\\n                    // otherwise, we need to transform\\n                    return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));\\n                }\\n            }\\n\\n            // now, set before to the oldest observation\\n            beforeOrAt = self[(index + 1) % cardinality];\\n            if (!beforeOrAt.initialized) beforeOrAt = self[0];\\n\\n            // ensure that the target is chronologically at or after the oldest observation\\n            if (!lte(time, beforeOrAt.blockTimestamp, target)) revert OLD();\\n\\n            // if we've reached this point, we have to binary search\\n            return binarySearch(self, time, target, index, cardinality);\\n        }\\n    }\\n\\n    /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.\\n    /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\n    /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values\\n    /// at exactly the timestamp between the two observations.\\n    /// @param self The stored oracle array\\n    /// @param time The current block timestamp\\n    /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\n    function observeSingle(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 secondsAgo,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {\\n        unchecked {\\n            if (secondsAgo == 0) {\\n                Observation memory last = self[index];\\n                if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);\\n                return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);\\n            }\\n\\n            uint32 target = time - secondsAgo;\\n\\n            (Observation memory beforeOrAt, Observation memory atOrAfter) = getSurroundingObservations(\\n                self,\\n                time,\\n                target,\\n                tick,\\n                index,\\n                liquidity,\\n                cardinality\\n            );\\n\\n            if (target == beforeOrAt.blockTimestamp) {\\n                // we're at the left boundary\\n                return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);\\n            } else if (target == atOrAfter.blockTimestamp) {\\n                // we're at the right boundary\\n                return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);\\n            } else {\\n                // we're in the middle\\n                uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\\n                uint32 targetDelta = target - beforeOrAt.blockTimestamp;\\n                return (\\n                    beforeOrAt.tickCumulative +\\n                        ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / int56(uint56(observationTimeDelta))) *\\n                        int56(uint56(targetDelta)),\\n                    beforeOrAt.secondsPerLiquidityCumulativeX128 +\\n                        uint160(\\n                            (uint256(\\n                                atOrAfter.secondsPerLiquidityCumulativeX128 -\\n                                    beforeOrAt.secondsPerLiquidityCumulativeX128\\n                            ) * targetDelta) / observationTimeDelta\\n                        )\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\n    /// @dev Reverts if `secondsAgos` > oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\n    function observe(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32[] memory secondsAgos,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) {\\n        unchecked {\\n            if (cardinality <= 0) revert I();\\n\\n            tickCumulatives = new int56[](secondsAgos.length);\\n            secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);\\n            for (uint256 i = 0; i < secondsAgos.length; i++) {\\n                (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(\\n                    self,\\n                    time,\\n                    secondsAgos[i],\\n                    tick,\\n                    index,\\n                    liquidity,\\n                    cardinality\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa25b18af947c36b9add9e229c361beb6aba176fb435d7a24e6dc723cbc187442\",\"license\":\"BUSL-1.1\"},\"solidity/contracts/OracleFactory.sol\":{\"content\":\"//TODO: change license\\n//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {OracleSidechain} from '../contracts/OracleSidechain.sol';\\nimport {Governable} from '../contracts/peripherals/Governable.sol';\\nimport {IOracleFactory} from '../interfaces/IOracleFactory.sol';\\nimport {IDataReceiver} from '../interfaces/IDataReceiver.sol';\\n\\ncontract OracleFactory is IOracleFactory, Governable {\\n  IDataReceiver public dataReceiver;\\n\\n  uint16 public initialCardinality = 144;\\n\\n  mapping(address => mapping(address => mapping(uint24 => address))) public getPool;\\n\\n  OracleParameters public oracleParameters;\\n\\n  constructor(address _governance, IDataReceiver _dataReceiver) Governable(_governance) {\\n    dataReceiver = _dataReceiver;\\n  }\\n\\n  function deployOracle(\\n    address _token0,\\n    address _token1,\\n    uint24 _fee\\n  ) external returns (address _deployedOracle) {\\n    if (IDataReceiver(msg.sender) != dataReceiver) revert OnlyDataReceiver();\\n    oracleParameters = OracleParameters({\\n      factory: IOracleFactory(address(this)),\\n      token0: _token0,\\n      token1: _token1,\\n      fee: _fee,\\n      cardinality: initialCardinality\\n    });\\n    _deployedOracle = address(new OracleSidechain{salt: keccak256(abi.encode(_token0, _token1, _fee))}());\\n    getPool[_token0][_token1][_fee] = _deployedOracle;\\n    getPool[_token1][_token0][_fee] = _deployedOracle;\\n    delete oracleParameters;\\n    emit OracleDeployed(_deployedOracle, _token0, _token1, _fee, initialCardinality);\\n  }\\n\\n  function setDataReceiver(IDataReceiver _dataReceiver) external onlyGovernance {\\n    dataReceiver = _dataReceiver;\\n    emit DataReceiverSet(dataReceiver);\\n  }\\n\\n  function setInitialCardinality(uint16 _initialCardinality) external onlyGovernance {\\n    initialCardinality = _initialCardinality;\\n    emit InitialCardinalitySet(initialCardinality);\\n  }\\n}\\n\",\"keccak256\":\"0x86e59ab6ba42f7b5b22cb6a1d05a05c2223a2586be8e5dd3c1c420c32e69c14a\",\"license\":\"Unlicense\"},\"solidity/contracts/OracleSidechain.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {Oracle} from '@uniswap/v3-core/contracts/libraries/Oracle.sol';\\nimport {IOracleSidechain} from '../interfaces/IOracleSidechain.sol';\\nimport {IOracleFactory} from '../interfaces/IOracleFactory.sol';\\nimport {IDataReceiver} from '../interfaces/IDataReceiver.sol';\\n\\n/// @title A sidechain oracle contract\\n/// @author 0xJabberwock (from DeFi Wonderland)\\n/// @notice Computes on-chain price data from Mainnet\\n/// @dev Bridges Uniswap V3 pool observations\\ncontract OracleSidechain is IOracleSidechain {\\n  using Oracle for Oracle.Observation[65535];\\n\\n  struct Slot0 {\\n    // the most-recently updated index of the observations array\\n    uint16 observationIndex;\\n    // the current maximum number of observations that are being stored\\n    uint16 observationCardinality;\\n    // the next maximum number of observations to store, triggered in observations.write\\n    uint16 observationCardinalityNext;\\n  }\\n  /// @inheritdoc IOracleSidechain\\n  Slot0 public slot0;\\n\\n  /// @inheritdoc IOracleSidechain\\n  IOracleFactory public immutable factory;\\n\\n  /// @inheritdoc IOracleSidechain\\n  Oracle.Observation[65535] public observations;\\n\\n  /// @inheritdoc IOracleSidechain\\n  int24 public lastTick;\\n\\n  address public immutable token0;\\n\\n  address public immutable token1;\\n\\n  uint24 public immutable fee;\\n\\n  constructor() {\\n    uint16 _cardinality;\\n    (factory, token0, token1, fee, _cardinality) = IOracleFactory(msg.sender).oracleParameters();\\n    slot0 = Slot0({observationIndex: _cardinality - 1, observationCardinality: _cardinality, observationCardinalityNext: _cardinality});\\n  }\\n\\n  /// @dev Returns the block timestamp truncated to 32 bits, i.e. mod 2**32. This method is overridden in tests.\\n  function _getBlockTimestamp() internal view virtual returns (uint32) {\\n    return uint32(block.timestamp); // truncation is desired\\n  }\\n\\n  /// @inheritdoc IOracleSidechain\\n  function observe(uint32[] calldata _secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory _tickCumulatives, uint160[] memory _secondsPerLiquidityCumulativeX128s)\\n  {\\n    return observations.observe(_getBlockTimestamp(), _secondsAgos, lastTick, slot0.observationIndex, 0, slot0.observationCardinality);\\n  }\\n\\n  /// @inheritdoc IOracleSidechain\\n  function write(ObservationData[] calldata _observationsData) external returns (bool _written) {\\n    if (IDataReceiver(msg.sender) != factory.dataReceiver()) revert OnlyDataReceiver();\\n    Oracle.Observation memory _lastObservation = observations[slot0.observationIndex];\\n    uint256 _observationsDataLength = _observationsData.length;\\n    for (uint256 _i; _i < _observationsDataLength; ++_i) {\\n      if (_lastObservation.blockTimestamp < _observationsData[_i].blockTimestamp) {\\n        _write(_observationsData[_i]);\\n        _written = true;\\n      }\\n    }\\n  }\\n\\n  function _write(ObservationData calldata _observationData) private {\\n    (uint16 _indexUpdated, uint16 _cardinalityUpdated) = observations.write(\\n      slot0.observationIndex,\\n      _observationData.blockTimestamp,\\n      lastTick,\\n      0,\\n      slot0.observationCardinality,\\n      slot0.observationCardinalityNext\\n    );\\n    (slot0.observationIndex, slot0.observationCardinality) = (_indexUpdated, _cardinalityUpdated);\\n    lastTick = _observationData.tick;\\n    emit ObservationWritten(msg.sender, _observationData);\\n  }\\n}\\n\",\"keccak256\":\"0xbd5c253cfb21b990718bd33670f7de169561bb8a2999f20c10ca221b3c5ca93b\",\"license\":\"Unlicense\"},\"solidity/contracts/peripherals/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IGovernable} from '../../interfaces/peripherals/IGovernable.sol';\\n\\nabstract contract Governable is IGovernable {\\n  /// @inheritdoc IGovernable\\n  address public governance;\\n\\n  /// @inheritdoc IGovernable\\n  address public pendingGovernance;\\n\\n  constructor(address _governance) {\\n    if (_governance == address(0)) revert NoGovernanceZeroAddress();\\n    governance = _governance;\\n  }\\n\\n  /// @inheritdoc IGovernable\\n  function setGovernance(address _governance) external onlyGovernance {\\n    pendingGovernance = _governance;\\n    emit GovernanceProposal(_governance);\\n  }\\n\\n  /// @inheritdoc IGovernable\\n  function acceptGovernance() external onlyPendingGovernance {\\n    governance = pendingGovernance;\\n    delete pendingGovernance;\\n    emit GovernanceSet(governance);\\n  }\\n\\n  /// @notice Functions with this modifier can only be called by governance\\n  modifier onlyGovernance() {\\n    if (msg.sender != governance) revert OnlyGovernance();\\n    _;\\n  }\\n\\n  /// @notice Functions with this modifier can only be called by pendingGovernance\\n  modifier onlyPendingGovernance() {\\n    if (msg.sender != pendingGovernance) revert OnlyPendingGovernance();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x396fadbc0c0ce9100bb74db15d421d43883c06753a0a8ca78c2f1ee685c3fb6c\",\"license\":\"MIT\"},\"solidity/interfaces/IDataReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleFactory} from '../interfaces/IOracleFactory.sol';\\nimport {IOracleSidechain} from '../interfaces/IOracleSidechain.sol';\\nimport {IBridgeReceiverAdapter} from '../interfaces/bridges/IBridgeReceiverAdapter.sol';\\nimport {IGovernable} from '../interfaces/peripherals/IGovernable.sol';\\n\\n/// @title The DataReceiver interface\\n/// @author 0xJabberwock (from DeFi Wonderland)\\n/// @notice Contains state variables, events, custom errors and functions used in DataReceiver\\ninterface IDataReceiver is IGovernable {\\n  // STATE VARIABLES\\n  function oracleFactory() external view returns (IOracleFactory _oracleFactory);\\n\\n  function whitelistedAdapters(IBridgeReceiverAdapter _adapter) external view returns (bool _isAllowed);\\n\\n  // EVENTS\\n\\n  event ObservationsAdded(address _user, IOracleSidechain.ObservationData[] _observationsData);\\n  event AdapterWhitelisted(IBridgeReceiverAdapter _adapter, bool _isAllowed);\\n\\n  // CUSTOM ERRORS\\n\\n  error ObservationsNotWritable();\\n  error UnallowedAdapter();\\n  error LengthMismatch();\\n\\n  // FUNCTIONS\\n\\n  function addObservations(\\n    IOracleSidechain.ObservationData[] calldata _observationsData,\\n    address _token0,\\n    address _token1,\\n    uint24 _fee\\n  ) external;\\n\\n  function whitelistAdapter(IBridgeReceiverAdapter _receiverAdapter, bool _isWhitelisted) external;\\n\\n  function whitelistAdapters(IBridgeReceiverAdapter[] calldata _receiverAdapters, bool[] calldata _isWhitelisted) external;\\n}\\n\",\"keccak256\":\"0xbf307127a9713230185216d5f945ec74556e3aa032ed9f60ea393fa803640e80\",\"license\":\"Unlicense\"},\"solidity/interfaces/IOracleFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleSidechain} from '../interfaces/IOracleSidechain.sol';\\nimport {IDataReceiver} from '../interfaces/IDataReceiver.sol';\\nimport {IGovernable} from '../interfaces/peripherals/IGovernable.sol';\\n\\ninterface IOracleFactory is IGovernable {\\n  // STRUCTS\\n\\n  struct OracleParameters {\\n    IOracleFactory factory;\\n    address token0;\\n    address token1;\\n    uint24 fee;\\n    uint16 cardinality;\\n  }\\n\\n  // STATE VARIABLES\\n\\n  function dataReceiver() external view returns (IDataReceiver _dataReceiver);\\n\\n  function initialCardinality() external view returns (uint16 _initialCardinality);\\n\\n  function oracleParameters()\\n    external\\n    view\\n    returns (\\n      IOracleFactory _factory,\\n      address _token0,\\n      address _token1,\\n      uint24 _fee,\\n      uint16 _cardinality\\n    );\\n\\n  // EVENTS\\n\\n  event OracleDeployed(address _oracleAddress, address _token0, address _token1, uint24 _fee, uint16 _cardinality);\\n  event DataReceiverSet(IDataReceiver _dataReceiver);\\n  event InitialCardinalitySet(uint16 _initialCardinality);\\n\\n  // CUSTOM ERRORS\\n\\n  error OnlyDataReceiver();\\n\\n  // FUNCTIONS\\n\\n  function deployOracle(\\n    address _token0,\\n    address _token1,\\n    uint24 _fee\\n  ) external returns (address _deployedOracle);\\n\\n  function setDataReceiver(IDataReceiver _dataReceiver) external;\\n\\n  function setInitialCardinality(uint16 _initialCardinality) external;\\n}\\n\",\"keccak256\":\"0x1e194db29b22cf193cc9c369750687f4a551bd53aa9a4580d5290c23961ee4c8\",\"license\":\"Unlicense\"},\"solidity/interfaces/IOracleSidechain.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleFactory} from '../interfaces/IOracleFactory.sol';\\n\\n/// @title The OracleSidechain interface\\n/// @author 0xJabberwock (from DeFi Wonderland)\\n/// @notice Contains state variables, events, custom errors and functions used in OracleSidechain\\ninterface IOracleSidechain {\\n  // STRUCTS\\n\\n  struct ObservationData {\\n    uint32 blockTimestamp;\\n    int24 tick;\\n  }\\n\\n  // STATE VARIABLES\\n\\n  // TODO: complete natspec\\n\\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n  /// when accessed externally.\\n  /// @return _observationIndex The index of the last oracle observation that was written,\\n  /// @return _observationCardinality The current maximum number of observations stored in the pool,\\n  /// @return _observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint16 _observationIndex,\\n      uint16 _observationCardinality,\\n      uint16 _observationCardinalityNext\\n    );\\n\\n  function lastTick() external view returns (int24 _lastTick);\\n\\n  function factory() external view returns (IOracleFactory _oracleFactory);\\n\\n  function token0() external view returns (address _token0);\\n\\n  function token1() external view returns (address _token1);\\n\\n  /// @notice Returns data about a specific observation index\\n  /// @param _index The element of the observations array to fetch\\n  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n  /// ago, rather than at a specific index in the array.\\n  /// @return _blockTimestamp The timestamp of the observation,\\n  /// @return _tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n  /// @return _secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n  /// @return _initialized whether the observation has been initialized and the values are safe to use\\n  function observations(uint256 _index)\\n    external\\n    view\\n    returns (\\n      uint32 _blockTimestamp,\\n      int56 _tickCumulative,\\n      uint160 _secondsPerLiquidityCumulativeX128,\\n      bool _initialized\\n    );\\n\\n  // EVENTS;\\n\\n  /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n  /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n  /// just before a mint/swap/burn.\\n  /// @param _observationCardinalityNextOld The previous value of the next observation cardinality\\n  /// @param _observationCardinalityNextNew The updated value of the next observation cardinality\\n  event IncreaseObservationCardinalityNext(uint16 _observationCardinalityNextOld, uint16 _observationCardinalityNextNew);\\n\\n  event ObservationWritten(address _user, ObservationData _observationData);\\n\\n  // CUSTOM ERRORS\\n\\n  error AI();\\n  error OnlyDataReceiver();\\n\\n  // FUNCTIONS\\n\\n  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n  /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n  /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n  /// you must call it with secondsAgos = [3600, 0].\\n  /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n  /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n  /// @param _secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n  /// @return _tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n  /// @return _secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n  /// timestamp\\n  function observe(uint32[] calldata _secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory _tickCumulatives, uint160[] memory _secondsPerLiquidityCumulativeX128s);\\n\\n  function write(ObservationData[] calldata _observationsData) external returns (bool _written);\\n}\\n\",\"keccak256\":\"0x320fcd13db7cb9f4136967b5e906db257d1885267127f09905c96da6222e1d92\",\"license\":\"Unlicense\"},\"solidity/interfaces/bridges/IBridgeReceiverAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleSidechain} from '../../interfaces/IOracleSidechain.sol';\\n\\ninterface IBridgeReceiverAdapter {\\n  // FUNCTIONS\\n\\n  function addObservations(\\n    IOracleSidechain.ObservationData[] calldata _observationsData,\\n    address _token0,\\n    address _token1,\\n    uint24 _fee\\n  ) external;\\n}\\n\",\"keccak256\":\"0x4311156f68175babab1ef7d19caa7bf08c66edb4d115244ccf4883bdfebb11ed\",\"license\":\"Unlicense\"},\"solidity/interfaces/peripherals/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\n/// @title Governable contract\\n/// @notice Manages the governance role\\ninterface IGovernable {\\n  // Events\\n\\n  /// @notice Emitted when pendingGovernance accepts to be governance\\n  /// @param _governance Address of the new governance\\n  event GovernanceSet(address _governance);\\n\\n  /// @notice Emitted when a new governance is proposed\\n  /// @param _pendingGovernance Address that is proposed to be the new governance\\n  event GovernanceProposal(address _pendingGovernance);\\n\\n  // Errors\\n\\n  /// @notice Throws if the caller of the function is not governance\\n  error OnlyGovernance();\\n\\n  /// @notice Throws if the caller of the function is not pendingGovernance\\n  error OnlyPendingGovernance();\\n\\n  /// @notice Throws if trying to set governance to zero address\\n  error NoGovernanceZeroAddress();\\n\\n  // Variables\\n\\n  /// @notice Stores the governance address\\n  /// @return _governance The governance addresss\\n  function governance() external view returns (address _governance);\\n\\n  /// @notice Stores the pendingGovernance address\\n  /// @return _pendingGovernance The pendingGovernance addresss\\n  function pendingGovernance() external view returns (address _pendingGovernance);\\n\\n  // Methods\\n\\n  /// @notice Proposes a new address to be governance\\n  /// @param _governance The address being proposed as the new governance\\n  function setGovernance(address _governance) external;\\n\\n  /// @notice Changes the governance from the current governance to the previously proposed address\\n  function acceptGovernance() external;\\n}\\n\",\"keccak256\":\"0xf7e6dc04662fb90751f546440cfe3bcf0cd5e854daba774790b872c0566a2930\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526002805461ffff60a01b1916600960a41b17905534801561002457600080fd5b50604051611cf5380380611cf5833981016040819052610043916100b7565b816001600160a01b03811661006a5760405162b293ed60e81b815260040160405180910390fd5b600080546001600160a01b039283166001600160a01b03199182161790915560028054939092169216919091179055506100f1565b6001600160a01b03811681146100b457600080fd5b50565b600080604083850312156100ca57600080fd5b82516100d58161009f565b60208401519092506100e68161009f565b809150509250929050565b611bf5806101006000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806399df71201161007157806399df712014610148578063ab033ea914610194578063e0fee1f5146101a7578063e8047788146101ba578063ebaa56aa146101cd578063f39c38a0146101f557600080fd5b806307d5851a146100ae5780631698ee82146100c3578063238efcbc1461011a5780635aa6e6751461012257806397862d6d14610135575b600080fd5b6100c16100bc366004610640565b610208565b005b6100fd6100d1366004610664565b60036020908152600093845260408085208252928452828420905282529020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c1610288565b6000546100fd906001600160a01b031681565b6100c16101433660046106b7565b610311565b600454600554600654610183926001600160a01b039081169281169190811690600160a01b810462ffffff1690600160b81b900461ffff1685565b6040516101119594939291906106db565b6100c16101a2366004610640565b61038f565b6100fd6101b5366004610664565b610408565b6002546100fd906001600160a01b031681565b6002546101e290600160a01b900461ffff1681565b60405161ffff9091168152602001610111565b6001546100fd906001600160a01b031681565b6000546001600160a01b03163314610233576040516354348f0360e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f23ab7a40fedc3062f72fa590994df2ec8e49b54309a22df0ad3790dbc56346be906020015b60405180910390a150565b6001546001600160a01b031633146102b357604051637ef5703160e11b815260040160405180910390fd5b60018054600080546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527fc73be659241aade67e9a059bcf21494955018b213dbd1179054ccf928b13f3b69060200160405180910390a1565b6000546001600160a01b0316331461033c576040516354348f0360e01b815260040160405180910390fd5b6002805461ffff60a01b1916600160a01b61ffff8481168202929092179283905560405192041681527fec9fa937c26cb048aac5fc5992eaace52f38cd13c8da22f42630090bd258261f9060200161027d565b6000546001600160a01b031633146103ba576040516354348f0360e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe987aaedf9d279143bdf1eee16cf1d0feb47742867d81083df8d6cd0a5ac857f9060200161027d565b6002546000906001600160a01b0316331461043657604051638e5b30cb60e01b815260040160405180910390fd5b6040805160a081018252308082526001600160a01b03878116602080850182905291881684860181905262ffffff88166060808701829052600254600160a01b9081900461ffff166080988901819052600480546001600160a01b03199081169099179055600580549098168617909755600680546001600160b81b03191685179184029190911761ffff60b81b1916600160b81b909702969096179095558651938401929092529482019490945290810192909252016040516020818303038152906040528051906020012060405161050f9061061b565b8190604051809103906000f590508015801561052f573d6000803e3d6000fd5b506001600160a01b0380861660008181526003602081815260408084208a871680865290835281852062ffffff8b168087529084528286208054988a166001600160a01b0319998a1681179091559186529383528185209585529482528084209284529190529081902080548416909217909155600480548316905560058054909216909155600680546001600160c81b031916905560025490519192507ff190e8b2a78bc6652a43192156e78c2e5ff9bccc9692ad0a4d7a53a879f5d8e99161060c918491889188918891600160a01b900461ffff16906106db565b60405180910390a19392505050565b6114a98061071783390190565b6001600160a01b038116811461063d57600080fd5b50565b60006020828403121561065257600080fd5b813561065d81610628565b9392505050565b60008060006060848603121561067957600080fd5b833561068481610628565b9250602084013561069481610628565b9150604084013562ffffff811681146106ac57600080fd5b809150509250925092565b6000602082840312156106c957600080fd5b813561ffff8116811461065d57600080fd5b6001600160a01b039586168152938516602085015291909316604083015262ffffff909216606082015261ffff909116608082015260a0019056fe6101006040523480156200001257600080fd5b506000336001600160a01b03166399df71206040518163ffffffff1660e01b815260040160a060405180830381865afa15801562000054573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200007a919062000136565b62ffffff90911660e0526001600160a01b0391821660c05291811660a05291909116608052604080516060810190915290915080620000bb600184620001c3565b61ffff9081168252928316602080830182905260409283019190915282516000805492850151949093015185166401000000000261ffff60201b19948616620100000263ffffffff1990931691909516171791909116919091179055620001f5565b6001600160a01b03811681146200013357600080fd5b50565b600080600080600060a086880312156200014f57600080fd5b85516200015c816200011d565b60208701519095506200016f816200011d565b604087015190945062000182816200011d565b606087015190935062ffffff811681146200019c57600080fd5b608087015190925061ffff81168114620001b557600080fd5b809150509295509295909350565b600061ffff83811690831681811015620001ed57634e487b7160e01b600052601160045260246000fd5b039392505050565b60805160a05160c05160e05161127462000235600039600061022a0152600061020301526000609d0152600081816101dc01526102a901526112746000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80633dfa5d87116100665780633dfa5d8714610194578063883bdbfd146101b6578063c45a0155146101d7578063d21220a7146101fe578063ddca3f431461022557600080fd5b80630dfe168114610098578063252c09d7146100dc5780633850c7bd146101295780633870176514610171575b600080fd5b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ef6100ea366004610f94565b610260565b6040805163ffffffff909516855260069390930b60208501526001600160a01b0390911691830191909152151560608201526080016100d3565b60005461014c9061ffff80821691620100008104821691600160201b9091041683565b6040805161ffff948516815292841660208401529216918101919091526060016100d3565b61018461017f366004610fad565b6102a5565b60405190151581526020016100d3565b62010000546101a39060020b81565b60405160029190910b81526020016100d3565b6101c96101c4366004611022565b610451565b6040516100d3929190611085565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b61024c7f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff90911681526020016100d3565b60018161ffff811061027157600080fd5b015463ffffffff81169150600160201b810460060b90600160581b81046001600160a01b031690600160f81b900460ff1684565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e80477886040518163ffffffff1660e01b8152600401602060405180830381865afa158015610305573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610329919061110c565b6001600160a01b0316336001600160a01b03161461035a57604051638e5b30cb60e01b815260040160405180910390fd5b6000805460019061ffff90811690811061037657610376611135565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b909104161515606082015290508260005b81811015610448578585828181106103e6576103e6611135565b6103fc9260206040909202019081019150611164565b63ffffffff16836000015163ffffffff1610156104385761043386868381811061042857610428611135565b9050604002016104b9565b600193505b6104418161117f565b90506103cc565b50505092915050565b6060806104ae428585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250620100008054825460019897965060029190910b945061ffff808216945091900416610596565b915091509250929050565b6000805481906105009061ffff166104d46020860186611164565b62010000805460008054600195949360029390930b9261ffff908204811691600160201b9004166106e1565b6000805463ffffffff19166201000061ffff8481169190910261ffff191691909117908416179055909250905061053d60408401602085016111b8565b62010000805462ffffff191662ffffff929092169190911790556040517f351cb05bc71b044931f7410e88dceed68c021615a824de572c6cb0a735f50ac49061058990339086906111d3565b60405180910390a1505050565b60608060008361ffff16116105be57604051636b93000360e11b815260040160405180910390fd5b865167ffffffffffffffff8111156105d8576105d8611212565b604051908082528060200260200182016040528015610601578160200160208202803683370190505b509150865167ffffffffffffffff81111561061e5761061e611212565b604051908082528060200260200182016040528015610647578160200160208202803683370190505b50905060005b87518110156106d45761067e8a8a8a848151811061066d5761066d611135565b60200260200101518a8a8a8a610869565b84838151811061069057610690611135565b602002602001018484815181106106a9576106a9611135565b6001600160a01b039093166020938402919091019092019190915260069190910b905260010161064d565b5097509795505050505050565b6000806000898961ffff1661ffff81106106fd576106fd611135565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff161515606083015290925089169003610766578885925092505061085d565b8461ffff168461ffff1611801561078757506001850361ffff168961ffff16145b1561079457839150610798565b8491505b8161ffff168960010161ffff16816107b2576107b2611228565b0692506107c181898989610a18565b8a8461ffff1661ffff81106107d8576107d8611135565b825191018054602084015160408501516060909501511515600160f81b026001600160f81b036001600160a01b03909616600160581b02959095166affffffffffffffffffffff66ffffffffffffff909216600160201b026affffffffffffffffffffff1990931663ffffffff90951694909417919091171691909117919091179055505b97509795505050505050565b6000808663ffffffff16600003610912576000898661ffff1661ffff811061089357610893611135565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff16151560608301529092508a16146108fe576108fb818a8988610a18565b90505b80602001518160400151925092505061085d565b8688036000806109278c8c858c8c8c8c610add565b91509150816000015163ffffffff168363ffffffff160361095857816020015182604001519450945050505061085d565b806000015163ffffffff168363ffffffff160361098557806020015181604001519450945050505061085d565b60008260000151826000015103905060008360000151850390508063ffffffff168263ffffffff1660060b856020015185602001510360060b816109cb576109cb611228565b05028460200151018263ffffffff168263ffffffff1686604001518660400151036001600160a01b03160281610a0357610a03611228565b0485604001510196509650505050505061085d565b604080516080810182526000808252602082018190529181018290526060810191909152600085600001518503905060405180608001604052808663ffffffff1681526020018263ffffffff168660020b0288602001510160060b81526020016000856001600160801b031611610a90576001610a92565b845b6001600160801b031663ffffffff60801b608085901b1681610ab657610ab6611228565b048860400151016001600160a01b0316815260200160011515815250915050949350505050565b604080516080810182526000808252602082018190529181018290526060810191909152604080516080810182526000808252602082018190529181018290526060810191909152888561ffff1661ffff8110610b3c57610b3c611135565b60408051608081018252919092015463ffffffff8116808352600160201b820460060b6020840152600160581b82046001600160a01b031693830193909352600160f81b900460ff16151560608201529250610b9a90899089610ce9565b15610bc657815163ffffffff88811691161461085d5781610bbd83898988610a18565b9150915061085d565b888361ffff168660010161ffff1681610be157610be1611228565b0661ffff1661ffff8110610bf757610bf7611135565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201819052909250610ca057604080516080810182528a5463ffffffff81168252600160201b810460060b6020830152600160581b81046001600160a01b031692820192909252600160f81b90910460ff161515606082015291505b610caf88836000015189610ce9565b610ccc576040516327e8e87560e01b815260040160405180910390fd5b610cd98989898887610dac565b9150915097509795505050505050565b60008363ffffffff168363ffffffff1611158015610d1357508363ffffffff168263ffffffff1611155b15610d2f578163ffffffff168363ffffffff1611159050610da5565b60008463ffffffff168463ffffffff1611610d56578363ffffffff16600160201b01610d5e565b8363ffffffff165b64ffffffffff16905060008563ffffffff168463ffffffff1611610d8e578363ffffffff16600160201b01610d96565b8363ffffffff165b64ffffffffff16909111159150505b9392505050565b60408051608081018252600080825260208201819052918101829052606081019190915260408051608081018252600080825260208201819052918101829052606081019190915260008361ffff168560010161ffff1681610e1057610e10611228565b0661ffff169050600060018561ffff16830103905060005b506002818301048961ffff87168281610e4357610e43611228565b0661ffff8110610e5557610e55611135565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201819052909550610eb957806001019250610e28565b898661ffff168260010181610ed057610ed0611228565b0661ffff8110610ee257610ee2611135565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201528551909450600090610f46908b908b610ce9565b9050808015610f5f5750610f5f8a8a8760000151610ce9565b15610f6a5750610f87565b80610f7a57600182039250610f81565b8160010193505b50610e28565b5050509550959350505050565b600060208284031215610fa657600080fd5b5035919050565b60008060208385031215610fc057600080fd5b823567ffffffffffffffff80821115610fd857600080fd5b818501915085601f830112610fec57600080fd5b813581811115610ffb57600080fd5b8660208260061b850101111561101057600080fd5b60209290920196919550909350505050565b6000806020838503121561103557600080fd5b823567ffffffffffffffff8082111561104d57600080fd5b818501915085601f83011261106157600080fd5b81358181111561107057600080fd5b8660208260051b850101111561101057600080fd5b604080825283519082018190526000906020906060840190828701845b828110156110c157815160060b845292840192908401906001016110a2565b5050508381038285015284518082528583019183019060005b818110156110ff5783516001600160a01b0316835292840192918401916001016110da565b5090979650505050505050565b60006020828403121561111e57600080fd5b81516001600160a01b0381168114610da557600080fd5b634e487b7160e01b600052603260045260246000fd5b803563ffffffff8116811461115f57600080fd5b919050565b60006020828403121561117657600080fd5b610da58261114b565b60006001820161119f57634e487b7160e01b600052601160045260246000fd5b5060010190565b8035600281900b811461115f57600080fd5b6000602082840312156111ca57600080fd5b610da5826111a6565b6001600160a01b03831681526060810163ffffffff6111f18461114b565b166020830152611203602084016111a6565b60020b60408301529392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212208128084b1d4bc14963218d62df816defe68325a805fd8a0ea2a46785b0d72a6764736f6c634300080f0033a26469706673582212201ef805d437320e73b82a31d4b4bb39f0f90fd9c044b8853301dae691bf6637b564736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806399df71201161007157806399df712014610148578063ab033ea914610194578063e0fee1f5146101a7578063e8047788146101ba578063ebaa56aa146101cd578063f39c38a0146101f557600080fd5b806307d5851a146100ae5780631698ee82146100c3578063238efcbc1461011a5780635aa6e6751461012257806397862d6d14610135575b600080fd5b6100c16100bc366004610640565b610208565b005b6100fd6100d1366004610664565b60036020908152600093845260408085208252928452828420905282529020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c1610288565b6000546100fd906001600160a01b031681565b6100c16101433660046106b7565b610311565b600454600554600654610183926001600160a01b039081169281169190811690600160a01b810462ffffff1690600160b81b900461ffff1685565b6040516101119594939291906106db565b6100c16101a2366004610640565b61038f565b6100fd6101b5366004610664565b610408565b6002546100fd906001600160a01b031681565b6002546101e290600160a01b900461ffff1681565b60405161ffff9091168152602001610111565b6001546100fd906001600160a01b031681565b6000546001600160a01b03163314610233576040516354348f0360e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f23ab7a40fedc3062f72fa590994df2ec8e49b54309a22df0ad3790dbc56346be906020015b60405180910390a150565b6001546001600160a01b031633146102b357604051637ef5703160e11b815260040160405180910390fd5b60018054600080546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527fc73be659241aade67e9a059bcf21494955018b213dbd1179054ccf928b13f3b69060200160405180910390a1565b6000546001600160a01b0316331461033c576040516354348f0360e01b815260040160405180910390fd5b6002805461ffff60a01b1916600160a01b61ffff8481168202929092179283905560405192041681527fec9fa937c26cb048aac5fc5992eaace52f38cd13c8da22f42630090bd258261f9060200161027d565b6000546001600160a01b031633146103ba576040516354348f0360e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe987aaedf9d279143bdf1eee16cf1d0feb47742867d81083df8d6cd0a5ac857f9060200161027d565b6002546000906001600160a01b0316331461043657604051638e5b30cb60e01b815260040160405180910390fd5b6040805160a081018252308082526001600160a01b03878116602080850182905291881684860181905262ffffff88166060808701829052600254600160a01b9081900461ffff166080988901819052600480546001600160a01b03199081169099179055600580549098168617909755600680546001600160b81b03191685179184029190911761ffff60b81b1916600160b81b909702969096179095558651938401929092529482019490945290810192909252016040516020818303038152906040528051906020012060405161050f9061061b565b8190604051809103906000f590508015801561052f573d6000803e3d6000fd5b506001600160a01b0380861660008181526003602081815260408084208a871680865290835281852062ffffff8b168087529084528286208054988a166001600160a01b0319998a1681179091559186529383528185209585529482528084209284529190529081902080548416909217909155600480548316905560058054909216909155600680546001600160c81b031916905560025490519192507ff190e8b2a78bc6652a43192156e78c2e5ff9bccc9692ad0a4d7a53a879f5d8e99161060c918491889188918891600160a01b900461ffff16906106db565b60405180910390a19392505050565b6114a98061071783390190565b6001600160a01b038116811461063d57600080fd5b50565b60006020828403121561065257600080fd5b813561065d81610628565b9392505050565b60008060006060848603121561067957600080fd5b833561068481610628565b9250602084013561069481610628565b9150604084013562ffffff811681146106ac57600080fd5b809150509250925092565b6000602082840312156106c957600080fd5b813561ffff8116811461065d57600080fd5b6001600160a01b039586168152938516602085015291909316604083015262ffffff909216606082015261ffff909116608082015260a0019056fe6101006040523480156200001257600080fd5b506000336001600160a01b03166399df71206040518163ffffffff1660e01b815260040160a060405180830381865afa15801562000054573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200007a919062000136565b62ffffff90911660e0526001600160a01b0391821660c05291811660a05291909116608052604080516060810190915290915080620000bb600184620001c3565b61ffff9081168252928316602080830182905260409283019190915282516000805492850151949093015185166401000000000261ffff60201b19948616620100000263ffffffff1990931691909516171791909116919091179055620001f5565b6001600160a01b03811681146200013357600080fd5b50565b600080600080600060a086880312156200014f57600080fd5b85516200015c816200011d565b60208701519095506200016f816200011d565b604087015190945062000182816200011d565b606087015190935062ffffff811681146200019c57600080fd5b608087015190925061ffff81168114620001b557600080fd5b809150509295509295909350565b600061ffff83811690831681811015620001ed57634e487b7160e01b600052601160045260246000fd5b039392505050565b60805160a05160c05160e05161127462000235600039600061022a0152600061020301526000609d0152600081816101dc01526102a901526112746000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80633dfa5d87116100665780633dfa5d8714610194578063883bdbfd146101b6578063c45a0155146101d7578063d21220a7146101fe578063ddca3f431461022557600080fd5b80630dfe168114610098578063252c09d7146100dc5780633850c7bd146101295780633870176514610171575b600080fd5b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ef6100ea366004610f94565b610260565b6040805163ffffffff909516855260069390930b60208501526001600160a01b0390911691830191909152151560608201526080016100d3565b60005461014c9061ffff80821691620100008104821691600160201b9091041683565b6040805161ffff948516815292841660208401529216918101919091526060016100d3565b61018461017f366004610fad565b6102a5565b60405190151581526020016100d3565b62010000546101a39060020b81565b60405160029190910b81526020016100d3565b6101c96101c4366004611022565b610451565b6040516100d3929190611085565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b61024c7f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff90911681526020016100d3565b60018161ffff811061027157600080fd5b015463ffffffff81169150600160201b810460060b90600160581b81046001600160a01b031690600160f81b900460ff1684565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e80477886040518163ffffffff1660e01b8152600401602060405180830381865afa158015610305573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610329919061110c565b6001600160a01b0316336001600160a01b03161461035a57604051638e5b30cb60e01b815260040160405180910390fd5b6000805460019061ffff90811690811061037657610376611135565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b909104161515606082015290508260005b81811015610448578585828181106103e6576103e6611135565b6103fc9260206040909202019081019150611164565b63ffffffff16836000015163ffffffff1610156104385761043386868381811061042857610428611135565b9050604002016104b9565b600193505b6104418161117f565b90506103cc565b50505092915050565b6060806104ae428585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250620100008054825460019897965060029190910b945061ffff808216945091900416610596565b915091509250929050565b6000805481906105009061ffff166104d46020860186611164565b62010000805460008054600195949360029390930b9261ffff908204811691600160201b9004166106e1565b6000805463ffffffff19166201000061ffff8481169190910261ffff191691909117908416179055909250905061053d60408401602085016111b8565b62010000805462ffffff191662ffffff929092169190911790556040517f351cb05bc71b044931f7410e88dceed68c021615a824de572c6cb0a735f50ac49061058990339086906111d3565b60405180910390a1505050565b60608060008361ffff16116105be57604051636b93000360e11b815260040160405180910390fd5b865167ffffffffffffffff8111156105d8576105d8611212565b604051908082528060200260200182016040528015610601578160200160208202803683370190505b509150865167ffffffffffffffff81111561061e5761061e611212565b604051908082528060200260200182016040528015610647578160200160208202803683370190505b50905060005b87518110156106d45761067e8a8a8a848151811061066d5761066d611135565b60200260200101518a8a8a8a610869565b84838151811061069057610690611135565b602002602001018484815181106106a9576106a9611135565b6001600160a01b039093166020938402919091019092019190915260069190910b905260010161064d565b5097509795505050505050565b6000806000898961ffff1661ffff81106106fd576106fd611135565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff161515606083015290925089169003610766578885925092505061085d565b8461ffff168461ffff1611801561078757506001850361ffff168961ffff16145b1561079457839150610798565b8491505b8161ffff168960010161ffff16816107b2576107b2611228565b0692506107c181898989610a18565b8a8461ffff1661ffff81106107d8576107d8611135565b825191018054602084015160408501516060909501511515600160f81b026001600160f81b036001600160a01b03909616600160581b02959095166affffffffffffffffffffff66ffffffffffffff909216600160201b026affffffffffffffffffffff1990931663ffffffff90951694909417919091171691909117919091179055505b97509795505050505050565b6000808663ffffffff16600003610912576000898661ffff1661ffff811061089357610893611135565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff16151560608301529092508a16146108fe576108fb818a8988610a18565b90505b80602001518160400151925092505061085d565b8688036000806109278c8c858c8c8c8c610add565b91509150816000015163ffffffff168363ffffffff160361095857816020015182604001519450945050505061085d565b806000015163ffffffff168363ffffffff160361098557806020015181604001519450945050505061085d565b60008260000151826000015103905060008360000151850390508063ffffffff168263ffffffff1660060b856020015185602001510360060b816109cb576109cb611228565b05028460200151018263ffffffff168263ffffffff1686604001518660400151036001600160a01b03160281610a0357610a03611228565b0485604001510196509650505050505061085d565b604080516080810182526000808252602082018190529181018290526060810191909152600085600001518503905060405180608001604052808663ffffffff1681526020018263ffffffff168660020b0288602001510160060b81526020016000856001600160801b031611610a90576001610a92565b845b6001600160801b031663ffffffff60801b608085901b1681610ab657610ab6611228565b048860400151016001600160a01b0316815260200160011515815250915050949350505050565b604080516080810182526000808252602082018190529181018290526060810191909152604080516080810182526000808252602082018190529181018290526060810191909152888561ffff1661ffff8110610b3c57610b3c611135565b60408051608081018252919092015463ffffffff8116808352600160201b820460060b6020840152600160581b82046001600160a01b031693830193909352600160f81b900460ff16151560608201529250610b9a90899089610ce9565b15610bc657815163ffffffff88811691161461085d5781610bbd83898988610a18565b9150915061085d565b888361ffff168660010161ffff1681610be157610be1611228565b0661ffff1661ffff8110610bf757610bf7611135565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201819052909250610ca057604080516080810182528a5463ffffffff81168252600160201b810460060b6020830152600160581b81046001600160a01b031692820192909252600160f81b90910460ff161515606082015291505b610caf88836000015189610ce9565b610ccc576040516327e8e87560e01b815260040160405180910390fd5b610cd98989898887610dac565b9150915097509795505050505050565b60008363ffffffff168363ffffffff1611158015610d1357508363ffffffff168263ffffffff1611155b15610d2f578163ffffffff168363ffffffff1611159050610da5565b60008463ffffffff168463ffffffff1611610d56578363ffffffff16600160201b01610d5e565b8363ffffffff165b64ffffffffff16905060008563ffffffff168463ffffffff1611610d8e578363ffffffff16600160201b01610d96565b8363ffffffff165b64ffffffffff16909111159150505b9392505050565b60408051608081018252600080825260208201819052918101829052606081019190915260408051608081018252600080825260208201819052918101829052606081019190915260008361ffff168560010161ffff1681610e1057610e10611228565b0661ffff169050600060018561ffff16830103905060005b506002818301048961ffff87168281610e4357610e43611228565b0661ffff8110610e5557610e55611135565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201819052909550610eb957806001019250610e28565b898661ffff168260010181610ed057610ed0611228565b0661ffff8110610ee257610ee2611135565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201528551909450600090610f46908b908b610ce9565b9050808015610f5f5750610f5f8a8a8760000151610ce9565b15610f6a5750610f87565b80610f7a57600182039250610f81565b8160010193505b50610e28565b5050509550959350505050565b600060208284031215610fa657600080fd5b5035919050565b60008060208385031215610fc057600080fd5b823567ffffffffffffffff80821115610fd857600080fd5b818501915085601f830112610fec57600080fd5b813581811115610ffb57600080fd5b8660208260061b850101111561101057600080fd5b60209290920196919550909350505050565b6000806020838503121561103557600080fd5b823567ffffffffffffffff8082111561104d57600080fd5b818501915085601f83011261106157600080fd5b81358181111561107057600080fd5b8660208260051b850101111561101057600080fd5b604080825283519082018190526000906020906060840190828701845b828110156110c157815160060b845292840192908401906001016110a2565b5050508381038285015284518082528583019183019060005b818110156110ff5783516001600160a01b0316835292840192918401916001016110da565b5090979650505050505050565b60006020828403121561111e57600080fd5b81516001600160a01b0381168114610da557600080fd5b634e487b7160e01b600052603260045260246000fd5b803563ffffffff8116811461115f57600080fd5b919050565b60006020828403121561117657600080fd5b610da58261114b565b60006001820161119f57634e487b7160e01b600052601160045260246000fd5b5060010190565b8035600281900b811461115f57600080fd5b6000602082840312156111ca57600080fd5b610da5826111a6565b6001600160a01b03831681526060810163ffffffff6111f18461114b565b166020830152611203602084016111a6565b60020b60408301529392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212208128084b1d4bc14963218d62df816defe68325a805fd8a0ea2a46785b0d72a6764736f6c634300080f0033a26469706673582212201ef805d437320e73b82a31d4b4bb39f0f90fd9c044b8853301dae691bf6637b564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setGovernance(address)": {
        "params": {
          "_governance": "The address being proposed as the new governance"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "NoGovernanceZeroAddress()": [
        {
          "notice": "Throws if trying to set governance to zero address"
        }
      ],
      "OnlyGovernance()": [
        {
          "notice": "Throws if the caller of the function is not governance"
        }
      ],
      "OnlyPendingGovernance()": [
        {
          "notice": "Throws if the caller of the function is not pendingGovernance"
        }
      ]
    },
    "events": {
      "GovernanceProposal(address)": {
        "notice": "Emitted when a new governance is proposed"
      },
      "GovernanceSet(address)": {
        "notice": "Emitted when pendingGovernance accepts to be governance"
      }
    },
    "kind": "user",
    "methods": {
      "acceptGovernance()": {
        "notice": "Changes the governance from the current governance to the previously proposed address"
      },
      "governance()": {
        "notice": "Stores the governance address"
      },
      "pendingGovernance()": {
        "notice": "Stores the pendingGovernance address"
      },
      "setGovernance(address)": {
        "notice": "Proposes a new address to be governance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20231,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "governance",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20234,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "pendingGovernance",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18975,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "dataReceiver",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDataReceiver)20612"
      },
      {
        "astId": 18978,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "initialCardinality",
        "offset": 20,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 18986,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "getPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint24,t_address)))"
      },
      {
        "astId": 18989,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "oracleParameters",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(OracleParameters)20634_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IDataReceiver)20612": {
        "encoding": "inplace",
        "label": "contract IDataReceiver",
        "numberOfBytes": "20"
      },
      "t_contract(IOracleFactory)20705": {
        "encoding": "inplace",
        "label": "contract IOracleFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint24,t_address)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint24 => address)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint24,t_address))"
      },
      "t_mapping(t_address,t_mapping(t_uint24,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint24 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint24,t_address)"
      },
      "t_mapping(t_uint24,t_address)": {
        "encoding": "mapping",
        "key": "t_uint24",
        "label": "mapping(uint24 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(OracleParameters)20634_storage": {
        "encoding": "inplace",
        "label": "struct IOracleFactory.OracleParameters",
        "members": [
          {
            "astId": 20625,
            "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
            "label": "factory",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IOracleFactory)20705"
          },
          {
            "astId": 20627,
            "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
            "label": "token0",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20629,
            "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
            "label": "token1",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 20631,
            "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
            "label": "fee",
            "offset": 20,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 20633,
            "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
            "label": "cardinality",
            "offset": 23,
            "slot": "2",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      }
    }
  }
}