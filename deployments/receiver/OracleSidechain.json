{
  "address": "0x5B5fbd188bcd4Ef946071411ECf59e929ce2C9ad",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDataReceiver",
          "name": "_dataReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AI",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "I",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OLD",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDataReceiver",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_observationCardinalityNextOld",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_observationCardinalityNextNew",
          "type": "uint16"
        }
      ],
      "name": "IncreaseObservationCardinalityNext",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "int24",
              "name": "tick",
              "type": "int24"
            }
          ],
          "indexed": false,
          "internalType": "struct IOracleSidechain.ObservationData",
          "name": "_observationData",
          "type": "tuple"
        }
      ],
      "name": "Initialize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "int24",
              "name": "tick",
              "type": "int24"
            }
          ],
          "indexed": false,
          "internalType": "struct IOracleSidechain.ObservationData",
          "name": "_observationData",
          "type": "tuple"
        }
      ],
      "name": "ObservationWritten",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "dataReceiver",
      "outputs": [
        {
          "internalType": "contract IDataReceiver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_observationCardinalityNext",
          "type": "uint16"
        }
      ],
      "name": "increaseObservationCardinalityNext",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "int24",
              "name": "tick",
              "type": "int24"
            }
          ],
          "internalType": "struct IOracleSidechain.ObservationData",
          "name": "_observationData",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTick",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "observations",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "blockTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "int56",
          "name": "tickCumulative",
          "type": "int56"
        },
        {
          "internalType": "uint160",
          "name": "secondsPerLiquidityCumulativeX128",
          "type": "uint160"
        },
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_secondsAgos",
          "type": "uint32[]"
        }
      ],
      "name": "observe",
      "outputs": [
        {
          "internalType": "int56[]",
          "name": "_tickCumulatives",
          "type": "int56[]"
        },
        {
          "internalType": "uint160[]",
          "name": "_secondsPerLiquidityCumulativeX128s",
          "type": "uint160[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slot0",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "observationIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "observationCardinality",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "observationCardinalityNext",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "int24",
              "name": "tick",
              "type": "int24"
            }
          ],
          "internalType": "struct IOracleSidechain.ObservationData[]",
          "name": "_observationsData",
          "type": "tuple[]"
        }
      ],
      "name": "write",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_written",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbcb36b28e19e74ce8c71d7adf4630a9f7ffad56eef5697ed515a2101368531ca",
  "receipt": {
    "to": null,
    "from": "0x57B067e4E27558FE2c60fCE86941011cB5F5A4FD",
    "contractAddress": "0x5B5fbd188bcd4Ef946071411ECf59e929ce2C9ad",
    "transactionIndex": 3,
    "gasUsed": "1178585",
    "logsBloom": "0x
    "blockHash": "0xfc8ddcfadea6679b1be75d4079e17fce36e53218f2e299e5cab001cce59d6fdb",
    "transactionHash": "0xbcb36b28e19e74ce8c71d7adf4630a9f7ffad56eef5697ed515a2101368531ca",
    "logs": [],
    "blockNumber": 7191955,
    "cumulativeGasUsed": "1633353",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9B4431E2EA7CF025a7953a1e5Acd1cC356476669"
  ],
  "numDeployments": 2,
  "solcInputHash": "9a08159241e536ab8c9fe9dee0fe4027",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDataReceiver\",\"name\":\"_dataReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AI\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"I\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OLD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDataReceiver\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"indexed\":false,\"internalType\":\"struct IOracleSidechain.ObservationData\",\"name\":\"_observationData\",\"type\":\"tuple\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"indexed\":false,\"internalType\":\"struct IOracleSidechain.ObservationData\",\"name\":\"_observationData\",\"type\":\"tuple\"}],\"name\":\"ObservationWritten\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"dataReceiver\",\"outputs\":[{\"internalType\":\"contract IDataReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"internalType\":\"struct IOracleSidechain.ObservationData\",\"name\":\"_observationData\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"_tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"_secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"internalType\":\"struct IOracleSidechain.ObservationData[]\",\"name\":\"_observationsData\",\"type\":\"tuple[]\"}],\"name\":\"write\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_written\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0xJabberwock (from DeFi Wonderland)\",\"details\":\"Bridges Uniswap V3 pool observations\",\"kind\":\"dev\",\"methods\":{\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"_observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize((uint32,int24))\":{\"params\":{\"_observationData\":\"The timestamp of the observation and the initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"_secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"_secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"_tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}}},\"stateVariables\":{\"observations\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"_index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation,\",\"initialized\":\"whether the observation has been initialized and the values are safe to use\",\"secondsPerLiquidityCumulativeX128\":\"the seconds per in range liquidity for the life of the pool as of the observation timestamp,\",\"tickCumulative\":\"the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\"}},\"slot0\":{\"returns\":{\"observationCardinality\":\"The current maximum number of observations stored in the pool,\",\"observationCardinalityNext\":\"The next maximum number of observations, to be updated when the observation.\",\"observationIndex\":\"The index of the last oracle observation that was written,\"}}},\"title\":\"A sidechain oracle contract\",\"version\":1},\"userdoc\":{\"events\":{\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize((uint32,int24))\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"}},\"kind\":\"user\",\"methods\":{\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize((uint32,int24))\":{\"notice\":\"Sets the initial price for the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"}},\"notice\":\"Computes on-chain price data from Mainnet\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/OracleSidechain.sol\":\"OracleSidechain\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/// @title Oracle\\n/// @notice Provides price and liquidity data useful for a wide variety of system designs\\n/// @dev Instances of stored oracle data, \\\"observations\\\", are collected in the oracle array\\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\\n/// Observations are overwritten when the full length of the oracle array is populated.\\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\\nlibrary Oracle {\\n    error I();\\n    error OLD();\\n\\n    struct Observation {\\n        // the block timestamp of the observation\\n        uint32 blockTimestamp;\\n        // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\\n        int56 tickCumulative;\\n        // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        // whether or not the observation is initialized\\n        bool initialized;\\n    }\\n\\n    /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values\\n    /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\\n    /// @param last The specified observation to be transformed\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @return Observation The newly populated observation\\n    function transform(\\n        Observation memory last,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity\\n    ) private pure returns (Observation memory) {\\n        unchecked {\\n            uint32 delta = blockTimestamp - last.blockTimestamp;\\n            return\\n                Observation({\\n                    blockTimestamp: blockTimestamp,\\n                    tickCumulative: last.tickCumulative + int56(tick) * int56(uint56(delta)),\\n                    secondsPerLiquidityCumulativeX128: last.secondsPerLiquidityCumulativeX128 +\\n                        ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),\\n                    initialized: true\\n                });\\n        }\\n    }\\n\\n    /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array\\n    /// @param self The stored oracle array\\n    /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32\\n    /// @return cardinality The number of populated elements in the oracle array\\n    /// @return cardinalityNext The new length of the oracle array, independent of population\\n    function initialize(Observation[65535] storage self, uint32 time)\\n        internal\\n        returns (uint16 cardinality, uint16 cardinalityNext)\\n    {\\n        self[0] = Observation({\\n            blockTimestamp: time,\\n            tickCumulative: 0,\\n            secondsPerLiquidityCumulativeX128: 0,\\n            initialized: true\\n        });\\n        return (1, 1);\\n    }\\n\\n    /// @notice Writes an oracle observation to the array\\n    /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\\n    /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\\n    /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\\n    /// @param self The stored oracle array\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @param cardinalityNext The new length of the oracle array, independent of population\\n    /// @return indexUpdated The new index of the most recently written element in the oracle array\\n    /// @return cardinalityUpdated The new cardinality of the oracle array\\n    function write(\\n        Observation[65535] storage self,\\n        uint16 index,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity,\\n        uint16 cardinality,\\n        uint16 cardinalityNext\\n    ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\\n        unchecked {\\n            Observation memory last = self[index];\\n\\n            // early return if we've already written an observation this block\\n            if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\\n\\n            // if the conditions are right, we can bump the cardinality\\n            if (cardinalityNext > cardinality && index == (cardinality - 1)) {\\n                cardinalityUpdated = cardinalityNext;\\n            } else {\\n                cardinalityUpdated = cardinality;\\n            }\\n\\n            indexUpdated = (index + 1) % cardinalityUpdated;\\n            self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);\\n        }\\n    }\\n\\n    /// @notice Prepares the oracle array to store up to `next` observations\\n    /// @param self The stored oracle array\\n    /// @param current The current next cardinality of the oracle array\\n    /// @param next The proposed next cardinality which will be populated in the oracle array\\n    /// @return next The next cardinality which will be populated in the oracle array\\n    function grow(\\n        Observation[65535] storage self,\\n        uint16 current,\\n        uint16 next\\n    ) internal returns (uint16) {\\n        unchecked {\\n            if (current <= 0) revert I();\\n            // no-op if the passed next value isn't greater than the current next value\\n            if (next <= current) return current;\\n            // store in each slot to prevent fresh SSTOREs in swaps\\n            // this data will not be used because the initialized boolean is still false\\n            for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\\n            return next;\\n        }\\n    }\\n\\n    /// @notice comparator for 32-bit timestamps\\n    /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time\\n    /// @param time A timestamp truncated to 32 bits\\n    /// @param a A comparison timestamp from which to determine the relative position of `time`\\n    /// @param b From which to determine the relative position of `time`\\n    /// @return Whether `a` is chronologically <= `b`\\n    function lte(\\n        uint32 time,\\n        uint32 a,\\n        uint32 b\\n    ) private pure returns (bool) {\\n        unchecked {\\n            // if there hasn't been overflow, no need to adjust\\n            if (a <= time && b <= time) return a <= b;\\n\\n            uint256 aAdjusted = a > time ? a : a + 2**32;\\n            uint256 bAdjusted = b > time ? b : b + 2**32;\\n\\n            return aAdjusted <= bAdjusted;\\n        }\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\\n    /// The result may be the same observation, or adjacent observations.\\n    /// @dev The answer must be contained in the array, used when the target is located within the stored observation\\n    /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation recorded before, or at, the target\\n    /// @return atOrAfter The observation recorded at, or after, the target\\n    function binarySearch(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        uint16 index,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        unchecked {\\n            uint256 l = (index + 1) % cardinality; // oldest observation\\n            uint256 r = l + cardinality - 1; // newest observation\\n            uint256 i;\\n            while (true) {\\n                i = (l + r) / 2;\\n\\n                beforeOrAt = self[i % cardinality];\\n\\n                // we've landed on an uninitialized tick, keep searching higher (more recently)\\n                if (!beforeOrAt.initialized) {\\n                    l = i + 1;\\n                    continue;\\n                }\\n\\n                atOrAfter = self[(i + 1) % cardinality];\\n\\n                bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);\\n\\n                // check if we've found the answer!\\n                if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;\\n\\n                if (!targetAtOrAfter) r = i - 1;\\n                else l = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\\n    /// @dev Assumes there is at least 1 initialized observation.\\n    /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param tick The active tick at the time of the returned or simulated observation\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The total pool liquidity at the time of the call\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\\n    /// @return atOrAfter The observation which occurred at, or after, the given timestamp\\n    function getSurroundingObservations(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        unchecked {\\n            // optimistically set before to the newest observation\\n            beforeOrAt = self[index];\\n\\n            // if the target is chronologically at or after the newest observation, we can early return\\n            if (lte(time, beforeOrAt.blockTimestamp, target)) {\\n                if (beforeOrAt.blockTimestamp == target) {\\n                    // if newest observation equals target, we're in the same block, so we can ignore atOrAfter\\n                    return (beforeOrAt, atOrAfter);\\n                } else {\\n                    // otherwise, we need to transform\\n                    return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));\\n                }\\n            }\\n\\n            // now, set before to the oldest observation\\n            beforeOrAt = self[(index + 1) % cardinality];\\n            if (!beforeOrAt.initialized) beforeOrAt = self[0];\\n\\n            // ensure that the target is chronologically at or after the oldest observation\\n            if (!lte(time, beforeOrAt.blockTimestamp, target)) revert OLD();\\n\\n            // if we've reached this point, we have to binary search\\n            return binarySearch(self, time, target, index, cardinality);\\n        }\\n    }\\n\\n    /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.\\n    /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\n    /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values\\n    /// at exactly the timestamp between the two observations.\\n    /// @param self The stored oracle array\\n    /// @param time The current block timestamp\\n    /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\n    function observeSingle(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 secondsAgo,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {\\n        unchecked {\\n            if (secondsAgo == 0) {\\n                Observation memory last = self[index];\\n                if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);\\n                return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);\\n            }\\n\\n            uint32 target = time - secondsAgo;\\n\\n            (Observation memory beforeOrAt, Observation memory atOrAfter) = getSurroundingObservations(\\n                self,\\n                time,\\n                target,\\n                tick,\\n                index,\\n                liquidity,\\n                cardinality\\n            );\\n\\n            if (target == beforeOrAt.blockTimestamp) {\\n                // we're at the left boundary\\n                return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);\\n            } else if (target == atOrAfter.blockTimestamp) {\\n                // we're at the right boundary\\n                return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);\\n            } else {\\n                // we're in the middle\\n                uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\\n                uint32 targetDelta = target - beforeOrAt.blockTimestamp;\\n                return (\\n                    beforeOrAt.tickCumulative +\\n                        ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / int56(uint56(observationTimeDelta))) *\\n                        int56(uint56(targetDelta)),\\n                    beforeOrAt.secondsPerLiquidityCumulativeX128 +\\n                        uint160(\\n                            (uint256(\\n                                atOrAfter.secondsPerLiquidityCumulativeX128 -\\n                                    beforeOrAt.secondsPerLiquidityCumulativeX128\\n                            ) * targetDelta) / observationTimeDelta\\n                        )\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\n    /// @dev Reverts if `secondsAgos` > oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\n    function observe(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32[] memory secondsAgos,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) {\\n        unchecked {\\n            if (cardinality <= 0) revert I();\\n\\n            tickCumulatives = new int56[](secondsAgos.length);\\n            secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);\\n            for (uint256 i = 0; i < secondsAgos.length; i++) {\\n                (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(\\n                    self,\\n                    time,\\n                    secondsAgos[i],\\n                    tick,\\n                    index,\\n                    liquidity,\\n                    cardinality\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa25b18af947c36b9add9e229c361beb6aba176fb435d7a24e6dc723cbc187442\",\"license\":\"BUSL-1.1\"},\"solidity/contracts/OracleSidechain.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {Oracle} from '@uniswap/v3-core/contracts/libraries/Oracle.sol';\\nimport {IOracleSidechain, IDataReceiver} from '../interfaces/IOracleSidechain.sol';\\n\\n/// @title A sidechain oracle contract\\n/// @author 0xJabberwock (from DeFi Wonderland)\\n/// @notice Computes on-chain price data from Mainnet\\n/// @dev Bridges Uniswap V3 pool observations\\ncontract OracleSidechain is IOracleSidechain {\\n  using Oracle for Oracle.Observation[65535];\\n\\n  struct Slot0 {\\n    // the most-recently updated index of the observations array\\n    uint16 observationIndex;\\n    // the current maximum number of observations that are being stored\\n    uint16 observationCardinality;\\n    // the next maximum number of observations to store, triggered in observations.write\\n    uint16 observationCardinalityNext;\\n  }\\n  /// @inheritdoc IOracleSidechain\\n  Slot0 public slot0;\\n\\n  /// @inheritdoc IOracleSidechain\\n  int24 public lastTick;\\n\\n  /// @inheritdoc IOracleSidechain\\n  IDataReceiver public dataReceiver;\\n\\n  /// @inheritdoc IOracleSidechain\\n  Oracle.Observation[65535] public observations;\\n\\n  constructor(IDataReceiver _dataReceiver) {\\n    dataReceiver = _dataReceiver;\\n  }\\n\\n  /// @dev Returns the block timestamp truncated to 32 bits, i.e. mod 2**32. This method is overridden in tests.\\n  function _getBlockTimestamp() internal view virtual returns (uint32) {\\n    return uint32(block.timestamp); // truncation is desired\\n  }\\n\\n  /// @inheritdoc IOracleSidechain\\n  function observe(uint32[] calldata _secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory _tickCumulatives, uint160[] memory _secondsPerLiquidityCumulativeX128s)\\n  {\\n    return observations.observe(_getBlockTimestamp(), _secondsAgos, lastTick, slot0.observationIndex, 0, slot0.observationCardinality);\\n  }\\n\\n  // TODO: if not initialized, initialize it --> internalize _initialize\\n  /// @inheritdoc IOracleSidechain\\n  function write(ObservationData[] calldata _observationsData) external returns (bool _written) {\\n    if (IDataReceiver(msg.sender) != dataReceiver) revert OnlyDataReceiver();\\n    Oracle.Observation memory _lastObservation = observations[slot0.observationIndex];\\n    uint256 _observationsDataLength = _observationsData.length;\\n    for (uint256 _i; _i < _observationsDataLength; ++_i) {\\n      if (_lastObservation.blockTimestamp < _observationsData[_i].blockTimestamp) {\\n        _write(_observationsData[_i]);\\n        _written = true;\\n      }\\n    }\\n  }\\n\\n  /// @inheritdoc IOracleSidechain\\n  function increaseObservationCardinalityNext(uint16 _observationCardinalityNext) external {\\n    uint16 _observationCardinalityNextOld = slot0.observationCardinalityNext; // for the event\\n    uint16 _observationCardinalityNextNew = observations.grow(_observationCardinalityNextOld, _observationCardinalityNext);\\n    slot0.observationCardinalityNext = _observationCardinalityNextNew;\\n    if (_observationCardinalityNextOld != _observationCardinalityNextNew)\\n      emit IncreaseObservationCardinalityNext(_observationCardinalityNextOld, _observationCardinalityNextNew);\\n  }\\n\\n  /// @inheritdoc IOracleSidechain\\n  function initialize(ObservationData calldata _observationData) external {\\n    if (slot0.observationCardinality != 0) revert AI();\\n\\n    lastTick = _observationData.tick;\\n\\n    (uint16 _cardinality, uint16 _cardinalityNext) = observations.initialize(_observationData.blockTimestamp);\\n\\n    slot0 = Slot0({observationIndex: 0, observationCardinality: _cardinality, observationCardinalityNext: _cardinalityNext});\\n\\n    emit Initialize(_observationData);\\n  }\\n\\n  function _write(ObservationData calldata _observationData) private {\\n    (uint16 _indexUpdated, uint16 _cardinalityUpdated) = observations.write(\\n      slot0.observationIndex,\\n      _observationData.blockTimestamp,\\n      _observationData.tick,\\n      0,\\n      slot0.observationCardinality,\\n      slot0.observationCardinalityNext\\n    );\\n    (slot0.observationIndex, slot0.observationCardinality) = (_indexUpdated, _cardinalityUpdated);\\n    lastTick = _observationData.tick;\\n    emit ObservationWritten(msg.sender, _observationData);\\n  }\\n}\\n\",\"keccak256\":\"0x688e25bf0dd4b91f6b817332f911b5dbb9a459851568b91ff7cc6da6d6b875a2\",\"license\":\"Unlicense\"},\"solidity/interfaces/IDataReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleSidechain} from '../interfaces/IOracleSidechain.sol';\\nimport {IBridgeReceiverAdapter} from '../interfaces/bridges/IBridgeReceiverAdapter.sol';\\nimport {IGovernable} from './peripherals/IGovernable.sol';\\n\\n/// @title The DataReceiver interface\\n/// @author 0xJabberwock (from DeFi Wonderland)\\n/// @notice Contains state variables, events, custom errors and functions used in DataReceiver\\ninterface IDataReceiver is IGovernable {\\n  // STATE VARIABLES\\n\\n  function oracleSidechain() external view returns (IOracleSidechain _oracleSidechain);\\n\\n  function whitelistedAdapters(IBridgeReceiverAdapter _adapter) external view returns (bool _isAllowed);\\n\\n  // EVENTS\\n\\n  event ObservationsAdded(address _user, IOracleSidechain.ObservationData[] _observationsData);\\n  event AdapterWhitelisted(IBridgeReceiverAdapter _adapter, bool _isAllowed);\\n\\n  // CUSTOM ERRORS\\n\\n  error ObservationsNotWritable();\\n  error UnallowedAdapter();\\n  error LengthMismatch();\\n\\n  // FUNCTIONS\\n\\n  function addObservations(IOracleSidechain.ObservationData[] calldata _observationsData) external;\\n\\n  function whitelistAdapter(IBridgeReceiverAdapter _receiverAdapter, bool _isWhitelisted) external;\\n\\n  function whitelistAdapters(IBridgeReceiverAdapter[] calldata _receiverAdapters, bool[] calldata _isWhitelisted) external;\\n}\\n\",\"keccak256\":\"0x15c116970acf544f1c89dc8e2fd75f7aa7f2e4e86a831cbad30271e6a7e88bec\",\"license\":\"Unlicense\"},\"solidity/interfaces/IOracleSidechain.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IDataReceiver} from './IDataReceiver.sol';\\n\\n/// @title The OracleSidechain interface\\n/// @author 0xJabberwock (from DeFi Wonderland)\\n/// @notice Contains state variables, events, custom errors and functions used in OracleSidechain\\ninterface IOracleSidechain {\\n  // STRUCTS\\n\\n  struct ObservationData {\\n    uint32 blockTimestamp;\\n    int24 tick;\\n  }\\n\\n  // STATE VARIABLES\\n\\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n  /// when accessed externally.\\n  /// @return _observationIndex The index of the last oracle observation that was written,\\n  /// @return _observationCardinality The current maximum number of observations stored in the pool,\\n  /// @return _observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint16 _observationIndex,\\n      uint16 _observationCardinality,\\n      uint16 _observationCardinalityNext\\n    );\\n\\n  function lastTick() external view returns (int24 _lastTick);\\n\\n  //TODO: complete natspec and change for factory when factory is deployed\\n  function dataReceiver() external view returns (IDataReceiver _dataReceiver);\\n\\n  /// @notice Returns data about a specific observation index\\n  /// @param _index The element of the observations array to fetch\\n  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n  /// ago, rather than at a specific index in the array.\\n  /// @return _blockTimestamp The timestamp of the observation,\\n  /// @return _tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n  /// @return _secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n  /// @return _initialized whether the observation has been initialized and the values are safe to use\\n  function observations(uint256 _index)\\n    external\\n    view\\n    returns (\\n      uint32 _blockTimestamp,\\n      int56 _tickCumulative,\\n      uint160 _secondsPerLiquidityCumulativeX128,\\n      bool _initialized\\n    );\\n\\n  // EVENTS\\n\\n  /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n  /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n  /// @param _observationData The timestamp of the observation and the initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n  event Initialize(ObservationData _observationData);\\n\\n  /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n  /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n  /// just before a mint/swap/burn.\\n  /// @param _observationCardinalityNextOld The previous value of the next observation cardinality\\n  /// @param _observationCardinalityNextNew The updated value of the next observation cardinality\\n  event IncreaseObservationCardinalityNext(uint16 _observationCardinalityNextOld, uint16 _observationCardinalityNextNew);\\n\\n  event ObservationWritten(address _user, ObservationData _observationData);\\n\\n  // CUSTOM ERRORS\\n\\n  error AI();\\n  error OnlyDataReceiver();\\n\\n  // FUNCTIONS\\n\\n  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n  /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n  /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n  /// you must call it with secondsAgos = [3600, 0].\\n  /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n  /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n  /// @param _secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n  /// @return _tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n  /// @return _secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n  /// timestamp\\n  function observe(uint32[] calldata _secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory _tickCumulatives, uint160[] memory _secondsPerLiquidityCumulativeX128s);\\n\\n  function write(ObservationData[] calldata _observationsData) external returns (bool _written);\\n\\n  /// @notice Sets the initial price for the pool\\n  /// @param _observationData The timestamp of the observation and the initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n  function initialize(ObservationData calldata _observationData) external;\\n\\n  /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n  /// the input observationCardinalityNext.\\n  /// @param _observationCardinalityNext The desired minimum number of observations for the pool to store\\n  function increaseObservationCardinalityNext(uint16 _observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0xc024c82e56c0ff214ad96019be07357e7348284eb773b342e8f572af27fa8e6a\",\"license\":\"Unlicense\"},\"solidity/interfaces/bridges/IBridgeReceiverAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleSidechain} from '../../interfaces/IOracleSidechain.sol';\\n\\ninterface IBridgeReceiverAdapter {\\n  // FUNCTIONS\\n\\n  function addObservations(IOracleSidechain.ObservationData[] calldata _observationsData) external;\\n}\\n\",\"keccak256\":\"0xc98ddbc64cabf876e0d9fba01231bd5e2c174822ac68a0859e724cb637844652\",\"license\":\"Unlicense\"},\"solidity/interfaces/peripherals/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\n/// @title Governable contract\\n/// @notice Manages the governance role\\ninterface IGovernable {\\n  // Events\\n\\n  /// @notice Emitted when pendingGovernance accepts to be governance\\n  /// @param _governance Address of the new governance\\n  event GovernanceSet(address _governance);\\n\\n  /// @notice Emitted when a new governance is proposed\\n  /// @param _pendingGovernance Address that is proposed to be the new governance\\n  event GovernanceProposal(address _pendingGovernance);\\n\\n  // Errors\\n\\n  /// @notice Throws if the caller of the function is not governance\\n  error OnlyGovernance();\\n\\n  /// @notice Throws if the caller of the function is not pendingGovernance\\n  error OnlyPendingGovernance();\\n\\n  /// @notice Throws if trying to set governance to zero address\\n  error NoGovernanceZeroAddress();\\n\\n  // Variables\\n\\n  /// @notice Stores the governance address\\n  /// @return _governance The governance addresss\\n  function governance() external view returns (address _governance);\\n\\n  /// @notice Stores the pendingGovernance address\\n  /// @return _pendingGovernance The pendingGovernance addresss\\n  function pendingGovernance() external view returns (address _pendingGovernance);\\n\\n  // Methods\\n\\n  /// @notice Proposes a new address to be governance\\n  /// @param _governance The address being proposed as the new governance\\n  function setGovernance(address _governance) external;\\n\\n  /// @notice Changes the governance from the current governance to the previously proposed address\\n  function acceptGovernance() external;\\n}\\n\",\"keccak256\":\"0xf7e6dc04662fb90751f546440cfe3bcf0cd5e854daba774790b872c0566a2930\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161148738038061148783398101604081905261002f9161005e565b600180546001600160a01b039092166301000000026301000000600160b81b031990921691909117905561008e565b60006020828403121561007057600080fd5b81516001600160a01b038116811461008757600080fd5b9392505050565b6113ea8061009d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80633dfa5d871161005b5780633dfa5d871461015f578063883bdbfd1461017f578063ba93b303146101a0578063e8047788146101b357600080fd5b8063252c09d71461008d57806332148f67146100df5780633850c7bd146100f4578063387017651461013c575b600080fd5b6100a061009b3660046110da565b6101e5565b6040805163ffffffff909516855260069390930b60208501526001600160a01b0390911691830191909152151560608201526080015b60405180910390f35b6100f26100ed3660046110f3565b61022a565b005b6000546101179061ffff80821691620100008104821691600160201b9091041683565b6040805161ffff948516815292841660208401529216918101919091526060016100d6565b61014f61014a366004611117565b6102b8565b60405190151581526020016100d6565b60015461016c9060020b81565b60405160029190910b81526020016100d6565b61019261018d36600461118c565b6103e4565b6040516100d69291906111ef565b6100f26101ae366004611276565b61044a565b6001546101cd90630100000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100d6565b60028161ffff81106101f657600080fd5b015463ffffffff81169150600160201b810460060b90600160581b81046001600160a01b031690600160f81b900460ff1684565b60008054600160201b900461ffff16906102466002838561056f565b6000805461ffff808416600160201b810265ffff0000000019909316929092179092559192508316146102b3576040805161ffff8085168252831660208201527fac49e518f90a358f652e4400164f05a5d8f7e35e7747279bc3a93dbf584e125a91015b60405180910390a15b505050565b600154600090630100000090046001600160a01b031633146102ed57604051638e5b30cb60e01b815260040160405180910390fd5b6000805460029061ffff9081169081106103095761030961128e565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b909104161515606082015290508260005b818110156103db578585828181106103795761037961128e565b61038f92602060409092020190810191506112bd565b63ffffffff16836000015163ffffffff1610156103cb576103c68686838181106103bb576103bb61128e565b905060400201610603565b600193505b6103d4816112d8565b905061035f565b50505092915050565b60608061043f428585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250600154815460029796955090870b935061ffff808216935062010000909104166106d9565b915091509250929050565b60005462010000900461ffff16156104755760405163139816ff60e31b815260040160405180910390fd5b6104856040820160208301611313565b6001805462ffffff191662ffffff929092169190911790556000806104ed6104b060208501856112bd565b6040805160808101825263ffffffff9092168083526000602084018190529183019190915260016060909201829052600160f81b17600255908190565b60408051606081018252600080825261ffff85811660208401819052908516928401839052815465ffffffffffff19166201000090910265ffff00000000191617600160201b9092029190911790555191935091507f99f7a0da84f56b0388730fd267e2c99bd71e2b3eefa85cf3f231f8c50f14575b906102aa908590611357565b6000808361ffff161161059557604051636b93000360e11b815260040160405180910390fd5b8261ffff168261ffff16116105ab5750816105fc565b825b8261ffff168161ffff1610156105f7576001858261ffff1661ffff81106105d6576105d661128e565b01805463ffffffff191663ffffffff929092169190911790556001016105ad565b508190505b9392505050565b6000805481906106529061ffff1661061e60208601866112bd565b61062e6040870160208801611313565b600080546002949392919061ffff620100008204811691600160201b900416610824565b6000805463ffffffff19166201000061ffff8481169190910261ffff191691909117908416179055909250905061068f6040840160208501611313565b6001805462ffffff191662ffffff929092169190911790556040517f351cb05bc71b044931f7410e88dceed68c021615a824de572c6cb0a735f50ac4906102aa903390869061136b565b60608060008361ffff161161070157604051636b93000360e11b815260040160405180910390fd5b865167ffffffffffffffff81111561071b5761071b611388565b604051908082528060200260200182016040528015610744578160200160208202803683370190505b509150865167ffffffffffffffff81111561076157610761611388565b60405190808252806020026020018201604052801561078a578160200160208202803683370190505b50905060005b8751811015610817576107c18a8a8a84815181106107b0576107b061128e565b60200260200101518a8a8a8a6109ac565b8483815181106107d3576107d361128e565b602002602001018484815181106107ec576107ec61128e565b6001600160a01b039093166020938402919091019092019190915260069190910b9052600101610790565b5097509795505050505050565b6000806000898961ffff1661ffff81106108405761084061128e565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff1615156060830152909250891614156108a957888592509250506109a0565b8461ffff168461ffff161180156108ca57506001850361ffff168961ffff16145b156108d7578391506108db565b8491505b8161ffff168960010161ffff16816108f5576108f561139e565b06925061090481898989610b54565b8a8461ffff1661ffff811061091b5761091b61128e565b825191018054602084015160408501516060909501511515600160f81b026001600160f81b036001600160a01b03909616600160581b02959095166affffffffffffffffffffff66ffffffffffffff909216600160201b026affffffffffffffffffffff1990931663ffffffff90951694909417919091171691909117919091179055505b97509795505050505050565b60008063ffffffff8716610a52576000898661ffff1661ffff81106109d3576109d361128e565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff16151560608301529092508a1614610a3e57610a3b818a8988610b54565b90505b8060200151816040015192509250506109a0565b868803600080610a678c8c858c8c8c8c610c19565b91509150816000015163ffffffff168363ffffffff161415610a995781602001518260400151945094505050506109a0565b805163ffffffff84811691161415610ac15780602001518160400151945094505050506109a0565b60008260000151826000015103905060008360000151850390508063ffffffff168263ffffffff1660060b856020015185602001510360060b81610b0757610b0761139e565b05028460200151018263ffffffff168263ffffffff1686604001518660400151036001600160a01b03160281610b3f57610b3f61139e565b048560400151019650965050505050506109a0565b604080516080810182526000808252602082018190529181018290526060810191909152600085600001518503905060405180608001604052808663ffffffff1681526020018263ffffffff168660020b0288602001510160060b81526020016000856001600160801b031611610bcc576001610bce565b845b6001600160801b031663ffffffff60801b608085901b1681610bf257610bf261139e565b048860400151016001600160a01b0316815260200160011515815250915050949350505050565b604080516080810182526000808252602082018190529181018290526060810191909152604080516080810182526000808252602082018190529181018290526060810191909152888561ffff1661ffff8110610c7857610c7861128e565b60408051608081018252919092015463ffffffff8116808352600160201b820460060b6020840152600160581b82046001600160a01b031693830193909352600160f81b900460ff16151560608201529250610cd690899089610e31565b15610d0e578663ffffffff16826000015163ffffffff161415610cf8576109a0565b81610d0583898988610b54565b915091506109a0565b888361ffff168660010161ffff1681610d2957610d2961139e565b0661ffff1661ffff8110610d3f57610d3f61128e565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201819052909250610de857604080516080810182528a5463ffffffff81168252600160201b810460060b6020830152600160581b81046001600160a01b031692820192909252600160f81b90910460ff161515606082015291505b610df788836000015189610e31565b610e14576040516327e8e87560e01b815260040160405180910390fd5b610e218989898887610ef2565b9150915097509795505050505050565b60008363ffffffff168363ffffffff1611158015610e5b57508363ffffffff168263ffffffff1611155b15610e77578163ffffffff168363ffffffff16111590506105fc565b60008463ffffffff168463ffffffff1611610e9e578363ffffffff16600160201b01610ea6565b8363ffffffff165b64ffffffffff16905060008563ffffffff168463ffffffff1611610ed6578363ffffffff16600160201b01610ede565b8363ffffffff165b64ffffffffff169091111595945050505050565b60408051608081018252600080825260208201819052918101829052606081019190915260408051608081018252600080825260208201819052918101829052606081019190915260008361ffff168560010161ffff1681610f5657610f5661139e565b0661ffff169050600060018561ffff16830103905060005b506002818301048961ffff87168281610f8957610f8961139e565b0661ffff8110610f9b57610f9b61128e565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201819052909550610fff57806001019250610f6e565b898661ffff1682600101816110165761101661139e565b0661ffff81106110285761102861128e565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b9091041615156060820152855190945060009061108c908b908b610e31565b90508080156110a557506110a58a8a8760000151610e31565b156110b057506110cd565b806110c0576001820392506110c7565b8160010193505b50610f6e565b5050509550959350505050565b6000602082840312156110ec57600080fd5b5035919050565b60006020828403121561110557600080fd5b813561ffff811681146105fc57600080fd5b6000806020838503121561112a57600080fd5b823567ffffffffffffffff8082111561114257600080fd5b818501915085601f83011261115657600080fd5b81358181111561116557600080fd5b8660208260061b850101111561117a57600080fd5b60209290920196919550909350505050565b6000806020838503121561119f57600080fd5b823567ffffffffffffffff808211156111b757600080fd5b818501915085601f8301126111cb57600080fd5b8135818111156111da57600080fd5b8660208260051b850101111561117a57600080fd5b604080825283519082018190526000906020906060840190828701845b8281101561122b57815160060b8452928401929084019060010161120c565b5050508381038285015284518082528583019183019060005b818110156112695783516001600160a01b031683529284019291840191600101611244565b5090979650505050505050565b60006040828403121561128857600080fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b803563ffffffff811681146112b857600080fd5b919050565b6000602082840312156112cf57600080fd5b6105fc826112a4565b60006000198214156112fa57634e487b7160e01b600052601160045260246000fd5b5060010190565b8035600281900b81146112b857600080fd5b60006020828403121561132557600080fd5b6105fc82611301565b63ffffffff61133c826112a4565b16825261134b60208201611301565b60020b60208301525050565b60408101611365828461132e565b92915050565b6001600160a01b0383168152606081016105fc602083018461132e565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212205e1a93f8fd92cc26c8310996e469d0e47bc405e67a00b22e80843ce122493de364736f6c634300080c0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "0xJabberwock (from DeFi Wonderland)",
    "details": "Bridges Uniswap V3 pool observations",
    "kind": "dev",
    "methods": {
      "increaseObservationCardinalityNext(uint16)": {
        "details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
        "params": {
          "_observationCardinalityNext": "The desired minimum number of observations for the pool to store"
        }
      },
      "initialize((uint32,int24))": {
        "params": {
          "_observationData": "The timestamp of the observation and the initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
        }
      },
      "observe(uint32[])": {
        "details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
        "params": {
          "_secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
        },
        "returns": {
          "_secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
          "_tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
        }
      }
    },
    "stateVariables": {
      "observations": {
        "details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
        "params": {
          "_index": "The element of the observations array to fetch"
        },
        "returns": {
          "blockTimestamp": "The timestamp of the observation,",
          "initialized": "whether the observation has been initialized and the values are safe to use",
          "secondsPerLiquidityCumulativeX128": "the seconds per in range liquidity for the life of the pool as of the observation timestamp,",
          "tickCumulative": "the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,"
        }
      },
      "slot0": {
        "returns": {
          "observationCardinality": "The current maximum number of observations stored in the pool,",
          "observationCardinalityNext": "The next maximum number of observations, to be updated when the observation.",
          "observationIndex": "The index of the last oracle observation that was written,"
        }
      }
    },
    "title": "A sidechain oracle contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "IncreaseObservationCardinalityNext(uint16,uint16)": {
        "notice": "Emitted by the pool for increases to the number of observations that can be stored"
      },
      "Initialize((uint32,int24))": {
        "notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
      }
    },
    "kind": "user",
    "methods": {
      "increaseObservationCardinalityNext(uint16)": {
        "notice": "Increase the maximum number of price and liquidity observations that this pool will store"
      },
      "initialize((uint32,int24))": {
        "notice": "Sets the initial price for the pool"
      },
      "observations(uint256)": {
        "notice": "Returns data about a specific observation index"
      },
      "observe(uint32[])": {
        "notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
      },
      "slot0()": {
        "notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
      }
    },
    "notice": "Computes on-chain price data from Mainnet",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9546,
        "contract": "solidity/contracts/OracleSidechain.sol:OracleSidechain",
        "label": "slot0",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Slot0)9542_storage"
      },
      {
        "astId": 9549,
        "contract": "solidity/contracts/OracleSidechain.sol:OracleSidechain",
        "label": "lastTick",
        "offset": 0,
        "slot": "1",
        "type": "t_int24"
      },
      {
        "astId": 9553,
        "contract": "solidity/contracts/OracleSidechain.sol:OracleSidechain",
        "label": "dataReceiver",
        "offset": 3,
        "slot": "1",
        "type": "t_contract(IDataReceiver)10204"
      },
      {
        "astId": 9559,
        "contract": "solidity/contracts/OracleSidechain.sol:OracleSidechain",
        "label": "observations",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Observation)8584_storage)65535_storage"
      }
    ],
    "types": {
      "t_array(t_struct(Observation)8584_storage)65535_storage": {
        "base": "t_struct(Observation)8584_storage",
        "encoding": "inplace",
        "label": "struct Oracle.Observation[65535]",
        "numberOfBytes": "2097120"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDataReceiver)10204": {
        "encoding": "inplace",
        "label": "contract IDataReceiver",
        "numberOfBytes": "20"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_int56": {
        "encoding": "inplace",
        "label": "int56",
        "numberOfBytes": "7"
      },
      "t_struct(Observation)8584_storage": {
        "encoding": "inplace",
        "label": "struct Oracle.Observation",
        "members": [
          {
            "astId": 8577,
            "contract": "solidity/contracts/OracleSidechain.sol:OracleSidechain",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8579,
            "contract": "solidity/contracts/OracleSidechain.sol:OracleSidechain",
            "label": "tickCumulative",
            "offset": 4,
            "slot": "0",
            "type": "t_int56"
          },
          {
            "astId": 8581,
            "contract": "solidity/contracts/OracleSidechain.sol:OracleSidechain",
            "label": "secondsPerLiquidityCumulativeX128",
            "offset": 11,
            "slot": "0",
            "type": "t_uint160"
          },
          {
            "astId": 8583,
            "contract": "solidity/contracts/OracleSidechain.sol:OracleSidechain",
            "label": "initialized",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Slot0)9542_storage": {
        "encoding": "inplace",
        "label": "struct OracleSidechain.Slot0",
        "members": [
          {
            "astId": 9537,
            "contract": "solidity/contracts/OracleSidechain.sol:OracleSidechain",
            "label": "observationIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 9539,
            "contract": "solidity/contracts/OracleSidechain.sol:OracleSidechain",
            "label": "observationCardinality",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 9541,
            "contract": "solidity/contracts/OracleSidechain.sol:OracleSidechain",
            "label": "observationCardinalityNext",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}