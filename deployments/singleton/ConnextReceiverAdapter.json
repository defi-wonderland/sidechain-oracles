{
  "address": "0xD5b62b8652EE922Ef6AF32C75f5E218D689F0B72",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDataReceiver",
          "name": "_dataReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "UnauthorizedCaller",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "int24",
              "name": "tick",
              "type": "int24"
            }
          ],
          "indexed": false,
          "internalType": "struct IOracleSidechain.ObservationData[]",
          "name": "_observationsData",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_poolSalt",
          "type": "bytes32"
        }
      ],
      "name": "DataSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataReceiver",
      "outputs": [
        {
          "internalType": "contract IDataReceiver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "origin",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_originSender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "xReceive",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x97a849f12f12109cb429c2049bc4437a8b14e210e2bfb0a4b626c2f8c4915c00",
  "receipt": {
    "to": null,
    "from": "0x57B067e4E27558FE2c60fCE86941011cB5F5A4FD",
    "contractAddress": "0xD5b62b8652EE922Ef6AF32C75f5E218D689F0B72",
    "transactionIndex": 2,
    "gasUsed": "455367",
    "logsBloom": "0x
    "blockHash": "0x4cfdb224b09ddf1150a2c1e8629cb862a7283061fb3c205e0dab2d21b6870265",
    "transactionHash": "0x97a849f12f12109cb429c2049bc4437a8b14e210e2bfb0a4b626c2f8c4915c00",
    "logs": [],
    "blockNumber": 7756410,
    "cumulativeGasUsed": "837402",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0258eFbFC9B7cE9E4DD5CBc4a09EFd52699f3F06",
    "0x24707164c7E0a7974041c759F8D531cEe78A86C6",
    3331,
    "0x6F9F801CeE214Cf6dCf216Cc0FFEC3D908f15A12"
  ],
  "numDeployments": 1,
  "solcInputHash": "4a314a55a0c547808cc40f9921cdbcf5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDataReceiver\",\"name\":\"_dataReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"indexed\":false,\"internalType\":\"struct IOracleSidechain.ObservationData[]\",\"name\":\"_observationsData\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_poolSalt\",\"type\":\"bytes32\"}],\"name\":\"DataSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataReceiver\",\"outputs\":[{\"internalType\":\"contract IDataReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_originSender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"xReceive\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/bridges/ConnextReceiverAdapter.sol\":\"ConnextReceiverAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@connext/nxtp-contracts/contracts/core/connext/interfaces/IXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\ninterface IXReceiver {\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x75286f6ac1b1d5d7f4e508a478c0dad3a26d92675dabbf180d0b46d892618a1a\",\"license\":\"UNLICENSED\"},\"solidity/contracts/bridges/ConnextReceiverAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IXReceiver} from '@connext/nxtp-contracts/contracts/core/connext/interfaces/IXReceiver.sol';\\nimport {IConnextReceiverAdapter, IDataReceiver, IOracleSidechain} from '../../interfaces/bridges/IConnextReceiverAdapter.sol';\\n\\ncontract ConnextReceiverAdapter is IXReceiver, IConnextReceiverAdapter {\\n  /// @inheritdoc IConnextReceiverAdapter\\n  IDataReceiver public immutable dataReceiver;\\n\\n  // The connectHandler contract on this domain\\n  address public connext;\\n  // The origin domain ID\\n  uint32 public immutable origin;\\n  // The DAO that's expected as the xcaller\\n  address public immutable dao;\\n\\n  constructor(\\n    IDataReceiver _dataReceiver,\\n    address _dao,\\n    uint32 _origin,\\n    address _connext\\n  ) {\\n    dataReceiver = _dataReceiver;\\n    dao = _dao;\\n    origin = _origin;\\n    connext = address(_connext);\\n  }\\n\\n  // TODO: move to common Adapter contract\\n  function _addObservations(\\n    IOracleSidechain.ObservationData[] memory _observationsData,\\n    bytes32 _poolSalt,\\n    uint24 _poolNonce\\n  ) internal {\\n    dataReceiver.addObservations(_observationsData, _poolSalt, _poolNonce);\\n    emit DataSent(_observationsData, _poolSalt); // TODO: review event emission\\n  }\\n\\n  modifier onlyExecutor(address _originSender, uint32 _origin) {\\n    if (\\n      msg.sender != connext ||\\n      _originSender != dao ||\\n      _origin != origin\\n    ) revert UnauthorizedCaller();\\n    _;\\n  }\\n\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external onlyExecutor(_originSender, _origin) returns (bytes memory) {\\n    (IOracleSidechain.ObservationData[] memory _observationsData, bytes32 _poolSalt, uint24 _poolNonce) = abi.decode(\\n      _callData,\\n      (IOracleSidechain.ObservationData[], bytes32, uint24)\\n    );\\n\\n    _addObservations(_observationsData, _poolSalt, _poolNonce);\\n    return bytes(abi.encode('random'));\\n  }\\n}\\n\",\"keccak256\":\"0xbd9df9b2273a51b47dd6f802e826df6da4758592a1112ced8095772de88feceb\",\"license\":\"Unlicense\"},\"solidity/interfaces/IDataReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleFactory} from './IOracleFactory.sol';\\nimport {IOracleSidechain} from './IOracleSidechain.sol';\\nimport {IBridgeReceiverAdapter} from './bridges/IBridgeReceiverAdapter.sol';\\nimport {IGovernable} from './peripherals/IGovernable.sol';\\n\\n/// @title The DataReceiver interface\\n/// @author 0xJabberwock (from DeFi Wonderland)\\n/// @notice Contains state variables, events, custom errors and functions used in DataReceiver\\ninterface IDataReceiver is IGovernable {\\n  // STATE VARIABLES\\n\\n  function oracleFactory() external view returns (IOracleFactory _oracleFactory);\\n\\n  //solhint-disable-next-line func-name-mixedcase\\n  function ORACLE_INIT_CODE_HASH() external view returns (bytes32 _oracleInitCodeHash);\\n\\n  function whitelistedAdapters(IBridgeReceiverAdapter _adapter) external view returns (bool _isAllowed);\\n\\n  // EVENTS\\n\\n  event ObservationsAdded(address _user, IOracleSidechain.ObservationData[] _observationsData);\\n\\n  event AdapterWhitelisted(IBridgeReceiverAdapter _adapter, bool _isAllowed);\\n\\n  // ERRORS\\n\\n  error ObservationsNotWritable();\\n\\n  error UnallowedAdapter();\\n\\n  error LengthMismatch();\\n\\n  // FUNCTIONS\\n\\n  function addObservations(\\n    IOracleSidechain.ObservationData[] memory _observationsData,\\n    bytes32 _poolSalt,\\n    uint24 _poolNonce\\n  ) external;\\n\\n  function whitelistAdapter(IBridgeReceiverAdapter _receiverAdapter, bool _isWhitelisted) external;\\n\\n  function whitelistAdapters(IBridgeReceiverAdapter[] calldata _receiverAdapters, bool[] calldata _isWhitelisted) external;\\n}\\n\",\"keccak256\":\"0x4f552a143960a51478853098fa323f20f9bffa6edeb4f3307fad9ac2baa7e527\",\"license\":\"Unlicense\"},\"solidity/interfaces/IOracleFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleSidechain} from './IOracleSidechain.sol';\\nimport {IDataReceiver} from './IDataReceiver.sol';\\nimport {IGovernable} from './peripherals/IGovernable.sol';\\n\\ninterface IOracleFactory is IGovernable {\\n  // STRUCTS\\n\\n  struct OracleParameters {\\n    IOracleFactory factory;\\n    bytes32 poolSalt;\\n    uint24 poolNonce;\\n    uint16 cardinality;\\n  }\\n\\n  // STATE VARIABLES\\n\\n  function dataReceiver() external view returns (IDataReceiver _dataReceiver);\\n\\n  /// @return _factory The address of the deployer factory\\n  /// @return _poolSalt The id of both the oracle and the pool\\n  /// @return _poolNonce The initial nonce of the pool data\\n  /// @return _cardinality The size of the observations memory storage\\n  function oracleParameters()\\n    external\\n    view\\n    returns (\\n      IOracleFactory _factory,\\n      bytes32 _poolSalt,\\n      uint24 _poolNonce,\\n      uint16 _cardinality\\n    );\\n\\n  /// @return _initialCardinality The initial size of the observations memory storage for newly deployed pools\\n  function initialCardinality() external view returns (uint16 _initialCardinality);\\n\\n  // EVENTS\\n\\n  event OracleDeployed(address _oracle, bytes32 _poolSalt, uint16 _cardinality);\\n  event DataReceiverSet(IDataReceiver _dataReceiver);\\n\\n  event InitialCardinalitySet(uint16 _initialCardinality);\\n\\n  // ERRORS\\n\\n  error OnlyDataReceiver();\\n\\n  // VIEWS\\n\\n  /// @notice Overrides UniV3Factory getPool mapping\\n  /// @param _tokenA The contract address of either token0 or token1\\n  /// @param _tokenB The contract address of the other token\\n  /// @param _fee The fee denominated in hundredths of a bip\\n  /// @return _oracle The oracle address\\n  function getPool(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) external view returns (address _oracle);\\n\\n  /// @param _tokenA The contract address of either token0 or token1\\n  /// @param _tokenB The contract address of the other token\\n  /// @param _fee The fee denominated in hundredths of a bip\\n  /// @return _poolSalt Pool salt for inquired parameters\\n  function getPoolSalt(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) external view returns (bytes32 _poolSalt);\\n\\n  // FUNCTIONS\\n\\n  /// @notice Deploys a new oracle given an inputted salt\\n  /// @dev Requires that the salt has not been deployed before\\n  /// @param _poolSalt Pool salt that deterministically binds an oracle with a pool\\n  /// @return _deployedOracle The address of the newly deployed oracle\\n  function deployOracle(bytes32 _poolSalt, uint24 _poolNonce) external returns (address _deployedOracle);\\n\\n  /// @notice Allows governor to set a new allowed dataReceiver\\n  /// @dev Will disallow the previous dataReceiver\\n  /// @param _dataReceiver The address of the new allowed dataReceiver\\n  function setDataReceiver(IDataReceiver _dataReceiver) external;\\n\\n  /// @notice Allows governor to set a new initial cardinality for new oracles\\n  /// @param _initialCardinality The initial size of the observations memory storage for newly deployed pools\\n  function setInitialCardinality(uint16 _initialCardinality) external;\\n}\\n\",\"keccak256\":\"0xca2a4e0a0178e408f308a07a3d255019b8ac06f961f1a7b9d781779d0d5158e4\",\"license\":\"Unlicense\"},\"solidity/interfaces/IOracleSidechain.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleFactory} from './IOracleFactory.sol';\\n\\n/// @title The OracleSidechain interface\\n/// @author 0xJabberwock (from DeFi Wonderland)\\n/// @notice Contains state variables, events, custom errors and functions used in OracleSidechain\\ninterface IOracleSidechain {\\n  // STRUCTS\\n\\n  struct ObservationData {\\n    uint32 blockTimestamp;\\n    int24 tick;\\n  }\\n\\n  // STATE VARIABLES\\n\\n  // TODO: complete natspec\\n\\n  function factory() external view returns (IOracleFactory _oracleFactory);\\n\\n  function token0() external view returns (address _token0);\\n\\n  function token1() external view returns (address _token1);\\n\\n  function fee() external view returns (uint24 _fee);\\n\\n  function poolSalt() external view returns (bytes32 _poolSalt);\\n\\n  function poolNonce() external view returns (uint24 _poolNonce);\\n\\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n  /// when accessed externally.\\n  /// @return _sqrtPriceX96 Used to maintain compatibility with Uniswap V3\\n  /// @return _tick Used to maintain compatibility with Uniswap V3\\n  /// @return _observationIndex The index of the last oracle observation that was written,\\n  /// @return _observationCardinality The current maximum number of observations stored in the pool,\\n  /// @return _observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n  /// @return _feeProtocol Used to maintain compatibility with Uniswap V3\\n  /// @return _unlocked Used to maintain compatibility with Uniswap V3\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint160 _sqrtPriceX96,\\n      int24 _tick,\\n      uint16 _observationIndex,\\n      uint16 _observationCardinality,\\n      uint16 _observationCardinalityNext,\\n      uint8 _feeProtocol,\\n      bool _unlocked\\n    );\\n\\n  /// @notice Returns data about a specific observation index\\n  /// @param _index The element of the observations array to fetch\\n  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n  /// ago, rather than at a specific index in the array.\\n  /// @return _blockTimestamp The timestamp of the observation,\\n  /// @return _tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n  /// @return _secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n  /// @return _initialized whether the observation has been initialized and the values are safe to use\\n  function observations(uint256 _index)\\n    external\\n    view\\n    returns (\\n      uint32 _blockTimestamp,\\n      int56 _tickCumulative,\\n      uint160 _secondsPerLiquidityCumulativeX128,\\n      bool _initialized\\n    );\\n\\n  // EVENTS\\n\\n  event PoolInfoInitialized(bytes32 _poolSalt, address _token0, address _token1, uint24 _fee);\\n  event ObservationWritten(address _user, ObservationData _observationData);\\n\\n  // ERRORS\\n\\n  error AI();\\n  error InvalidPool();\\n  error OnlyDataReceiver();\\n\\n  // FUNCTIONS\\n\\n  function initializePoolInfo(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) external;\\n\\n  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n  /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n  /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n  /// you must call it with secondsAgos = [3600, 0].\\n  /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n  /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n  /// @param _secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n  /// @return _tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n  /// @return _secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n  /// timestamp\\n  function observe(uint32[] calldata _secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory _tickCumulatives, uint160[] memory _secondsPerLiquidityCumulativeX128s);\\n\\n  function write(ObservationData[] memory _observationsData, uint24 _poolNonce) external returns (bool _written);\\n}\\n\",\"keccak256\":\"0xc6bc070321f7e322a0b6723665365d06c19d73180ea3f2665cfd1cb39426bcdb\",\"license\":\"Unlicense\"},\"solidity/interfaces/bridges/IBridgeReceiverAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleSidechain} from '../IOracleSidechain.sol';\\n\\ninterface IBridgeReceiverAdapter {\\n  // FUNCTIONS\\n\\n  /* NOTE: callback methods should be here declared */\\n\\n  // EVENTS\\n\\n  event DataSent(IOracleSidechain.ObservationData[] _observationsData, bytes32 _poolSalt);\\n\\n  // ERRORS\\n\\n  error UnauthorizedCaller();\\n}\\n\",\"keccak256\":\"0xda1db0115aac40bc810d0abce5f89f57735568ff2ece7e75046e0ebd3e27964c\",\"license\":\"Unlicense\"},\"solidity/interfaces/bridges/IConnextReceiverAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IBridgeReceiverAdapter, IOracleSidechain} from './IBridgeReceiverAdapter.sol';\\nimport {IDataReceiver} from '../IDataReceiver.sol';\\n\\ninterface IConnextReceiverAdapter is IBridgeReceiverAdapter {\\n  // STATE VARIABLES\\n\\n  function dataReceiver() external view returns (IDataReceiver _dataReceiver);\\n\\n  function dao() external view returns (address _originContract);\\n\\n  function origin() external view returns (uint32 _originDomain);\\n\\n  // connext()\\n}\\n\",\"keccak256\":\"0x8d91ab8834c68c31f22dbf8e28eb7aa21c2b8265d887af6ad3fa317f958c1339\",\"license\":\"Unlicense\"},\"solidity/interfaces/peripherals/IGovernable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\ninterface IGovernable {\\n  // STATE VARIABLES\\n\\n  /// @return _governor Address of the current governor\\n  function governor() external view returns (address _governor);\\n\\n  /// @return _pendingGovernor Address of the current pending governor\\n  function pendingGovernor() external view returns (address _pendingGovernor);\\n\\n  // EVENTS\\n\\n  /// @notice Emitted when a new pending governor is set\\n  /// @param _governor Address of the current governor\\n  /// @param _pendingGovernor Address of the proposed next governor\\n  event PendingGovernorSet(address _governor, address _pendingGovernor);\\n\\n  /// @notice Emitted when a new governor is set\\n  /// @param _newGovernor Address of the new governor\\n  event PendingGovernorAccepted(address _newGovernor);\\n\\n  // ERRORS\\n\\n  /// @notice Throws if a variable is assigned to the zero address\\n  error ZeroAddress();\\n\\n  /// @notice Throws if a non-governor user tries to call a OnlyGovernor function\\n  error OnlyGovernor();\\n\\n  /// @notice Throws if a non-pending-governor user tries to call a OnlyPendingGovernor function\\n  error OnlyPendingGovernor();\\n\\n  // FUNCTIONS\\n\\n  /// @notice Allows a governor to propose a new governor\\n  /// @param _pendingGovernor Address of the proposed new governor\\n  function setPendingGovernor(address _pendingGovernor) external;\\n\\n  /// @notice Allows a proposed governor to accept the governance\\n  function acceptPendingGovernor() external;\\n}\\n\",\"keccak256\":\"0xcbd9ae88cf32e1f7005a6ca222b76a357388953ccc05747ed694b28a4f89e306\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516107f63803806107f683398101604081905261002f9161007e565b6001600160a01b0393841660805291831660c05263ffffffff1660a052600080546001600160a01b031916919092161790556100e6565b6001600160a01b038116811461007b57600080fd5b50565b6000806000806080858703121561009457600080fd5b845161009f81610066565b60208601519094506100b081610066565b604086015190935063ffffffff811681146100ca57600080fd5b60608601519092506100db81610066565b939692955090935050565b60805160a05160c0516106cf610127600039600081816061015261015401526000818160a5015261019101526000818160f4015261026901526106cf6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634162169f1461005c578063938b5f32146100a0578063de4b0548146100dc578063e8047788146100ef578063fd614f4114610116575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c77f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610097565b600054610083906001600160a01b031681565b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6101296101243660046103b3565b610136565b604051610097919061048e565b600054606090849084906001600160a01b03163314158061018957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b806101c057507f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff1614155b156101de57604051635c427cd960e01b815260040160405180910390fd5b6000806000868060200190518101906101f791906104f6565b925092509250610208838383610252565b6040516020016102329060208082526006908201526572616e646f6d60d01b604082015260600190565b604051602081830303815290604052955050505050509695505050505050565b60405163d34ad40960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d34ad409906102a290869086908690600401610649565b600060405180830381600087803b1580156102bc57600080fd5b505af11580156102d0573d6000803e3d6000fd5b505050507fc04b786bc493bbc02eb30560b488bedd65e6b331239e8effe92ea7e915c2e3b28383604051610305929190610677565b60405180910390a1505050565b80356001600160a01b038116811461032957600080fd5b919050565b63ffffffff8116811461034057600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561037c5761037c610343565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156103ab576103ab610343565b604052919050565b60008060008060008060c087890312156103cc57600080fd5b8635955060208088013595506103e460408901610312565b94506103f260608901610312565b935060808801356104028161032e565b925060a088013567ffffffffffffffff8082111561041f57600080fd5b818a0191508a601f83011261043357600080fd5b81358181111561044557610445610343565b610457601f8201601f19168501610382565b91508082528b8482850101111561046d57600080fd5b80848401858401376000848284010152508093505050509295509295509295565b600060208083528351808285015260005b818110156104bb5785810183015185820160400152820161049f565b818111156104cd576000604083870101525b50601f01601f1916929092016040019392505050565b805162ffffff8116811461032957600080fd5b60008060006060848603121561050b57600080fd5b835167ffffffffffffffff8082111561052357600080fd5b818601915086601f83011261053757600080fd5b815160208282111561054b5761054b610343565b610559818360051b01610382565b828152818101935060069290921b84018101918983111561057957600080fd5b938101935b828510156105d7576040858b0312156105975760008081fd5b61059f610359565b85516105aa8161032e565b815285830151600281900b81146105c15760008081fd5b818401528452604094909401939281019261057e565b80975050808801519550505050506105f1604085016104e3565b90509250925092565b600081518084526020808501945080840160005b8381101561063e578151805163ffffffff16885283015160020b838801526040909601959082019060010161060e565b509495945050505050565b60608152600061065c60608301866105fa565b905083602083015262ffffff83166040830152949350505050565b60408152600061068a60408301856105fa565b9050826020830152939250505056fea2646970667358221220178b2c77574ab569982037017a7ecf2867b7f50c96e34e336a91a755374e319764736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80634162169f1461005c578063938b5f32146100a0578063de4b0548146100dc578063e8047788146100ef578063fd614f4114610116575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c77f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610097565b600054610083906001600160a01b031681565b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6101296101243660046103b3565b610136565b604051610097919061048e565b600054606090849084906001600160a01b03163314158061018957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b806101c057507f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff1614155b156101de57604051635c427cd960e01b815260040160405180910390fd5b6000806000868060200190518101906101f791906104f6565b925092509250610208838383610252565b6040516020016102329060208082526006908201526572616e646f6d60d01b604082015260600190565b604051602081830303815290604052955050505050509695505050505050565b60405163d34ad40960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d34ad409906102a290869086908690600401610649565b600060405180830381600087803b1580156102bc57600080fd5b505af11580156102d0573d6000803e3d6000fd5b505050507fc04b786bc493bbc02eb30560b488bedd65e6b331239e8effe92ea7e915c2e3b28383604051610305929190610677565b60405180910390a1505050565b80356001600160a01b038116811461032957600080fd5b919050565b63ffffffff8116811461034057600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561037c5761037c610343565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156103ab576103ab610343565b604052919050565b60008060008060008060c087890312156103cc57600080fd5b8635955060208088013595506103e460408901610312565b94506103f260608901610312565b935060808801356104028161032e565b925060a088013567ffffffffffffffff8082111561041f57600080fd5b818a0191508a601f83011261043357600080fd5b81358181111561044557610445610343565b610457601f8201601f19168501610382565b91508082528b8482850101111561046d57600080fd5b80848401858401376000848284010152508093505050509295509295509295565b600060208083528351808285015260005b818110156104bb5785810183015185820160400152820161049f565b818111156104cd576000604083870101525b50601f01601f1916929092016040019392505050565b805162ffffff8116811461032957600080fd5b60008060006060848603121561050b57600080fd5b835167ffffffffffffffff8082111561052357600080fd5b818601915086601f83011261053757600080fd5b815160208282111561054b5761054b610343565b610559818360051b01610382565b828152818101935060069290921b84018101918983111561057957600080fd5b938101935b828510156105d7576040858b0312156105975760008081fd5b61059f610359565b85516105aa8161032e565b815285830151600281900b81146105c15760008081fd5b818401528452604094909401939281019261057e565b80975050808801519550505050506105f1604085016104e3565b90509250925092565b600081518084526020808501945080840160005b8381101561063e578151805163ffffffff16885283015160020b838801526040909601959082019060010161060e565b509495945050505050565b60608152600061065c60608301866105fa565b905083602083015262ffffff83166040830152949350505050565b60408152600061068a60408301856105fa565b9050826020830152939250505056fea2646970667358221220178b2c77574ab569982037017a7ecf2867b7f50c96e34e336a91a755374e319764736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 37,
        "contract": "solidity/contracts/bridges/ConnextReceiverAdapter.sol:ConnextReceiverAdapter",
        "label": "connext",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}