{
  "address": "0x82262c47F140c0C3215C9e3C50971166050bdEA5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "contract IDataReceiver",
          "name": "_dataReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OnlyDataReceiver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPendingGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IDataReceiver",
          "name": "_dataReceiver",
          "type": "address"
        }
      ],
      "name": "DataReceiverSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_initialCardinality",
          "type": "uint16"
        }
      ],
      "name": "InitialCardinalitySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_poolSalt",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_cardinality",
          "type": "uint16"
        }
      ],
      "name": "OracleDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataReceiver",
      "outputs": [
        {
          "internalType": "contract IDataReceiver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_poolSalt",
          "type": "bytes32"
        },
        {
          "internalType": "uint24",
          "name": "_initialNonce",
          "type": "uint24"
        }
      ],
      "name": "deployOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "_deployedOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_fee",
          "type": "uint24"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_fee",
          "type": "uint24"
        }
      ],
      "name": "getPoolSalt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_poolSalt",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialCardinality",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleParameters",
      "outputs": [
        {
          "internalType": "contract IOracleFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "poolSalt",
          "type": "bytes32"
        },
        {
          "internalType": "uint24",
          "name": "poolNonce",
          "type": "uint24"
        },
        {
          "internalType": "uint16",
          "name": "cardinality",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDataReceiver",
          "name": "_dataReceiver",
          "type": "address"
        }
      ],
      "name": "setDataReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_initialCardinality",
          "type": "uint16"
        }
      ],
      "name": "setInitialCardinality",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "setPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb42fbdacb3773e97cf67b2a46176b6288b77279b84a6b99710cd7846243cba64",
  "receipt": {
    "to": null,
    "from": "0x57B067e4E27558FE2c60fCE86941011cB5F5A4FD",
    "contractAddress": "0x82262c47F140c0C3215C9e3C50971166050bdEA5",
    "transactionIndex": 47,
    "gasUsed": "1908921",
    "logsBloom": "0x
    "blockHash": "0xc6093fdfdd4226ba06bd0518c562a4af01bf5f62bba991a4cb8a23450d5d1d74",
    "transactionHash": "0xb42fbdacb3773e97cf67b2a46176b6288b77279b84a6b99710cd7846243cba64",
    "logs": [],
    "blockNumber": 7712436,
    "cumulativeGasUsed": "13178866",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x57B067e4E27558FE2c60fCE86941011cB5F5A4FD",
    "0x5078e97E611B759E861808aBdD489BaAc66327ea"
  ],
  "numDeployments": 1,
  "solcInputHash": "e8ea8a5b7fc8e666124daef71b3490f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"contract IDataReceiver\",\"name\":\"_dataReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlyDataReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPendingGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IDataReceiver\",\"name\":\"_dataReceiver\",\"type\":\"address\"}],\"name\":\"DataReceiverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_initialCardinality\",\"type\":\"uint16\"}],\"name\":\"InitialCardinalitySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_poolSalt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_cardinality\",\"type\":\"uint16\"}],\"name\":\"OracleDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataReceiver\",\"outputs\":[{\"internalType\":\"contract IDataReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_poolSalt\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"_initialNonce\",\"type\":\"uint24\"}],\"name\":\"deployOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_deployedOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"getPoolSalt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_poolSalt\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialCardinality\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleParameters\",\"outputs\":[{\"internalType\":\"contract IOracleFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolSalt\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"poolNonce\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"cardinality\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDataReceiver\",\"name\":\"_dataReceiver\",\"type\":\"address\"}],\"name\":\"setDataReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_initialCardinality\",\"type\":\"uint16\"}],\"name\":\"setInitialCardinality\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPool(address,address,uint24)\":{\"params\":{\"_fee\":\"The fee denominated in hundredths of a bip\",\"_tokenA\":\"The contract address of either token0 or token1\",\"_tokenB\":\"The contract address of the other token\"},\"returns\":{\"_oracle\":\"The oracle address\"}},\"getPoolSalt(address,address,uint24)\":{\"params\":{\"_fee\":\"The fee denominated in hundredths of a bip\",\"_tokenA\":\"The contract address of either token0 or token1\",\"_tokenB\":\"The contract address of the other token\"},\"returns\":{\"_poolSalt\":\"Pool salt for inquired parameters\"}},\"setDataReceiver(address)\":{\"details\":\"Will disallow the previous dataReceiver\",\"params\":{\"_dataReceiver\":\"The address of the new allowed dataReceiver\"}},\"setInitialCardinality(uint16)\":{\"params\":{\"_initialCardinality\":\"The initial size of the observations memory storage for newly deployed pools\"}},\"setPendingGovernor(address)\":{\"params\":{\"_pendingGovernor\":\"Address of the proposed new governor\"}}},\"stateVariables\":{\"initialCardinality\":{\"return\":\"The initial size of the observations memory storage for newly deployed pools\",\"returns\":{\"_0\":\"The initial size of the observations memory storage for newly deployed pools\"}},\"oracleParameters\":{\"returns\":{\"cardinality\":\"The size of the observations memory storage\",\"factory\":\"The address of the deployer factory\",\"poolNonce\":\"The initial nonce of the pool data\",\"poolSalt\":\"The id of both the oracle and the pool\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"OnlyGovernor()\":[{\"notice\":\"Throws if a non-governor user tries to call a OnlyGovernor function\"}],\"OnlyPendingGovernor()\":[{\"notice\":\"Throws if a non-pending-governor user tries to call a OnlyPendingGovernor function\"}],\"ZeroAddress()\":[{\"notice\":\"Throws if a variable is assigned to the zero address\"}]},\"events\":{\"PendingGovernorAccepted(address)\":{\"notice\":\"Emitted when a new governor is set\"},\"PendingGovernorSet(address,address)\":{\"notice\":\"Emitted when a new pending governor is set\"}},\"kind\":\"user\",\"methods\":{\"acceptPendingGovernor()\":{\"notice\":\"Allows a proposed governor to accept the governance\"},\"getPool(address,address,uint24)\":{\"notice\":\"Overrides UniV3Factory getPool mapping\"},\"setDataReceiver(address)\":{\"notice\":\"Allows governor to set a new allowed dataReceiver\"},\"setInitialCardinality(uint16)\":{\"notice\":\"Allows governor to set a new initial cardinality for new oracles\"},\"setPendingGovernor(address)\":{\"notice\":\"Allows a governor to propose a new governor\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/OracleFactory.sol\":\"OracleFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/// @title Oracle\\n/// @notice Provides price and liquidity data useful for a wide variety of system designs\\n/// @dev Instances of stored oracle data, \\\"observations\\\", are collected in the oracle array\\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\\n/// Observations are overwritten when the full length of the oracle array is populated.\\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\\nlibrary Oracle {\\n    error I();\\n    error OLD();\\n\\n    struct Observation {\\n        // the block timestamp of the observation\\n        uint32 blockTimestamp;\\n        // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\\n        int56 tickCumulative;\\n        // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        // whether or not the observation is initialized\\n        bool initialized;\\n    }\\n\\n    /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values\\n    /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\\n    /// @param last The specified observation to be transformed\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @return Observation The newly populated observation\\n    function transform(\\n        Observation memory last,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity\\n    ) private pure returns (Observation memory) {\\n        unchecked {\\n            uint32 delta = blockTimestamp - last.blockTimestamp;\\n            return\\n                Observation({\\n                    blockTimestamp: blockTimestamp,\\n                    tickCumulative: last.tickCumulative + int56(tick) * int56(uint56(delta)),\\n                    secondsPerLiquidityCumulativeX128: last.secondsPerLiquidityCumulativeX128 +\\n                        ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),\\n                    initialized: true\\n                });\\n        }\\n    }\\n\\n    /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array\\n    /// @param self The stored oracle array\\n    /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32\\n    /// @return cardinality The number of populated elements in the oracle array\\n    /// @return cardinalityNext The new length of the oracle array, independent of population\\n    function initialize(Observation[65535] storage self, uint32 time)\\n        internal\\n        returns (uint16 cardinality, uint16 cardinalityNext)\\n    {\\n        self[0] = Observation({\\n            blockTimestamp: time,\\n            tickCumulative: 0,\\n            secondsPerLiquidityCumulativeX128: 0,\\n            initialized: true\\n        });\\n        return (1, 1);\\n    }\\n\\n    /// @notice Writes an oracle observation to the array\\n    /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\\n    /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\\n    /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\\n    /// @param self The stored oracle array\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @param cardinalityNext The new length of the oracle array, independent of population\\n    /// @return indexUpdated The new index of the most recently written element in the oracle array\\n    /// @return cardinalityUpdated The new cardinality of the oracle array\\n    function write(\\n        Observation[65535] storage self,\\n        uint16 index,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity,\\n        uint16 cardinality,\\n        uint16 cardinalityNext\\n    ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\\n        unchecked {\\n            Observation memory last = self[index];\\n\\n            // early return if we've already written an observation this block\\n            if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\\n\\n            // if the conditions are right, we can bump the cardinality\\n            if (cardinalityNext > cardinality && index == (cardinality - 1)) {\\n                cardinalityUpdated = cardinalityNext;\\n            } else {\\n                cardinalityUpdated = cardinality;\\n            }\\n\\n            indexUpdated = (index + 1) % cardinalityUpdated;\\n            self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);\\n        }\\n    }\\n\\n    /// @notice Prepares the oracle array to store up to `next` observations\\n    /// @param self The stored oracle array\\n    /// @param current The current next cardinality of the oracle array\\n    /// @param next The proposed next cardinality which will be populated in the oracle array\\n    /// @return next The next cardinality which will be populated in the oracle array\\n    function grow(\\n        Observation[65535] storage self,\\n        uint16 current,\\n        uint16 next\\n    ) internal returns (uint16) {\\n        unchecked {\\n            if (current <= 0) revert I();\\n            // no-op if the passed next value isn't greater than the current next value\\n            if (next <= current) return current;\\n            // store in each slot to prevent fresh SSTOREs in swaps\\n            // this data will not be used because the initialized boolean is still false\\n            for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\\n            return next;\\n        }\\n    }\\n\\n    /// @notice comparator for 32-bit timestamps\\n    /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time\\n    /// @param time A timestamp truncated to 32 bits\\n    /// @param a A comparison timestamp from which to determine the relative position of `time`\\n    /// @param b From which to determine the relative position of `time`\\n    /// @return Whether `a` is chronologically <= `b`\\n    function lte(\\n        uint32 time,\\n        uint32 a,\\n        uint32 b\\n    ) private pure returns (bool) {\\n        unchecked {\\n            // if there hasn't been overflow, no need to adjust\\n            if (a <= time && b <= time) return a <= b;\\n\\n            uint256 aAdjusted = a > time ? a : a + 2**32;\\n            uint256 bAdjusted = b > time ? b : b + 2**32;\\n\\n            return aAdjusted <= bAdjusted;\\n        }\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\\n    /// The result may be the same observation, or adjacent observations.\\n    /// @dev The answer must be contained in the array, used when the target is located within the stored observation\\n    /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation recorded before, or at, the target\\n    /// @return atOrAfter The observation recorded at, or after, the target\\n    function binarySearch(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        uint16 index,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        unchecked {\\n            uint256 l = (index + 1) % cardinality; // oldest observation\\n            uint256 r = l + cardinality - 1; // newest observation\\n            uint256 i;\\n            while (true) {\\n                i = (l + r) / 2;\\n\\n                beforeOrAt = self[i % cardinality];\\n\\n                // we've landed on an uninitialized tick, keep searching higher (more recently)\\n                if (!beforeOrAt.initialized) {\\n                    l = i + 1;\\n                    continue;\\n                }\\n\\n                atOrAfter = self[(i + 1) % cardinality];\\n\\n                bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);\\n\\n                // check if we've found the answer!\\n                if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;\\n\\n                if (!targetAtOrAfter) r = i - 1;\\n                else l = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\\n    /// @dev Assumes there is at least 1 initialized observation.\\n    /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param tick The active tick at the time of the returned or simulated observation\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The total pool liquidity at the time of the call\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\\n    /// @return atOrAfter The observation which occurred at, or after, the given timestamp\\n    function getSurroundingObservations(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        unchecked {\\n            // optimistically set before to the newest observation\\n            beforeOrAt = self[index];\\n\\n            // if the target is chronologically at or after the newest observation, we can early return\\n            if (lte(time, beforeOrAt.blockTimestamp, target)) {\\n                if (beforeOrAt.blockTimestamp == target) {\\n                    // if newest observation equals target, we're in the same block, so we can ignore atOrAfter\\n                    return (beforeOrAt, atOrAfter);\\n                } else {\\n                    // otherwise, we need to transform\\n                    return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));\\n                }\\n            }\\n\\n            // now, set before to the oldest observation\\n            beforeOrAt = self[(index + 1) % cardinality];\\n            if (!beforeOrAt.initialized) beforeOrAt = self[0];\\n\\n            // ensure that the target is chronologically at or after the oldest observation\\n            if (!lte(time, beforeOrAt.blockTimestamp, target)) revert OLD();\\n\\n            // if we've reached this point, we have to binary search\\n            return binarySearch(self, time, target, index, cardinality);\\n        }\\n    }\\n\\n    /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.\\n    /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\n    /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values\\n    /// at exactly the timestamp between the two observations.\\n    /// @param self The stored oracle array\\n    /// @param time The current block timestamp\\n    /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\n    function observeSingle(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 secondsAgo,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {\\n        unchecked {\\n            if (secondsAgo == 0) {\\n                Observation memory last = self[index];\\n                if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);\\n                return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);\\n            }\\n\\n            uint32 target = time - secondsAgo;\\n\\n            (Observation memory beforeOrAt, Observation memory atOrAfter) = getSurroundingObservations(\\n                self,\\n                time,\\n                target,\\n                tick,\\n                index,\\n                liquidity,\\n                cardinality\\n            );\\n\\n            if (target == beforeOrAt.blockTimestamp) {\\n                // we're at the left boundary\\n                return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);\\n            } else if (target == atOrAfter.blockTimestamp) {\\n                // we're at the right boundary\\n                return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);\\n            } else {\\n                // we're in the middle\\n                uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\\n                uint32 targetDelta = target - beforeOrAt.blockTimestamp;\\n                return (\\n                    beforeOrAt.tickCumulative +\\n                        ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / int56(uint56(observationTimeDelta))) *\\n                        int56(uint56(targetDelta)),\\n                    beforeOrAt.secondsPerLiquidityCumulativeX128 +\\n                        uint160(\\n                            (uint256(\\n                                atOrAfter.secondsPerLiquidityCumulativeX128 -\\n                                    beforeOrAt.secondsPerLiquidityCumulativeX128\\n                            ) * targetDelta) / observationTimeDelta\\n                        )\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\n    /// @dev Reverts if `secondsAgos` > oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\n    function observe(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32[] memory secondsAgos,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) {\\n        unchecked {\\n            if (cardinality <= 0) revert I();\\n\\n            tickCumulatives = new int56[](secondsAgos.length);\\n            secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);\\n            for (uint256 i = 0; i < secondsAgos.length; i++) {\\n                (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(\\n                    self,\\n                    time,\\n                    secondsAgos[i],\\n                    tick,\\n                    index,\\n                    liquidity,\\n                    cardinality\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa25b18af947c36b9add9e229c361beb6aba176fb435d7a24e6dc723cbc187442\",\"license\":\"BUSL-1.1\"},\"solidity/contracts/OracleFactory.sol\":{\"content\":\"//TODO: change license\\n//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {OracleSidechain} from './OracleSidechain.sol';\\nimport {Governable} from './peripherals/Governable.sol';\\nimport {IOracleFactory} from '../interfaces/IOracleFactory.sol';\\nimport {IDataReceiver} from '../interfaces/IDataReceiver.sol';\\nimport {Create2Address} from '../libraries/Create2Address.sol';\\n\\ncontract OracleFactory is IOracleFactory, Governable {\\n  /// @inheritdoc IOracleFactory\\n  IDataReceiver public dataReceiver;\\n\\n  OracleParameters public oracleParameters;\\n\\n  /// @inheritdoc IOracleFactory\\n  uint16 public initialCardinality = 144;\\n\\n  constructor(address _governor, IDataReceiver _dataReceiver) Governable(_governor) {\\n    dataReceiver = _dataReceiver;\\n  }\\n\\n  function deployOracle(bytes32 _poolSalt, uint24 _initialNonce) external onlyDataReceiver returns (address _deployedOracle) {\\n    oracleParameters = OracleParameters({\\n      factory: IOracleFactory(address(this)),\\n      poolSalt: _poolSalt,\\n      poolNonce: _initialNonce,\\n      cardinality: initialCardinality\\n    });\\n    _deployedOracle = address(new OracleSidechain{salt: _poolSalt}());\\n    delete oracleParameters;\\n    emit OracleDeployed(_deployedOracle, _poolSalt, initialCardinality);\\n  }\\n\\n  /// @inheritdoc IOracleFactory\\n  function setDataReceiver(IDataReceiver _dataReceiver) external onlyGovernor {\\n    dataReceiver = _dataReceiver;\\n    emit DataReceiverSet(dataReceiver);\\n  }\\n\\n  /// @inheritdoc IOracleFactory\\n  function setInitialCardinality(uint16 _initialCardinality) external onlyGovernor {\\n    initialCardinality = _initialCardinality;\\n    emit InitialCardinalitySet(initialCardinality);\\n  }\\n\\n  function getPool(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) external view returns (address _oracle) {\\n    bytes32 _poolSalt = getPoolSalt(_tokenA, _tokenB, _fee);\\n    _oracle = Create2Address.computeAddress(address(this), _poolSalt, keccak256(type(OracleSidechain).creationCode));\\n    if (address(_oracle).code.length == 0) return address(0);\\n  }\\n\\n  function getPoolSalt(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) public pure returns (bytes32 _poolSalt) {\\n    (address _token0, address _token1) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\\n    _poolSalt = keccak256(abi.encode(_token0, _token1, _fee));\\n  }\\n\\n  modifier onlyDataReceiver() {\\n    if (msg.sender != address(dataReceiver)) revert OnlyDataReceiver();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x1a57705044630033f612543fdd78bcd34f6bd7dcc16cac1c2fc4df53c6369ebb\",\"license\":\"Unlicense\"},\"solidity/contracts/OracleSidechain.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {Oracle} from '@uniswap/v3-core/contracts/libraries/Oracle.sol';\\nimport {IOracleSidechain} from '../interfaces/IOracleSidechain.sol';\\nimport {IOracleFactory} from '../interfaces/IOracleFactory.sol';\\n\\n/// @title A sidechain oracle contract\\n/// @author 0xJabberwock (from DeFi Wonderland)\\n/// @notice Computes on-chain price data from Mainnet\\n/// @dev Bridges Uniswap V3 pool observations\\ncontract OracleSidechain is IOracleSidechain {\\n  using Oracle for Oracle.Observation[65535];\\n\\n  /// @inheritdoc IOracleSidechain\\n  IOracleFactory public immutable factory;\\n\\n  struct Slot0 {\\n    // the current price\\n    uint160 sqrtPriceX96;\\n    // the current tick\\n    int24 tick;\\n    // the most-recently updated index of the observations array\\n    uint16 observationIndex;\\n    // the current maximum number of observations that are being stored\\n    uint16 observationCardinality;\\n    // the next maximum number of observations to store, triggered in observations.write\\n    uint16 observationCardinalityNext;\\n    // the current protocol fee as a percentage of the swap fee taken on withdrawal\\n    // represented as an integer denominator (1/x)%\\n    uint8 feeProtocol;\\n    // whether the pool is locked\\n    bool unlocked;\\n  }\\n  /// @inheritdoc IOracleSidechain\\n  Slot0 public slot0;\\n\\n  /// @inheritdoc IOracleSidechain\\n  Oracle.Observation[65535] public observations;\\n\\n  /// @inheritdoc IOracleSidechain\\n  bytes32 public immutable poolSalt;\\n\\n  uint24 public poolNonce;\\n  /// @inheritdoc IOracleSidechain\\n  address public token0;\\n  /// @inheritdoc IOracleSidechain\\n  address public token1;\\n  /// @inheritdoc IOracleSidechain\\n  uint24 public fee;\\n\\n  /// @dev Returns the block timestamp truncated to 32 bits, i.e. mod 2**32. This method is overridden in tests.\\n  function _getBlockTimestamp() internal view virtual returns (uint32) {\\n    return uint32(block.timestamp); // truncation is desired\\n  }\\n\\n  constructor() {\\n    uint16 _cardinality;\\n    // TODO: remove factory from parameters (use msg.sender)\\n    (factory, poolSalt, poolNonce, _cardinality) = IOracleFactory(msg.sender).oracleParameters();\\n\\n    slot0 = Slot0({\\n      sqrtPriceX96: 0,\\n      tick: 0,\\n      observationIndex: _cardinality - 1,\\n      observationCardinality: _cardinality,\\n      observationCardinalityNext: _cardinality,\\n      feeProtocol: 0,\\n      unlocked: true\\n    });\\n  }\\n\\n  /*\\n   * NOTE: public function that allows signer to register token0, token1 and fee\\n   *       before someone registers, oracle can be found with poolSalt, but token0 and token1 views will return address(0)\\n   */\\n  /// @inheritdoc IOracleSidechain\\n  function initializePoolInfo(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) external {\\n    if (!slot0.unlocked) revert AI();\\n\\n    (address _token0, address _token1) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\\n    if (poolSalt != keccak256(abi.encode(_token0, _token1, _fee))) revert InvalidPool();\\n\\n    token0 = _token0;\\n    token1 = _token1;\\n    fee = _fee;\\n    slot0.unlocked = false;\\n\\n    emit PoolInfoInitialized(poolSalt, _token0, _token1, _fee);\\n  }\\n\\n  /// @inheritdoc IOracleSidechain\\n  function observe(uint32[] calldata _secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory _tickCumulatives, uint160[] memory _secondsPerLiquidityCumulativeX128s)\\n  {\\n    return observations.observe(_getBlockTimestamp(), _secondsAgos, slot0.tick, slot0.observationIndex, 0, slot0.observationCardinality);\\n  }\\n\\n  /// @inheritdoc IOracleSidechain\\n  function write(ObservationData[] calldata _observationsData, uint24 _poolNonce) external onlyDataReceiver returns (bool _written) {\\n    if (_poolNonce != ++poolNonce) return false;\\n\\n    Oracle.Observation memory _lastObservation = observations[slot0.observationIndex];\\n    uint256 _observationsDataLength = _observationsData.length;\\n    for (uint256 _i; _i < _observationsDataLength; ++_i) {\\n      if (_lastObservation.blockTimestamp < _observationsData[_i].blockTimestamp) {\\n        _write(_observationsData[_i]);\\n      }\\n    }\\n    return true;\\n  }\\n\\n  function _write(ObservationData calldata _observationData) private {\\n    (uint16 _indexUpdated, uint16 _cardinalityUpdated) = observations.write(\\n      slot0.observationIndex,\\n      _observationData.blockTimestamp,\\n      slot0.tick,\\n      0,\\n      slot0.observationCardinality,\\n      slot0.observationCardinalityNext\\n    );\\n    (slot0.observationIndex, slot0.observationCardinality) = (_indexUpdated, _cardinalityUpdated);\\n    slot0.tick = _observationData.tick;\\n    emit ObservationWritten(msg.sender, _observationData);\\n  }\\n\\n  modifier onlyDataReceiver() {\\n    if (msg.sender != address(factory.dataReceiver())) revert OnlyDataReceiver();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xead69dfa483d82656b6c3e829e1d1be74c643d50aeedbcf407196f88e7603157\",\"license\":\"Unlicense\"},\"solidity/contracts/peripherals/Governable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IGovernable} from '../../interfaces/peripherals/IGovernable.sol';\\n\\nabstract contract Governable is IGovernable {\\n  /// @inheritdoc IGovernable\\n  address public governor;\\n  /// @inheritdoc IGovernable\\n  address public pendingGovernor;\\n\\n  constructor(address _governor) {\\n    if (_governor == address(0)) revert ZeroAddress();\\n    governor = _governor;\\n  }\\n\\n  /// @inheritdoc IGovernable\\n  function setPendingGovernor(address _pendingGovernor) external onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  /// @inheritdoc IGovernable\\n  function acceptPendingGovernor() external onlyPendingGovernor {\\n    _acceptPendingGovernor();\\n  }\\n\\n  function _setPendingGovernor(address _pendingGovernor) internal {\\n    if (_pendingGovernor == address(0)) revert ZeroAddress();\\n    pendingGovernor = _pendingGovernor;\\n    emit PendingGovernorSet(governor, pendingGovernor);\\n  }\\n\\n  function _acceptPendingGovernor() internal {\\n    governor = pendingGovernor;\\n    pendingGovernor = address(0);\\n    emit PendingGovernorAccepted(governor);\\n  }\\n\\n  modifier onlyGovernor() {\\n    if (msg.sender != governor) revert OnlyGovernor();\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernor() {\\n    if (msg.sender != pendingGovernor) revert OnlyPendingGovernor();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x84e87f51a8305e77664fbdb9da1a82a9565119e98916943ca6f1ea6cfdaea7c8\",\"license\":\"MIT\"},\"solidity/interfaces/IDataReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleFactory} from './IOracleFactory.sol';\\nimport {IOracleSidechain} from './IOracleSidechain.sol';\\nimport {IBridgeReceiverAdapter} from './bridges/IBridgeReceiverAdapter.sol';\\nimport {IGovernable} from './peripherals/IGovernable.sol';\\n\\n/// @title The DataReceiver interface\\n/// @author 0xJabberwock (from DeFi Wonderland)\\n/// @notice Contains state variables, events, custom errors and functions used in DataReceiver\\ninterface IDataReceiver is IGovernable {\\n  // STATE VARIABLES\\n\\n  function oracleFactory() external view returns (IOracleFactory _oracleFactory);\\n\\n  //solhint-disable-next-line func-name-mixedcase\\n  function ORACLE_INIT_CODE_HASH() external view returns (bytes32 _oracleInitCodeHash);\\n\\n  function whitelistedAdapters(IBridgeReceiverAdapter _adapter) external view returns (bool _isAllowed);\\n\\n  // EVENTS\\n\\n  event ObservationsAdded(address _user, IOracleSidechain.ObservationData[] _observationsData);\\n\\n  event AdapterWhitelisted(IBridgeReceiverAdapter _adapter, bool _isAllowed);\\n\\n  // ERRORS\\n\\n  error ObservationsNotWritable();\\n\\n  error UnallowedAdapter();\\n\\n  error LengthMismatch();\\n\\n  // FUNCTIONS\\n\\n  function addObservations(\\n    IOracleSidechain.ObservationData[] calldata _observationsData,\\n    bytes32 _poolSalt,\\n    uint24 _poolNonce\\n  ) external;\\n\\n  function whitelistAdapter(IBridgeReceiverAdapter _receiverAdapter, bool _isWhitelisted) external;\\n\\n  function whitelistAdapters(IBridgeReceiverAdapter[] calldata _receiverAdapters, bool[] calldata _isWhitelisted) external;\\n}\\n\",\"keccak256\":\"0x7560e231558e301e7f0df8d0f22883abf844c62a70496a51d40ee80e6565349c\",\"license\":\"Unlicense\"},\"solidity/interfaces/IOracleFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleSidechain} from './IOracleSidechain.sol';\\nimport {IDataReceiver} from './IDataReceiver.sol';\\nimport {IGovernable} from './peripherals/IGovernable.sol';\\n\\ninterface IOracleFactory is IGovernable {\\n  // STRUCTS\\n\\n  struct OracleParameters {\\n    IOracleFactory factory;\\n    bytes32 poolSalt;\\n    uint24 poolNonce;\\n    uint16 cardinality;\\n  }\\n\\n  // STATE VARIABLES\\n\\n  function dataReceiver() external view returns (IDataReceiver _dataReceiver);\\n\\n  /// @return _factory The address of the deployer factory\\n  /// @return _poolSalt The id of both the oracle and the pool\\n  /// @return _poolNonce The initial nonce of the pool data\\n  /// @return _cardinality The size of the observations memory storage\\n  function oracleParameters()\\n    external\\n    view\\n    returns (\\n      IOracleFactory _factory,\\n      bytes32 _poolSalt,\\n      uint24 _poolNonce,\\n      uint16 _cardinality\\n    );\\n\\n  /// @return _initialCardinality The initial size of the observations memory storage for newly deployed pools\\n  function initialCardinality() external view returns (uint16 _initialCardinality);\\n\\n  // EVENTS\\n\\n  event OracleDeployed(address _oracle, bytes32 _poolSalt, uint16 _cardinality);\\n  event DataReceiverSet(IDataReceiver _dataReceiver);\\n\\n  event InitialCardinalitySet(uint16 _initialCardinality);\\n\\n  // ERRORS\\n\\n  error OnlyDataReceiver();\\n\\n  // VIEWS\\n\\n  /// @notice Overrides UniV3Factory getPool mapping\\n  /// @param _tokenA The contract address of either token0 or token1\\n  /// @param _tokenB The contract address of the other token\\n  /// @param _fee The fee denominated in hundredths of a bip\\n  /// @return _oracle The oracle address\\n  function getPool(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) external view returns (address _oracle);\\n\\n  /// @param _tokenA The contract address of either token0 or token1\\n  /// @param _tokenB The contract address of the other token\\n  /// @param _fee The fee denominated in hundredths of a bip\\n  /// @return _poolSalt Pool salt for inquired parameters\\n  function getPoolSalt(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) external view returns (bytes32 _poolSalt);\\n\\n  // FUNCTIONS\\n\\n  /// @notice Deploys a new oracle given an inputted salt\\n  /// @dev Requires that the salt has not been deployed before\\n  /// @param _poolSalt Pool salt that deterministically binds an oracle with a pool\\n  /// @return _deployedOracle The address of the newly deployed oracle\\n  function deployOracle(bytes32 _poolSalt, uint24 _poolNonce) external returns (address _deployedOracle);\\n\\n  /// @notice Allows governor to set a new allowed dataReceiver\\n  /// @dev Will disallow the previous dataReceiver\\n  /// @param _dataReceiver The address of the new allowed dataReceiver\\n  function setDataReceiver(IDataReceiver _dataReceiver) external;\\n\\n  /// @notice Allows governor to set a new initial cardinality for new oracles\\n  /// @param _initialCardinality The initial size of the observations memory storage for newly deployed pools\\n  function setInitialCardinality(uint16 _initialCardinality) external;\\n}\\n\",\"keccak256\":\"0xca2a4e0a0178e408f308a07a3d255019b8ac06f961f1a7b9d781779d0d5158e4\",\"license\":\"Unlicense\"},\"solidity/interfaces/IOracleSidechain.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleFactory} from './IOracleFactory.sol';\\n\\n/// @title The OracleSidechain interface\\n/// @author 0xJabberwock (from DeFi Wonderland)\\n/// @notice Contains state variables, events, custom errors and functions used in OracleSidechain\\ninterface IOracleSidechain {\\n  // STRUCTS\\n\\n  struct ObservationData {\\n    uint32 blockTimestamp;\\n    int24 tick;\\n  }\\n\\n  // STATE VARIABLES\\n\\n  // TODO: complete natspec\\n\\n  function factory() external view returns (IOracleFactory _oracleFactory);\\n\\n  function token0() external view returns (address _token0);\\n\\n  function token1() external view returns (address _token1);\\n\\n  function fee() external view returns (uint24 _fee);\\n\\n  function poolSalt() external view returns (bytes32 _poolSalt);\\n\\n  function poolNonce() external view returns (uint24 _poolNonce);\\n\\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n  /// when accessed externally.\\n  /// @return _sqrtPriceX96 Used to maintain compatibility with Uniswap V3\\n  /// @return _tick Used to maintain compatibility with Uniswap V3\\n  /// @return _observationIndex The index of the last oracle observation that was written,\\n  /// @return _observationCardinality The current maximum number of observations stored in the pool,\\n  /// @return _observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n  /// @return _feeProtocol Used to maintain compatibility with Uniswap V3\\n  /// @return _unlocked Used to maintain compatibility with Uniswap V3\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint160 _sqrtPriceX96,\\n      int24 _tick,\\n      uint16 _observationIndex,\\n      uint16 _observationCardinality,\\n      uint16 _observationCardinalityNext,\\n      uint8 _feeProtocol,\\n      bool _unlocked\\n    );\\n\\n  /// @notice Returns data about a specific observation index\\n  /// @param _index The element of the observations array to fetch\\n  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n  /// ago, rather than at a specific index in the array.\\n  /// @return _blockTimestamp The timestamp of the observation,\\n  /// @return _tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n  /// @return _secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n  /// @return _initialized whether the observation has been initialized and the values are safe to use\\n  function observations(uint256 _index)\\n    external\\n    view\\n    returns (\\n      uint32 _blockTimestamp,\\n      int56 _tickCumulative,\\n      uint160 _secondsPerLiquidityCumulativeX128,\\n      bool _initialized\\n    );\\n\\n  // EVENTS\\n\\n  event PoolInfoInitialized(bytes32 _poolSalt, address _token0, address _token1, uint24 _fee);\\n  event ObservationWritten(address _user, ObservationData _observationData);\\n\\n  // ERRORS\\n\\n  error AI();\\n  error InvalidPool();\\n  error OnlyDataReceiver();\\n\\n  // FUNCTIONS\\n\\n  function initializePoolInfo(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24 _fee\\n  ) external;\\n\\n  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n  /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n  /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n  /// you must call it with secondsAgos = [3600, 0].\\n  /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n  /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n  /// @param _secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n  /// @return _tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n  /// @return _secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n  /// timestamp\\n  function observe(uint32[] calldata _secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory _tickCumulatives, uint160[] memory _secondsPerLiquidityCumulativeX128s);\\n\\n  function write(ObservationData[] calldata _observationsData, uint24 _poolNonce) external returns (bool _written);\\n}\\n\",\"keccak256\":\"0x827e64bea20640b4eeda0245dab90a7b5e3daf81bebae5147044136a374a959e\",\"license\":\"Unlicense\"},\"solidity/interfaces/bridges/IBridgeReceiverAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IOracleSidechain} from '../IOracleSidechain.sol';\\n\\ninterface IBridgeReceiverAdapter {\\n  // FUNCTIONS\\n\\n  function addObservations(\\n    IOracleSidechain.ObservationData[] calldata _observationsData,\\n    bytes32 _poolSalt,\\n    uint24 _poolNonce\\n  ) external;\\n}\\n\",\"keccak256\":\"0x25907c514198802803b5dcedaed19538f9282b2f230fd0b8aa56a51160d76ea7\",\"license\":\"Unlicense\"},\"solidity/interfaces/peripherals/IGovernable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\ninterface IGovernable {\\n  // STATE VARIABLES\\n\\n  /// @return _governor Address of the current governor\\n  function governor() external view returns (address _governor);\\n\\n  /// @return _pendingGovernor Address of the current pending governor\\n  function pendingGovernor() external view returns (address _pendingGovernor);\\n\\n  // EVENTS\\n\\n  /// @notice Emitted when a new pending governor is set\\n  /// @param _governor Address of the current governor\\n  /// @param _pendingGovernor Address of the proposed next governor\\n  event PendingGovernorSet(address _governor, address _pendingGovernor);\\n\\n  /// @notice Emitted when a new governor is set\\n  /// @param _newGovernor Address of the new governor\\n  event PendingGovernorAccepted(address _newGovernor);\\n\\n  // ERRORS\\n\\n  /// @notice Throws if a variable is assigned to the zero address\\n  error ZeroAddress();\\n\\n  /// @notice Throws if a non-governor user tries to call a OnlyGovernor function\\n  error OnlyGovernor();\\n\\n  /// @notice Throws if a non-pending-governor user tries to call a OnlyPendingGovernor function\\n  error OnlyPendingGovernor();\\n\\n  // FUNCTIONS\\n\\n  /// @notice Allows a governor to propose a new governor\\n  /// @param _pendingGovernor Address of the proposed new governor\\n  function setPendingGovernor(address _pendingGovernor) external;\\n\\n  /// @notice Allows a proposed governor to accept the governance\\n  function acceptPendingGovernor() external;\\n}\\n\",\"keccak256\":\"0xcbd9ae88cf32e1f7005a6ca222b76a357388953ccc05747ed694b28a4f89e306\",\"license\":\"MIT\"},\"solidity/libraries/Create2Address.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.8 <0.9.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary Create2Address {\\n  /// @notice Deterministically computes the pool address given the factory, salt and initCodeHash\\n  /// @param _factory The Uniswap V3 factory contract address\\n  /// @param _salt The PoolKey encoded bytes\\n  /// @param _initCodeHash The Init Code Hash of the target\\n  /// @return _pool The contract address of the target pool/oracle\\n  function computeAddress(\\n    address _factory,\\n    bytes32 _salt,\\n    bytes32 _initCodeHash\\n  ) internal pure returns (address _pool) {\\n    _pool = address(uint160(uint256(keccak256(abi.encodePacked(hex'ff', _factory, _salt, _initCodeHash)))));\\n  }\\n}\\n\",\"keccak256\":\"0x37295cf40b85029677ff0fa75cae30717f9e258a4dc88fd6021bb0c174efe633\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040526006805461ffff1916609017905534801561001e57600080fd5b5060405161214f38038061214f83398101604081905261003d916100b2565b816001600160a01b0381166100655760405163d92e233d60e01b815260040160405180910390fd5b600080546001600160a01b039283166001600160a01b03199182161790915560028054939092169216919091179055506100ec565b6001600160a01b03811681146100af57600080fd5b50565b600080604083850312156100c557600080fd5b82516100d08161009a565b60208401519092506100e18161009a565b809150509250929050565b612054806100fb6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806397862d6d1161007157806397862d6d1461014d57806399df712014610160578063e3056a34146101c5578063e8047788146101d8578063ebaa56aa146101eb578063f235757f1461020c57600080fd5b806307d5851a146100b95780630c340a24146100ce57806313f6986d146100fe5780631698ee82146101065780633c1a17ff146101195780635cc1fd361461013a575b600080fd5b6100cc6100c73660046106ed565b61021f565b005b6000546100e1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cc61029f565b6100e1610114366004610722565b6102d4565b61012c610127366004610722565b61038d565b6040519081526020016100f5565b6100e1610148366004610769565b610406565b6100cc61015b366004610795565b610544565b60035460045460055461018d926001600160a01b0316919062ffffff8116906301000000900461ffff1684565b604080516001600160a01b039095168552602085019390935262ffffff9091169183019190915261ffff1660608201526080016100f5565b6001546100e1906001600160a01b031681565b6002546100e1906001600160a01b031681565b6006546101f99061ffff1681565b60405161ffff90911681526020016100f5565b6100cc61021a3660046106ed565b6105b3565b6000546001600160a01b0316331461024a5760405163070545c960e51b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f23ab7a40fedc3062f72fa590994df2ec8e49b54309a22df0ad3790dbc56346be906020015b60405180910390a150565b6001546001600160a01b031633146102ca57604051639ba0305d60e01b815260040160405180910390fd5b6102d26105ea565b565b6000806102e285858561038d565b90506103663082604051806020016102f9906106cb565b601f1982820381018352601f90910116604081815282516020938401206001600160f81b03198385015260609590951b6bffffffffffffffffffffffff19166021830152603582019390935260558082019490945282518082039094018452607501909152815191012090565b9150816001600160a01b03163b600003610384576000915050610386565b505b9392505050565b6000806000846001600160a01b0316866001600160a01b0316106103b25784866103b5565b85855b604080516001600160a01b03808516602083015283169181019190915262ffffff87166060820152919350915060800160405160208183030381529060405280519060200120925050509392505050565b6002546000906001600160a01b0316331461043457604051638e5b30cb60e01b815260040160405180910390fd5b60408051608081018252308082526020820186905262ffffff851682840181905260065461ffff166060909301839052600380546001600160a01b03191690921790915560048690556005805464ffffffffff191690911763010000009092029190911790555183906104a6906106cb565b8190604051809103906000f59050801580156104c6573d6000803e3d6000fd5b50600380546001600160a01b031916905560006004556005805464ffffffffff19169055600654604080516001600160a01b03841681526020810187905261ffff909216908201529091507ff643dccb9b460e4f17699bf473e898bdbebd63ef8f018af915aa951cddf391689060600160405180910390a192915050565b6000546001600160a01b0316331461056f5760405163070545c960e51b815260040160405180910390fd5b6006805461ffff191661ffff83169081179091556040519081527fec9fa937c26cb048aac5fc5992eaace52f38cd13c8da22f42630090bd258261f90602001610294565b6000546001600160a01b031633146105de5760405163070545c960e51b815260040160405180910390fd5b6105e781610648565b50565b60018054600080546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527f5d5d6e01b731c3e68060f7fe13156f6197d4aeffc2d6f498e34c717ae616b7349060200160405180910390a1565b6001600160a01b03811661066f5760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b038381169182179092556000546040805191909316815260208101919091527f6353ec38ac394f8be94bfafcdd3580d356470599059eaeebedc3207e1cc03dec9101610294565b611865806107ba83390190565b6001600160a01b03811681146105e757600080fd5b6000602082840312156106ff57600080fd5b8135610386816106d8565b803562ffffff8116811461071d57600080fd5b919050565b60008060006060848603121561073757600080fd5b8335610742816106d8565b92506020840135610752816106d8565b91506107606040850161070a565b90509250925092565b6000806040838503121561077c57600080fd5b8235915061078c6020840161070a565b90509250929050565b6000602082840312156107a757600080fd5b813561ffff8116811461038657600080fdfe60c06040523480156200001157600080fd5b506000336001600160a01b03166399df71206040518163ffffffff1660e01b8152600401608060405180830381865afa15801562000053573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000799190620001c6565b62010000805462ffffff90931662ffffff199093169290921790915560a0919091526001600160a01b039091166080526040805160e081018252600080825260208201529192508101620000cf6001846200023a565b61ffff90811682529283166020808301829052604080840192909252600060608085018290526001608095860152855182549387015194870151918701519587015160a088015160c0909801511515600160f01b0260ff60f01b1960ff99909916600160e81b0260ff60e81b19928b16600160d81b029290921662ffffff60d81b19988b16600160c81b0261ffff60c81b1995909b16600160b81b029490941663ffffffff60b81b1962ffffff909816600160a01b026001600160b81b03199097166001600160a01b039094169390931795909517959095161796909617939093169490941717919091169190911790556200026c565b60008060008060808587031215620001dd57600080fd5b84516001600160a01b0381168114620001f557600080fd5b60208601516040870151919550935062ffffff811681146200021657600080fd5b606086015190925061ffff811681146200022f57600080fd5b939692955090935050565b600061ffff838116908316818110156200026457634e487b7160e01b600052601160045260246000fd5b039392505050565b60805160a0516115be620002a76000396000818161025c015281816105bb015261066301526000818161029101526102e401526115be6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063883bdbfd11610071578063883bdbfd146102115780639fdbd4d714610232578063c1c9115a14610257578063c45a01551461028c578063d21220a7146102b3578063ddca3f43146102c857600080fd5b80630dfe1681146100ae57806323e512d4146100e7578063252c09d71461010a5780633453952f146101575780633850c7bd1461016c575b600080fd5b62010000546100ca90630100000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fa6100f536600461124e565b6102e0565b60405190151581526020016100de565b61011d6101183660046112d2565b6104de565b6040805163ffffffff909516855260069390930b60208501526001600160a01b0390911691830191909152151560608201526080016100de565b61016a610165366004611303565b610523565b005b6000546101c0906001600160a01b03811690600160a01b810460020b9061ffff600160b81b8204811691600160c81b8104821691600160d81b8204169060ff600160e81b8204811691600160f01b90041687565b604080516001600160a01b03909816885260029690960b602088015261ffff94851695870195909552918316606086015291909116608084015260ff1660a0830152151560c082015260e0016100de565b61022461021f366004611341565b6106cb565b6040516100de9291906113b6565b62010000546102439062ffffff1681565b60405162ffffff90911681526020016100de565b61027e7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100de565b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b62010001546100ca906001600160a01b031681565b620100015461024390600160a01b900462ffffff1681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e80477886040518163ffffffff1660e01b8152600401602060405180830381865afa158015610340573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610364919061143d565b6001600160a01b0316336001600160a01b03161461039557604051638e5b30cb60e01b815260040160405180910390fd5b6201000080546000906103ac9062ffffff16611470565b91906101000a81548162ffffff021916908362ffffff160217905562ffffff168262ffffff16146103df575060006104d7565b6000805460019061ffff600160b81b909104811690811061040257610402611492565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b909104161515606082015290508360005b818110156104cf5786868281811061047257610472611492565b61048892602060409092020190810191506114bc565b63ffffffff16836000015163ffffffff1610156104bf576104bf8787838181106104b4576104b4611492565b90506040020161073c565b6104c8816114d7565b9050610458565b506001925050505b9392505050565b60018161ffff81106104ef57600080fd5b015463ffffffff81169150600160201b810460060b90600160581b81046001600160a01b031690600160f81b900460ff1684565b600054600160f01b900460ff1661054d5760405163139816ff60e31b815260040160405180910390fd5b600080836001600160a01b0316856001600160a01b031610610570578385610573565b84845b604080516001600160a01b03808516602083015283169181019190915262ffffff861660608201529193509150608001604051602081830303815290604052805190602001207f0000000000000000000000000000000000000000000000000000000000000000146105f75760405162820f3560e61b815260040160405180910390fd5b6201000080546301000000600160b81b03191663010000006001600160a01b03858116918202929092179092556201000180549184166001600160b81b03199092168217600160a01b62ffffff8816908102919091179091556000805460ff60f01b19169055604080517f00000000000000000000000000000000000000000000000000000000000000008152602081019490945283019190915260608201527fb50ab96cf9f83d6c076a0d2a6e27a65bf1242920ba414829aa618d57d4a263739060800160405180910390a15050505050565b6060806107314285858080602002602001604051908101604052809392919081815260200183836020028082843760009201829052508054600196959450600160a01b810460020b935061ffff600160b81b820481169350600160c81b9091041661083a565b915091509250929050565b60008054819061078c90600160b81b900461ffff1661075e60208601866114bc565b600080546001939291600160a01b820460020b9161ffff600160c81b8204811691600160d81b900416610985565b6000805461ffff808516600160b81b0261ffff60b81b19918516600160c81b029190911663ffffffff60b81b199092169190911717905590925090506107d86040840160208501611502565b6000805462ffffff92909216600160a01b0262ffffff60a01b199092169190911790556040517f351cb05bc71b044931f7410e88dceed68c021615a824de572c6cb0a735f50ac49061082d903390869061151d565b60405180910390a1505050565b60608060008361ffff161161086257604051636b93000360e11b815260040160405180910390fd5b865167ffffffffffffffff81111561087c5761087c61155c565b6040519080825280602002602001820160405280156108a5578160200160208202803683370190505b509150865167ffffffffffffffff8111156108c2576108c261155c565b6040519080825280602002602001820160405280156108eb578160200160208202803683370190505b50905060005b8751811015610978576109228a8a8a848151811061091157610911611492565b60200260200101518a8a8a8a610b0d565b84838151811061093457610934611492565b6020026020010184848151811061094d5761094d611492565b6001600160a01b039093166020938402919091019092019190915260069190910b90526001016108f1565b5097509795505050505050565b6000806000898961ffff1661ffff81106109a1576109a1611492565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff161515606083015290925089169003610a0a5788859250925050610b01565b8461ffff168461ffff16118015610a2b57506001850361ffff168961ffff16145b15610a3857839150610a3c565b8491505b8161ffff168960010161ffff1681610a5657610a56611572565b069250610a6581898989610cbc565b8a8461ffff1661ffff8110610a7c57610a7c611492565b825191018054602084015160408501516060909501511515600160f81b026001600160f81b036001600160a01b03909616600160581b02959095166affffffffffffffffffffff66ffffffffffffff909216600160201b026affffffffffffffffffffff1990931663ffffffff90951694909417919091171691909117919091179055505b97509795505050505050565b6000808663ffffffff16600003610bb6576000898661ffff1661ffff8110610b3757610b37611492565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff16151560608301529092508a1614610ba257610b9f818a8988610cbc565b90505b806020015181604001519250925050610b01565b868803600080610bcb8c8c858c8c8c8c610d81565b91509150816000015163ffffffff168363ffffffff1603610bfc578160200151826040015194509450505050610b01565b806000015163ffffffff168363ffffffff1603610c29578060200151816040015194509450505050610b01565b60008260000151826000015103905060008360000151850390508063ffffffff168263ffffffff1660060b856020015185602001510360060b81610c6f57610c6f611572565b05028460200151018263ffffffff168263ffffffff1686604001518660400151036001600160a01b03160281610ca757610ca7611572565b04856040015101965096505050505050610b01565b604080516080810182526000808252602082018190529181018290526060810191909152600085600001518503905060405180608001604052808663ffffffff1681526020018263ffffffff168660020b0288602001510160060b81526020016000856001600160801b031611610d34576001610d36565b845b6001600160801b031663ffffffff60801b608085901b1681610d5a57610d5a611572565b048860400151016001600160a01b0316815260200160011515815250915050949350505050565b604080516080810182526000808252602082018190529181018290526060810191909152604080516080810182526000808252602082018190529181018290526060810191909152888561ffff1661ffff8110610de057610de0611492565b60408051608081018252919092015463ffffffff8116808352600160201b820460060b6020840152600160581b82046001600160a01b031693830193909352600160f81b900460ff16151560608201529250610e3e90899089610f8d565b15610e6a57815163ffffffff888116911614610b015781610e6183898988610cbc565b91509150610b01565b888361ffff168660010161ffff1681610e8557610e85611572565b0661ffff1661ffff8110610e9b57610e9b611492565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201819052909250610f4457604080516080810182528a5463ffffffff81168252600160201b810460060b6020830152600160581b81046001600160a01b031692820192909252600160f81b90910460ff161515606082015291505b610f5388836000015189610f8d565b610f70576040516327e8e87560e01b815260040160405180910390fd5b610f7d898989888761104e565b9150915097509795505050505050565b60008363ffffffff168363ffffffff1611158015610fb757508363ffffffff168263ffffffff1611155b15610fd3578163ffffffff168363ffffffff16111590506104d7565b60008463ffffffff168463ffffffff1611610ffa578363ffffffff16600160201b01611002565b8363ffffffff165b64ffffffffff16905060008563ffffffff168463ffffffff1611611032578363ffffffff16600160201b0161103a565b8363ffffffff165b64ffffffffff169091111595945050505050565b60408051608081018252600080825260208201819052918101829052606081019190915260408051608081018252600080825260208201819052918101829052606081019190915260008361ffff168560010161ffff16816110b2576110b2611572565b0661ffff169050600060018561ffff16830103905060005b506002818301048961ffff871682816110e5576110e5611572565b0661ffff81106110f7576110f7611492565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b9091041615156060820181905290955061115b578060010192506110ca565b898661ffff16826001018161117257611172611572565b0661ffff811061118457611184611492565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b909104161515606082015285519094506000906111e8908b908b610f8d565b905080801561120157506112018a8a8760000151610f8d565b1561120c5750611229565b8061121c57600182039250611223565b8160010193505b506110ca565b5050509550959350505050565b803562ffffff8116811461124957600080fd5b919050565b60008060006040848603121561126357600080fd5b833567ffffffffffffffff8082111561127b57600080fd5b818601915086601f83011261128f57600080fd5b81358181111561129e57600080fd5b8760208260061b85010111156112b357600080fd5b6020928301955093506112c99186019050611236565b90509250925092565b6000602082840312156112e457600080fd5b5035919050565b6001600160a01b038116811461130057600080fd5b50565b60008060006060848603121561131857600080fd5b8335611323816112eb565b92506020840135611333816112eb565b91506112c960408501611236565b6000806020838503121561135457600080fd5b823567ffffffffffffffff8082111561136c57600080fd5b818501915085601f83011261138057600080fd5b81358181111561138f57600080fd5b8660208260051b85010111156113a457600080fd5b60209290920196919550909350505050565b604080825283519082018190526000906020906060840190828701845b828110156113f257815160060b845292840192908401906001016113d3565b5050508381038285015284518082528583019183019060005b818110156114305783516001600160a01b03168352928401929184019160010161140b565b5090979650505050505050565b60006020828403121561144f57600080fd5b81516104d7816112eb565b634e487b7160e01b600052601160045260246000fd5b600062ffffff8083168181036114885761148861145a565b6001019392505050565b634e487b7160e01b600052603260045260246000fd5b803563ffffffff8116811461124957600080fd5b6000602082840312156114ce57600080fd5b6104d7826114a8565b6000600182016114e9576114e961145a565b5060010190565b8035600281900b811461124957600080fd5b60006020828403121561151457600080fd5b6104d7826114f0565b6001600160a01b03831681526060810163ffffffff61153b846114a8565b16602083015261154d602084016114f0565b60020b60408301529392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212209162f1f131ec4fac7a1275b18d46cc2b52b3fe7cf275201cc08af1669784caff64736f6c634300080f0033a26469706673582212208a0baa08f1bc50d985763d9055fc21564c6a0d4bf33c3bf702bd04d9620043df64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806397862d6d1161007157806397862d6d1461014d57806399df712014610160578063e3056a34146101c5578063e8047788146101d8578063ebaa56aa146101eb578063f235757f1461020c57600080fd5b806307d5851a146100b95780630c340a24146100ce57806313f6986d146100fe5780631698ee82146101065780633c1a17ff146101195780635cc1fd361461013a575b600080fd5b6100cc6100c73660046106ed565b61021f565b005b6000546100e1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cc61029f565b6100e1610114366004610722565b6102d4565b61012c610127366004610722565b61038d565b6040519081526020016100f5565b6100e1610148366004610769565b610406565b6100cc61015b366004610795565b610544565b60035460045460055461018d926001600160a01b0316919062ffffff8116906301000000900461ffff1684565b604080516001600160a01b039095168552602085019390935262ffffff9091169183019190915261ffff1660608201526080016100f5565b6001546100e1906001600160a01b031681565b6002546100e1906001600160a01b031681565b6006546101f99061ffff1681565b60405161ffff90911681526020016100f5565b6100cc61021a3660046106ed565b6105b3565b6000546001600160a01b0316331461024a5760405163070545c960e51b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f23ab7a40fedc3062f72fa590994df2ec8e49b54309a22df0ad3790dbc56346be906020015b60405180910390a150565b6001546001600160a01b031633146102ca57604051639ba0305d60e01b815260040160405180910390fd5b6102d26105ea565b565b6000806102e285858561038d565b90506103663082604051806020016102f9906106cb565b601f1982820381018352601f90910116604081815282516020938401206001600160f81b03198385015260609590951b6bffffffffffffffffffffffff19166021830152603582019390935260558082019490945282518082039094018452607501909152815191012090565b9150816001600160a01b03163b600003610384576000915050610386565b505b9392505050565b6000806000846001600160a01b0316866001600160a01b0316106103b25784866103b5565b85855b604080516001600160a01b03808516602083015283169181019190915262ffffff87166060820152919350915060800160405160208183030381529060405280519060200120925050509392505050565b6002546000906001600160a01b0316331461043457604051638e5b30cb60e01b815260040160405180910390fd5b60408051608081018252308082526020820186905262ffffff851682840181905260065461ffff166060909301839052600380546001600160a01b03191690921790915560048690556005805464ffffffffff191690911763010000009092029190911790555183906104a6906106cb565b8190604051809103906000f59050801580156104c6573d6000803e3d6000fd5b50600380546001600160a01b031916905560006004556005805464ffffffffff19169055600654604080516001600160a01b03841681526020810187905261ffff909216908201529091507ff643dccb9b460e4f17699bf473e898bdbebd63ef8f018af915aa951cddf391689060600160405180910390a192915050565b6000546001600160a01b0316331461056f5760405163070545c960e51b815260040160405180910390fd5b6006805461ffff191661ffff83169081179091556040519081527fec9fa937c26cb048aac5fc5992eaace52f38cd13c8da22f42630090bd258261f90602001610294565b6000546001600160a01b031633146105de5760405163070545c960e51b815260040160405180910390fd5b6105e781610648565b50565b60018054600080546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527f5d5d6e01b731c3e68060f7fe13156f6197d4aeffc2d6f498e34c717ae616b7349060200160405180910390a1565b6001600160a01b03811661066f5760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b038381169182179092556000546040805191909316815260208101919091527f6353ec38ac394f8be94bfafcdd3580d356470599059eaeebedc3207e1cc03dec9101610294565b611865806107ba83390190565b6001600160a01b03811681146105e757600080fd5b6000602082840312156106ff57600080fd5b8135610386816106d8565b803562ffffff8116811461071d57600080fd5b919050565b60008060006060848603121561073757600080fd5b8335610742816106d8565b92506020840135610752816106d8565b91506107606040850161070a565b90509250925092565b6000806040838503121561077c57600080fd5b8235915061078c6020840161070a565b90509250929050565b6000602082840312156107a757600080fd5b813561ffff8116811461038657600080fdfe60c06040523480156200001157600080fd5b506000336001600160a01b03166399df71206040518163ffffffff1660e01b8152600401608060405180830381865afa15801562000053573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000799190620001c6565b62010000805462ffffff90931662ffffff199093169290921790915560a0919091526001600160a01b039091166080526040805160e081018252600080825260208201529192508101620000cf6001846200023a565b61ffff90811682529283166020808301829052604080840192909252600060608085018290526001608095860152855182549387015194870151918701519587015160a088015160c0909801511515600160f01b0260ff60f01b1960ff99909916600160e81b0260ff60e81b19928b16600160d81b029290921662ffffff60d81b19988b16600160c81b0261ffff60c81b1995909b16600160b81b029490941663ffffffff60b81b1962ffffff909816600160a01b026001600160b81b03199097166001600160a01b039094169390931795909517959095161796909617939093169490941717919091169190911790556200026c565b60008060008060808587031215620001dd57600080fd5b84516001600160a01b0381168114620001f557600080fd5b60208601516040870151919550935062ffffff811681146200021657600080fd5b606086015190925061ffff811681146200022f57600080fd5b939692955090935050565b600061ffff838116908316818110156200026457634e487b7160e01b600052601160045260246000fd5b039392505050565b60805160a0516115be620002a76000396000818161025c015281816105bb015261066301526000818161029101526102e401526115be6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063883bdbfd11610071578063883bdbfd146102115780639fdbd4d714610232578063c1c9115a14610257578063c45a01551461028c578063d21220a7146102b3578063ddca3f43146102c857600080fd5b80630dfe1681146100ae57806323e512d4146100e7578063252c09d71461010a5780633453952f146101575780633850c7bd1461016c575b600080fd5b62010000546100ca90630100000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fa6100f536600461124e565b6102e0565b60405190151581526020016100de565b61011d6101183660046112d2565b6104de565b6040805163ffffffff909516855260069390930b60208501526001600160a01b0390911691830191909152151560608201526080016100de565b61016a610165366004611303565b610523565b005b6000546101c0906001600160a01b03811690600160a01b810460020b9061ffff600160b81b8204811691600160c81b8104821691600160d81b8204169060ff600160e81b8204811691600160f01b90041687565b604080516001600160a01b03909816885260029690960b602088015261ffff94851695870195909552918316606086015291909116608084015260ff1660a0830152151560c082015260e0016100de565b61022461021f366004611341565b6106cb565b6040516100de9291906113b6565b62010000546102439062ffffff1681565b60405162ffffff90911681526020016100de565b61027e7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100de565b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b62010001546100ca906001600160a01b031681565b620100015461024390600160a01b900462ffffff1681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e80477886040518163ffffffff1660e01b8152600401602060405180830381865afa158015610340573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610364919061143d565b6001600160a01b0316336001600160a01b03161461039557604051638e5b30cb60e01b815260040160405180910390fd5b6201000080546000906103ac9062ffffff16611470565b91906101000a81548162ffffff021916908362ffffff160217905562ffffff168262ffffff16146103df575060006104d7565b6000805460019061ffff600160b81b909104811690811061040257610402611492565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b909104161515606082015290508360005b818110156104cf5786868281811061047257610472611492565b61048892602060409092020190810191506114bc565b63ffffffff16836000015163ffffffff1610156104bf576104bf8787838181106104b4576104b4611492565b90506040020161073c565b6104c8816114d7565b9050610458565b506001925050505b9392505050565b60018161ffff81106104ef57600080fd5b015463ffffffff81169150600160201b810460060b90600160581b81046001600160a01b031690600160f81b900460ff1684565b600054600160f01b900460ff1661054d5760405163139816ff60e31b815260040160405180910390fd5b600080836001600160a01b0316856001600160a01b031610610570578385610573565b84845b604080516001600160a01b03808516602083015283169181019190915262ffffff861660608201529193509150608001604051602081830303815290604052805190602001207f0000000000000000000000000000000000000000000000000000000000000000146105f75760405162820f3560e61b815260040160405180910390fd5b6201000080546301000000600160b81b03191663010000006001600160a01b03858116918202929092179092556201000180549184166001600160b81b03199092168217600160a01b62ffffff8816908102919091179091556000805460ff60f01b19169055604080517f00000000000000000000000000000000000000000000000000000000000000008152602081019490945283019190915260608201527fb50ab96cf9f83d6c076a0d2a6e27a65bf1242920ba414829aa618d57d4a263739060800160405180910390a15050505050565b6060806107314285858080602002602001604051908101604052809392919081815260200183836020028082843760009201829052508054600196959450600160a01b810460020b935061ffff600160b81b820481169350600160c81b9091041661083a565b915091509250929050565b60008054819061078c90600160b81b900461ffff1661075e60208601866114bc565b600080546001939291600160a01b820460020b9161ffff600160c81b8204811691600160d81b900416610985565b6000805461ffff808516600160b81b0261ffff60b81b19918516600160c81b029190911663ffffffff60b81b199092169190911717905590925090506107d86040840160208501611502565b6000805462ffffff92909216600160a01b0262ffffff60a01b199092169190911790556040517f351cb05bc71b044931f7410e88dceed68c021615a824de572c6cb0a735f50ac49061082d903390869061151d565b60405180910390a1505050565b60608060008361ffff161161086257604051636b93000360e11b815260040160405180910390fd5b865167ffffffffffffffff81111561087c5761087c61155c565b6040519080825280602002602001820160405280156108a5578160200160208202803683370190505b509150865167ffffffffffffffff8111156108c2576108c261155c565b6040519080825280602002602001820160405280156108eb578160200160208202803683370190505b50905060005b8751811015610978576109228a8a8a848151811061091157610911611492565b60200260200101518a8a8a8a610b0d565b84838151811061093457610934611492565b6020026020010184848151811061094d5761094d611492565b6001600160a01b039093166020938402919091019092019190915260069190910b90526001016108f1565b5097509795505050505050565b6000806000898961ffff1661ffff81106109a1576109a1611492565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff161515606083015290925089169003610a0a5788859250925050610b01565b8461ffff168461ffff16118015610a2b57506001850361ffff168961ffff16145b15610a3857839150610a3c565b8491505b8161ffff168960010161ffff1681610a5657610a56611572565b069250610a6581898989610cbc565b8a8461ffff1661ffff8110610a7c57610a7c611492565b825191018054602084015160408501516060909501511515600160f81b026001600160f81b036001600160a01b03909616600160581b02959095166affffffffffffffffffffff66ffffffffffffff909216600160201b026affffffffffffffffffffff1990931663ffffffff90951694909417919091171691909117919091179055505b97509795505050505050565b6000808663ffffffff16600003610bb6576000898661ffff1661ffff8110610b3757610b37611492565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff16151560608301529092508a1614610ba257610b9f818a8988610cbc565b90505b806020015181604001519250925050610b01565b868803600080610bcb8c8c858c8c8c8c610d81565b91509150816000015163ffffffff168363ffffffff1603610bfc578160200151826040015194509450505050610b01565b806000015163ffffffff168363ffffffff1603610c29578060200151816040015194509450505050610b01565b60008260000151826000015103905060008360000151850390508063ffffffff168263ffffffff1660060b856020015185602001510360060b81610c6f57610c6f611572565b05028460200151018263ffffffff168263ffffffff1686604001518660400151036001600160a01b03160281610ca757610ca7611572565b04856040015101965096505050505050610b01565b604080516080810182526000808252602082018190529181018290526060810191909152600085600001518503905060405180608001604052808663ffffffff1681526020018263ffffffff168660020b0288602001510160060b81526020016000856001600160801b031611610d34576001610d36565b845b6001600160801b031663ffffffff60801b608085901b1681610d5a57610d5a611572565b048860400151016001600160a01b0316815260200160011515815250915050949350505050565b604080516080810182526000808252602082018190529181018290526060810191909152604080516080810182526000808252602082018190529181018290526060810191909152888561ffff1661ffff8110610de057610de0611492565b60408051608081018252919092015463ffffffff8116808352600160201b820460060b6020840152600160581b82046001600160a01b031693830193909352600160f81b900460ff16151560608201529250610e3e90899089610f8d565b15610e6a57815163ffffffff888116911614610b015781610e6183898988610cbc565b91509150610b01565b888361ffff168660010161ffff1681610e8557610e85611572565b0661ffff1661ffff8110610e9b57610e9b611492565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201819052909250610f4457604080516080810182528a5463ffffffff81168252600160201b810460060b6020830152600160581b81046001600160a01b031692820192909252600160f81b90910460ff161515606082015291505b610f5388836000015189610f8d565b610f70576040516327e8e87560e01b815260040160405180910390fd5b610f7d898989888761104e565b9150915097509795505050505050565b60008363ffffffff168363ffffffff1611158015610fb757508363ffffffff168263ffffffff1611155b15610fd3578163ffffffff168363ffffffff16111590506104d7565b60008463ffffffff168463ffffffff1611610ffa578363ffffffff16600160201b01611002565b8363ffffffff165b64ffffffffff16905060008563ffffffff168463ffffffff1611611032578363ffffffff16600160201b0161103a565b8363ffffffff165b64ffffffffff169091111595945050505050565b60408051608081018252600080825260208201819052918101829052606081019190915260408051608081018252600080825260208201819052918101829052606081019190915260008361ffff168560010161ffff16816110b2576110b2611572565b0661ffff169050600060018561ffff16830103905060005b506002818301048961ffff871682816110e5576110e5611572565b0661ffff81106110f7576110f7611492565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b9091041615156060820181905290955061115b578060010192506110ca565b898661ffff16826001018161117257611172611572565b0661ffff811061118457611184611492565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b909104161515606082015285519094506000906111e8908b908b610f8d565b905080801561120157506112018a8a8760000151610f8d565b1561120c5750611229565b8061121c57600182039250611223565b8160010193505b506110ca565b5050509550959350505050565b803562ffffff8116811461124957600080fd5b919050565b60008060006040848603121561126357600080fd5b833567ffffffffffffffff8082111561127b57600080fd5b818601915086601f83011261128f57600080fd5b81358181111561129e57600080fd5b8760208260061b85010111156112b357600080fd5b6020928301955093506112c99186019050611236565b90509250925092565b6000602082840312156112e457600080fd5b5035919050565b6001600160a01b038116811461130057600080fd5b50565b60008060006060848603121561131857600080fd5b8335611323816112eb565b92506020840135611333816112eb565b91506112c960408501611236565b6000806020838503121561135457600080fd5b823567ffffffffffffffff8082111561136c57600080fd5b818501915085601f83011261138057600080fd5b81358181111561138f57600080fd5b8660208260051b85010111156113a457600080fd5b60209290920196919550909350505050565b604080825283519082018190526000906020906060840190828701845b828110156113f257815160060b845292840192908401906001016113d3565b5050508381038285015284518082528583019183019060005b818110156114305783516001600160a01b03168352928401929184019160010161140b565b5090979650505050505050565b60006020828403121561144f57600080fd5b81516104d7816112eb565b634e487b7160e01b600052601160045260246000fd5b600062ffffff8083168181036114885761148861145a565b6001019392505050565b634e487b7160e01b600052603260045260246000fd5b803563ffffffff8116811461124957600080fd5b6000602082840312156114ce57600080fd5b6104d7826114a8565b6000600182016114e9576114e961145a565b5060010190565b8035600281900b811461124957600080fd5b60006020828403121561151457600080fd5b6104d7826114f0565b6001600160a01b03831681526060810163ffffffff61153b846114a8565b16602083015261154d602084016114f0565b60020b60408301529392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212209162f1f131ec4fac7a1275b18d46cc2b52b3fe7cf275201cc08af1669784caff64736f6c634300080f0033a26469706673582212208a0baa08f1bc50d985763d9055fc21564c6a0d4bf33c3bf702bd04d9620043df64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPool(address,address,uint24)": {
        "params": {
          "_fee": "The fee denominated in hundredths of a bip",
          "_tokenA": "The contract address of either token0 or token1",
          "_tokenB": "The contract address of the other token"
        },
        "returns": {
          "_oracle": "The oracle address"
        }
      },
      "getPoolSalt(address,address,uint24)": {
        "params": {
          "_fee": "The fee denominated in hundredths of a bip",
          "_tokenA": "The contract address of either token0 or token1",
          "_tokenB": "The contract address of the other token"
        },
        "returns": {
          "_poolSalt": "Pool salt for inquired parameters"
        }
      },
      "setDataReceiver(address)": {
        "details": "Will disallow the previous dataReceiver",
        "params": {
          "_dataReceiver": "The address of the new allowed dataReceiver"
        }
      },
      "setInitialCardinality(uint16)": {
        "params": {
          "_initialCardinality": "The initial size of the observations memory storage for newly deployed pools"
        }
      },
      "setPendingGovernor(address)": {
        "params": {
          "_pendingGovernor": "Address of the proposed new governor"
        }
      }
    },
    "stateVariables": {
      "initialCardinality": {
        "return": "The initial size of the observations memory storage for newly deployed pools",
        "returns": {
          "_0": "The initial size of the observations memory storage for newly deployed pools"
        }
      },
      "oracleParameters": {
        "returns": {
          "cardinality": "The size of the observations memory storage",
          "factory": "The address of the deployer factory",
          "poolNonce": "The initial nonce of the pool data",
          "poolSalt": "The id of both the oracle and the pool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "OnlyGovernor()": [
        {
          "notice": "Throws if a non-governor user tries to call a OnlyGovernor function"
        }
      ],
      "OnlyPendingGovernor()": [
        {
          "notice": "Throws if a non-pending-governor user tries to call a OnlyPendingGovernor function"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Throws if a variable is assigned to the zero address"
        }
      ]
    },
    "events": {
      "PendingGovernorAccepted(address)": {
        "notice": "Emitted when a new governor is set"
      },
      "PendingGovernorSet(address,address)": {
        "notice": "Emitted when a new pending governor is set"
      }
    },
    "kind": "user",
    "methods": {
      "acceptPendingGovernor()": {
        "notice": "Allows a proposed governor to accept the governance"
      },
      "getPool(address,address,uint24)": {
        "notice": "Overrides UniV3Factory getPool mapping"
      },
      "setDataReceiver(address)": {
        "notice": "Allows governor to set a new allowed dataReceiver"
      },
      "setInitialCardinality(uint16)": {
        "notice": "Allows governor to set a new initial cardinality for new oracles"
      },
      "setPendingGovernor(address)": {
        "notice": "Allows a governor to propose a new governor"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1606,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1609,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1047,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "dataReceiver",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDataReceiver)1980"
      },
      {
        "astId": 1050,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "oracleParameters",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(OracleParameters)2000_storage"
      },
      {
        "astId": 1054,
        "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
        "label": "initialCardinality",
        "offset": 0,
        "slot": "6",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDataReceiver)1980": {
        "encoding": "inplace",
        "label": "contract IDataReceiver",
        "numberOfBytes": "20"
      },
      "t_contract(IOracleFactory)2092": {
        "encoding": "inplace",
        "label": "contract IOracleFactory",
        "numberOfBytes": "20"
      },
      "t_struct(OracleParameters)2000_storage": {
        "encoding": "inplace",
        "label": "struct IOracleFactory.OracleParameters",
        "members": [
          {
            "astId": 1993,
            "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
            "label": "factory",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IOracleFactory)2092"
          },
          {
            "astId": 1995,
            "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
            "label": "poolSalt",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1997,
            "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
            "label": "poolNonce",
            "offset": 0,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 1999,
            "contract": "solidity/contracts/OracleFactory.sol:OracleFactory",
            "label": "cardinality",
            "offset": 3,
            "slot": "2",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      }
    }
  }
}